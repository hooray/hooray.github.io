<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用 keep-alive 的 include 属性实现 Vue 页面缓存</title>
    <url>/posts/5dc60183/</url>
    <content><![CDATA[<p>总所周知，Vue 中的 keep-alive 可以对组件进行缓存，搭配上 vue-router 的 <code>&lt;router-view&gt;</code> 则可以实现页面缓存。</p>
<p>但网上大多数的方案都是采用在 router 的 meta 属性里增加一个 keepAlive 字段，然后在父组件或者根组件中，根据 keepAlive 字段的状态使用 <code>&lt;keep-alive&gt;</code> 标签，实现对 <code>&lt;router-view&gt;</code> 的缓存，如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">"$route.meta.keepAlive"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">"!$route.meta.keepAlive"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果要对页面动态控制是否需要缓存，则是在 <code>beforeRouteLeave()</code> 里去控制 keepAlive 的状态。</p>
<p>这个方法看似简单，但问题挺多，网上的解决方案似乎也不太理想，我甚至连尝试都懒得去尝试。</p>
<p>因为这个方案为了解决一个问题，反而创造出了一堆问题，为了解决这一堆问题，又引入了各种“奇思妙想”、“剑走偏锋”的骚操作，光是看大家的代码就让我头大。</p>
<p>在思考并搜索还有什么更好解决方案的时候，我无意翻看到 Vue 的官方文档，在 <a href="https://cn.vuejs.org/v2/api/#keep-alive" target="_blank" rel="noopener">keep-alive</a> 的介绍里看到， 2.1.0 里新增了 include 和 exclude 这两个属性，这似乎给我了一点思路。</p>
<p>于是带着这两个关键词，重新去百度里搜寻了一番，果然，已经有现成的解决方案了。</p>
<a id="more"></a>
<h2 id="实现思路"><a class="header-anchor" href="#实现思路"></a>实现思路</h2>
<p>这个解决方案思路其实很清晰，因为 include 属性支持传入字符串、正则和数组，利用 vuex 全局去管理 include 里的数据，就可以达到动态管理缓存。</p>
<p>比起开篇介绍的那个方案，这个方案从始至终都没有销毁 <code>&lt;router-view&gt;</code> ，从而规避了很多无形的坑。加上 include 本身又是官方提供的属性，跟着官方走，准没错！</p>
<h2 id="实现代码"><a class="header-anchor" href="#实现代码"></a>实现代码</h2>
<blockquote>
<p>老罗说的好：少废话，先看东西。</p>
</blockquote>
<p>首先 include 属性里存放的是组件的 name ，也就是说，我们的页面组件必须都先设置上 name ，<strong>注意了，这个 name 并不是 router 里的 name ，而是组件的 name</strong> 。</p>
<p>接着，因为 include 的数据是通过 vuex 动态管理的，所以需要定义一个 store ，代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    list: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    add(state, name) &#123;</span><br><span class="line">        state.list.indexOf(name) &lt; <span class="number">0</span> &amp;&amp; state.list.push(name)</span><br><span class="line">    &#125;,</span><br><span class="line">    remove(state, name) &#123;</span><br><span class="line">        state.list = state.list.filter(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> v != name</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    clean(state) &#123;</span><br><span class="line">        state.list = []</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    namespaced: <span class="literal">true</span>,</span><br><span class="line">    state,</span><br><span class="line">    mutations</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 mutations 里定义了三个对 list 状态更改的事件，分别是 <code>add</code> 、<code>remove</code> 、<code>clean</code> ，随后我们在父组件或者根组件中就可以这样使用了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">"$store.state.keepAlive.list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>准备工作做好后，那什么时候去控制 include 里的数据呢？那就是在页面进入和离开的时候去控制就行，这里就需要用到 <code>beforeRouteEnter()</code> 和 <code>beforeRouteLeave()</code> 这两个钩子函数。</p>
<p>我们假设这样一个场景，有这样两个页面，一个商品列表页（A），一个商品详情页（B），当从 A 页面跳转到 B 页面的时候，希望把 A 页面缓存上，这样在 B 页面做 <code>$router.go(-1)</code> 这种返回操作的时候，可以继续浏览 A 页面的内容。代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A 页面</span></span><br><span class="line"><span class="comment">// 页面进入前</span></span><br><span class="line">beforeRouteEnter(to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    next(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</span><br><span class="line">        vm.$store.commit(<span class="string">'keepAlive/add'</span>, <span class="string">'List'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 页面离开前</span></span><br><span class="line">beforeRouteLeave(to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="keyword">if</span> ([<span class="string">'detail'</span>].indexOf(to.name) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$store.commit(<span class="string">'keepAlive/remove'</span>, <span class="string">'List'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里有一点需要注意，当离开 A 页面前，需要判断去往的页面是否为 B 页面，也就是这句 <code>if (['detail'].indexOf(to.name) &lt; 0)</code> 代码（<strong>这里的 <code>detail</code> 是去往页面 router 里的 name ，并非组件的 name</strong>），如果去往的页面不是 B 页面，则清除缓存，比如从 A 页面返回了更上级的页面，如果不清除，下次再进来的时候，会直接调取缓存，而不是全新打开。</p>
<p>是不是很简单？思路是不是也特别清晰？先别着急，我们来踩踩坑。</p>
<h2 id="踩坑"><a class="header-anchor" href="#踩坑"></a>踩坑</h2>
<h3 id="缓存无法清除"><a class="header-anchor" href="#缓存无法清除"></a>缓存无法清除</h3>
<p>以上面举的例子，想要清除 A 页面的缓存，必须从 A 页面进行操作，比如从 A 页面返回到更上级的 C 页面。</p>
<p>但在实际业务中，页面之间的联系并非是一条直线的。比如从 A 页面进入 B 页面， B 页面有个功能按钮是可以直接进入 C 页面的，这时候再从 C 页面进入 A 页面， A 页面的缓存是还存在的，导致打开还是上次缓存的内容，而不是全新的 A 页面。</p>
<p>这时候就需要用到 <code>$store.commit('keepAlive/clean')</code> 了，因为涉及到具体业务逻辑，所以在什么时候调用 clean 方法需要具体页面具体分析。我的原则就是在顶级，或者次顶级页面上，做缓存清空处理，比如例子中的 C 页面，或者是一般项目的首页。</p>
<h3 id="页面刷新后缓存失效"><a class="header-anchor" href="#页面刷新后缓存失效"></a>页面刷新后缓存失效</h3>
<p>关于 Vue 刷新的问题，我在《<a href="/posts/de7170ad/" title="Vue中刷新当前页的几种方式及优劣分析">Vue中刷新当前页的几种方式及优劣分析</a>》已经有提到过。</p>
<p>其中方案三的刷新，无法和 keep-alive 共存，所以在需要缓存的相关页面里，建议使用方案二，或者使用方案四，手动进行数据更新。</p>
<h3 id="如何更新缓存"><a class="header-anchor" href="#如何更新缓存"></a>如何更新缓存</h3>
<p>有这么一种情况，从 A 页面进入 B 页面，在 B 页面做了一些操作后，返回 A 页面，这时候 A 页面部分数据要进行更新。</p>
<p>最常见的就是订单列表页，从订单列表页进入订单详情页，在订单详情页里做了一些操作，比如关闭该订单，这时改变了订单的状态，当返回的时候，订单列表页虽然被缓存了，但列表里的信息要进行更新。</p>
<p>我自己想到的方案是，在 B 页面离开前，往去往页面的 meta 里添加一个特定字段，例如 <code>to.meta.returnRefresh</code> ，至于这个字段什么时候要添加，我们可以自己控制。然后在订单列表页的 <code>activated()</code> 钩子里处理即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 订单详情页</span></span><br><span class="line">beforeRouteLeave(to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="keyword">if</span> ([<span class="string">'orderList'</span>].indexOf(to.name) &gt;= <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.dataChange) &#123;</span><br><span class="line">        to.meta.returnRefresh = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    next()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订单列表页</span></span><br><span class="line">activated() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.$route.meta.returnRefresh) &#123;</span><br><span class="line">        <span class="comment">// 业务代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我的这个方案没什么大问题，就是在体验上有点欠缺。因为 A 页面的更新，是当 A 页面被激活后才会进行，能明显看到返回 A 页面后，数据才进行更新，整个过程用户是有感的。</p>
<p>于是我开始在网上搜寻相关解决方案，同时在用 Vue 开发者工具操作的时候发现一个细节：</p>
<p><img src="https://i.loli.net/2019/12/19/N8etrgJU756nykd.gif" alt=""></p>
<p>因为 A 页面被缓存了，所以实际上 A 页面和 B 页面这两个 <code>&lt;router-view&gt;</code> 是并存的，只是其中一个被隐藏了。既然这两个组件是并存的，我开始有方向了，搜索一圈之后，找到了解决方案。</p>
<p>简单来说，就是兄弟组件之间的通信，父子组件的通信我们比较了解，但兄弟平级组件之间的通信，和父子组件不一样，他们需要借助事件总线，因为 <code>$on()</code> 和 <code>$emit()</code> 的事件必须是在一个公共的实例上才能触发，那我们可以新建一个 Vue 实例当作事件总线，达到可以不管组件之间的父子关系，都能通过这个实例通信的目的。</p>
<p>这里我偷懒了，直接把现有 Vue 实例当做事件总线，并将它绑定到 Vue 原型链上，方便后续使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.$eventBus = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    router,</span><br><span class="line">    store,</span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure>
<p>准备好后，我们来看下如何在订单详情页通知订单列表页进行数据更新。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 订单详情页</span></span><br><span class="line"><span class="keyword">this</span>.$eventBus.$emit(<span class="string">'refreshOrderList'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订单列表页</span></span><br><span class="line">mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$eventBus.$on(<span class="string">'refreshOrderList'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="comment">// 业务代码</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">beforeDestroy() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$eventBus.$off(<span class="string">'refreshOrderList'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们在订单详情页里任何时候都可以通过 <code>this.$eventBus.$emit('refreshOrderList')</code> 去通知订单列表页更新数据，这样数据的更新对用户来说是无感的，用户返回订单列表页的时候，数据是已经更新好了，对用户体验上有明显的提升。</p>
<p>避免意外情况，在订单列表页被销毁前，手动销毁下监听的事件，这样就万无一失了。</p>
<h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2>
<p>其实通篇的解决方案，网上都能找到类似的影子，如何将它们合理的使用在项目或产品中，这才是我们需要多去思考的。</p>
<p>其次我似乎没有遇到从 include 列表移除组件，组件没有被销毁的问题，可能 Vue 已经修复了这个 bug 吧。</p>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><a href="https://segmentfault.com/a/1190000012083511" target="_blank" rel="noopener">另辟蹊径：vue单页面，多路由，前进刷新，后退不刷新</a></li>
<li><a href="https://blog.csdn.net/roamingcode/article/details/81774058" target="_blank" rel="noopener">Vue中keep-alive的深入理解与使用(配合router-view缓存整个路由页面)</a></li>
<li><a href="https://www.jianshu.com/p/11f7dbc07ad3" target="_blank" rel="noopener">VUE缓存：动态keep-alive</a></li>
<li><a href="https://wy1009.github.io/2018/03/08/Vue-js-keep-alive%E8%B8%A9%E5%9D%91/" target="_blank" rel="noopener">Vue.js keep-alive踩坑</a></li>
<li><a href="https://segmentfault.com/a/1190000018520676?utm_source=tag-newest" target="_blank" rel="noopener">Vue兄弟组件通信的三种方式</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue 相关</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>页面缓存</tag>
        <tag>keep-alive</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中刷新当前页的几种方式及优劣分析</title>
    <url>/posts/de7170ad/</url>
    <content><![CDATA[<p>这个问题其实百度一下就有一堆解决方案，但是却很少有文章去分析他们各自的优势和劣势，而我这篇文章，也是在具体项目开发中，踩过一些坑后的心得和总结。</p>
<a id="more"></a>
<h2 id="方案一"><a class="header-anchor" href="#方案一"></a>方案一</h2>
<p>基本不会使用的方案，就是通过 <code>location.reload()</code> 或者 <code>$router.go(0)</code> 进行一次页面重新载入，效果等同于手动按 F5 刷新。</p>
<p>为什么说基本不用，因为弊端也很明显。首先体验不好，页面重新载入会出现大段时间的白屏；其次如果使用了 Vuex ，刷新可能会导致数据被清空。</p>
<h2 id="方案二"><a class="header-anchor" href="#方案二"></a>方案二</h2>
<p>准备一个空白页，页面里只做一件事，就是 <code>$router.go(-1)</code> ，需要刷新当前页的时候，只需跳转到该页面即可。</p>
<p>这个方案也会出现一小段白屏的时间，但问题不大，可以通过一些 loading 效果遮盖；其次因为是前进到一个空白页，再返回当前页，在 PC 端会出现一个小的 bug ，就是刷新一次之后，浏览器上的前进按钮会变成可点击，演示如下图：</p>
<p><img src="https://i.loli.net/2019/12/17/hnEAZ7VOsIzlHT4.gif" alt=""></p>
<h2 id="方案三"><a class="header-anchor" href="#方案三"></a>方案三</h2>
<p>网上能搜到最推荐的解决方案。就是通过 <code>v-if</code> 控制 <code>&lt;router-view&gt;</code> 的显示，如果要刷新页面，则将 <code>&lt;router-view&gt;</code> 销毁再重建一次即可。具体实现代码如下：</p>
<p>主要改造的就是 App.vue 文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RouterView</span> <span class="attr">v-if</span>=<span class="string">"isRouterAlive"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    provide() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            reload: <span class="keyword">this</span>.reload</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            isRouterAlive: <span class="literal">true</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        reload() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.isRouterAlive = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> (<span class="keyword">this</span>.isRouterAlive = <span class="literal">true</span>))</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过 Vue 的 <a href="https://cn.vuejs.org/v2/api/#provide-inject" target="_blank" rel="noopener">provide / inject</a> ，将 App.vue 里的 <code>reload()</code> 方法注入到子页面里，这样在子页面里就可以通过这样的方式使用了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    inject: [<span class="string">'reload'</span>],</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">        func() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.reload()</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当然还可以更极致一点，就是直接在 App.vue 里监听路由的变化，如果当前路由和上一个路由的 name 属性一样，则可以认为是刷新页面操作，自动执行 <code>reload()</code> 方法。实现代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RouterView</span> <span class="attr">v-if</span>=<span class="string">"isRouterAlive"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    provide() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            reload: <span class="keyword">this</span>.reload</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            isRouterAlive: <span class="literal">true</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line"><span class="actionscript">        $route: <span class="string">'routeChange'</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        reload() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.isRouterAlive = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> (<span class="keyword">this</span>.isRouterAlive = <span class="literal">true</span>))</span></span><br><span class="line">        &#125;,</span><br><span class="line">        routeChange(newVal, oldVal) &#123;</span><br><span class="line">            if (newVal.name == oldVal.name) &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.reload()</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样的好处在于，如果是在同一个路由，但不同参数间的跳转，能实现自动刷新页面。例如商城系统里最常见的，从一个商品详情页跳转到另一个商品详情页，这个时候，路由其实是没变化的，变化的只是 params 或者 query ，就不需要手动再去执行注入的 <code>reload()</code> 方法了。</p>
<p>这个方案看起来很完美，但有没有弊端呢？其实是有的，就是当项目在使用 keep-alive 做页面缓存的时候，会出现明显的问题。</p>
<p>因为一般做页面缓存都是通过 keep-alive 将 <code>&lt;router-view&gt;</code> 进行整页缓存，而刷新页面则是将 <code>&lt;router-view&gt;</code> 销毁并重建，所以一刷新，缓存就一并销毁了，所以在一些比较特殊的场景，还是有问题存在。</p>
<p><strong>在遇到这样需要缓存页面的场景，方案二就体现出它的优势了</strong>。因为它是通过路由跳转刷新当前页面的，所以 <code>&lt;router-view&gt;</code> 始终都存在，就也能保证 keep-alive 的页面缓存不受到任何影响。</p>
<h2 id="方案四"><a class="header-anchor" href="#方案四"></a>方案四</h2>
<p>这种属于不太通用处理办法，就是在当前页面里手动再次获取相关数据，覆盖原有数据，实现刷新。这个方案的好处就是自由度更高，想重新获取哪些数据，就获取哪些数据，当然开发效率也会变低，因为无法形成通用的方案，到底要刷新哪部分数据，每个页面的业务逻辑都不一样。</p>
<h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2>
<p>说白了，其实没有一种方案是完美的，还是得根据不同的场景，选择适合的解决方案。当然我个人还是更喜欢方案二和方案三结合使用，因为页面缓存使用的场景也是挺多的。</p>
]]></content>
      <categories>
        <category>Vue 相关</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue组件</tag>
        <tag>页面刷新</tag>
      </tags>
  </entry>
  <entry>
    <title>一个项目脚手架开发过程全记录</title>
    <url>/posts/5dfce78f/</url>
    <content><![CDATA[<p>公司内部不同类型的项目越来越多，有基于 jQuery 的，也有 Vue 的，还有小程序的，虽然已经有各种类型的项目模板，但每次有新项目，都要去手动拉取对应的项目模板，然后修改里面的配置，还得删掉一些演示代码，实在有些烦人，于是开发一个内部项目脚手架的想法孕育而生。</p>
<p>因为之前有了解过 vue-cli 的实现思路，它将项目模板和脚手架分离，模板存放在 git 上，然后在与用户交互的过程中下载不同的模板，这样模板可以单独维护，即便有更新，用户也不需要更新脚手架。</p>
<p>思路清晰了，下面就该动动手了。</p>
<a id="more"></a>
<h2 id="准备依赖库"><a class="header-anchor" href="#准备依赖库"></a>准备依赖库</h2>
<p>核心依赖库：</p>
<ul>
<li><a href="https://www.npmjs.com/package/commander" target="_blank" rel="noopener">commander</a> 解析命令行的命令和参数，用于处理用户输入的指令</li>
<li><a href="https://www.npmjs.com/package/inquirer" target="_blank" rel="noopener">inquirer</a> 通用的命令行用户界面集合，用于和用户进行交互</li>
<li><a href="https://www.npmjs.com/package/download-git-repo" target="_blank" rel="noopener">download-git-repo</a> 下载 git 仓库，用于下载项目模板</li>
<li><a href="https://www.npmjs.com/package/handlebars" target="_blank" rel="noopener">handlebars</a> 模板引擎，用于将用户提交的信息填充到文件中</li>
<li><a href="https://www.npmjs.com/package/shelljs" target="_blank" rel="noopener">shelljs</a> shell 命令执行，用于执行部分特殊指令</li>
</ul>
<p>辅助依赖库：</p>
<ul>
<li><a href="https://www.npmjs.com/package/ora" target="_blank" rel="noopener">ora</a> 终端旋转器，用于展示 loading 提示</li>
<li><a href="https://www.npmjs.com/package/chalk" target="_blank" rel="noopener">chalk</a> 给终端字体加上颜色</li>
<li><a href="https://www.npmjs.com/package/log-symbols" target="_blank" rel="noopener">log-symbols</a> 给终端加上彩色符号</li>
</ul>
<h2 id="初始化"><a class="header-anchor" href="#初始化"></a>初始化</h2>
<p>首先准备一个空目录，然后依次运行：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">yarn init</span><br><span class="line">yarn <span class="keyword">add</span><span class="bash"> commander inquirer download-git-repo handlebars shelljs ora chalk <span class="built_in">log</span>-symbols</span></span><br></pre></td></tr></table></figure>
<p>此时目录下就会生成好 <code>package.json</code> 文件，并且相关依赖也都安装好了。</p>
<p>然后打开 <code>package.json</code> 增加 <code>bin</code> 字段，并在里面定义我们的命令名和执行文件：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"1one-project"</span>,</span><br><span class="line">  ...</span><br><span class="line">  "bin": &#123;</span><br><span class="line">    "create-1one-project": "index.js"</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后创建 <code>index.js</code> 文件，并在文件开头写上 <code>#!/usr/bin/env node</code> ，代表这个文件是 node 环境下的脚本文件。</p>
<h2 id="处理命令行"><a class="header-anchor" href="#处理命令行"></a>处理命令行</h2>
<p>准备工作做好后，先构思一下最终效果，我们的命令行不需要太多功能，只需要一个 init 即可，即 <code>create-1one-project init</code> 的指令，实现如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>);</span><br><span class="line"></span><br><span class="line">program.command(<span class="string">'init [name]'</span>)</span><br><span class="line">    .action(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name);</span><br><span class="line">    &#125;);</span><br><span class="line">program.parse(process.argv);</span><br></pre></td></tr></table></figure>
<p>这里我增加了一个可选的 <code>name</code> 参数，下面会用到它。</p>
<h2 id="命令行交互"><a class="header-anchor" href="#命令行交互"></a>命令行交互</h2>
<p>这部分就靠 <a href="https://www.npmjs.com/package/inquirer" target="_blank" rel="noopener">inquirer</a> 实现了，主要就是构建一套问答系统，收集交互过程中用户提交选择的信息。</p>
<p>因为在 <a href="https://gitee.com/eoner/gulp-automation" target="_blank" rel="noopener">gulp-automation</a> 里有使用过，所以并不陌生，直接看代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>);</span><br><span class="line"></span><br><span class="line">inquirer.prompt([</span><br><span class="line">    &#123;</span><br><span class="line">        type: <span class="string">'input'</span>,</span><br><span class="line">        message: <span class="string">'请输入项目名'</span>,</span><br><span class="line">        name: <span class="string">'name'</span>,</span><br><span class="line">        <span class="keyword">default</span>: name,</span><br><span class="line">        validate: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (val == <span class="string">''</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'项目必须要有名称噢'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fs.existsSync(val)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'项目名已存在'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        type: <span class="string">'list'</span>,</span><br><span class="line">        message: <span class="string">'请选择项目类型'</span>,</span><br><span class="line">        name: <span class="string">'type'</span>,</span><br><span class="line">        choices: [<span class="string">'jQuery'</span>, <span class="string">'vue'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">]).then(<span class="function"><span class="params">answers</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(answers);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="下载项目模板"><a class="header-anchor" href="#下载项目模板"></a>下载项目模板</h2>
<p>因为在上一步我做了项目类型的选择，也就代表需要根据用户选择下载不用的项目模板。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> download = <span class="built_in">require</span>(<span class="string">'download-git-repo'</span>);</span><br><span class="line"></span><br><span class="line">download(answers.type == <span class="string">'jQuery'</span> ? <span class="string">'hooray/jquery-project-template'</span> ? <span class="string">'hooray/vue-project-template'</span>, answers.name, err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'项目创建失败'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'项目创建成功'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><a href="https://www.npmjs.com/package/download-git-repo" target="_blank" rel="noopener">download-git-repo</a> 支持从 Github 、Gitlab 和 Bitbucket 去下载，具体用法请查看官方文档。</p>
<h2 id="渲染项目模板"><a class="header-anchor" href="#渲染项目模板"></a>渲染项目模板</h2>
<p>这里需要使用 handlebars 语法对模板中的 <code>package.json</code> 文件进行修改，当然不限于这个文件，这里只是抛砖引玉。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"&#123;&#123;name&#125;&#125;"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>随后就是在模板下载成功后，将需要的信息渲染到 <code>package.json</code> 中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> handlebars = <span class="built_in">require</span>(<span class="string">'handlebars'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> packageFile = <span class="string">`<span class="subst">$&#123;answers.name&#125;</span>/package.json`</span>;</span><br><span class="line"><span class="keyword">if</span> (fs.existsSync(packageFile)) &#123;</span><br><span class="line">    <span class="keyword">const</span> content = fs</span><br><span class="line">        .readFileSync(packageFile)</span><br><span class="line">        .toString();</span><br><span class="line">    <span class="keyword">const</span> result = handlebars.compile(content)(&#123;</span><br><span class="line">        name: answers.name</span><br><span class="line">    &#125;);</span><br><span class="line">    fs.writeFileSync(packageFile, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="安装模板依赖包"><a class="header-anchor" href="#安装模板依赖包"></a>安装模板依赖包</h2>
<p>项目模板下载好后，通常我们会手动进入项目目录，然后执行 <code>yarn</code> 或者 <code>npm i</code> 进行依赖包安装，既然一步操作少不了，那就把它也自动化了吧。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> shell = <span class="built_in">require</span>(<span class="string">'shelljs'</span>);</span><br><span class="line"></span><br><span class="line">shell.cd(answers.name)</span><br><span class="line">    .exec(<span class="string">'yarn'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'依赖包安装成功'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<h2 id="测试"><a class="header-anchor" href="#测试"></a>测试</h2>
<p>到这步为止，整个脚手架的功能已经齐全并且可以正常使用了，本地做测试的话，可以通过 <code>node index.js init</code> 的方式执行脚本命令。</p>
<p>确认脚手架使用没问题后，我们最后来优化一下界面。</p>
<h2 id="视觉美化"><a class="header-anchor" href="#视觉美化"></a>视觉美化</h2>
<h3 id="Loading-美化"><a class="header-anchor" href="#Loading-美化"></a>Loading 美化</h3>
<p>比如在下载、安装依赖都是属于比较耗时，并且时间无法预估的操作，所以增加一个 loading 提示是比较必要的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">'ora'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始下载</span></span><br><span class="line"><span class="keyword">const</span> spinner = ora(<span class="string">'正在下载模板...'</span>);</span><br><span class="line">spinner.start();</span><br><span class="line"><span class="comment">// 下载失败调用</span></span><br><span class="line">spinner.fail();</span><br><span class="line"><span class="comment">// 下载成功调用</span></span><br><span class="line">spinner.succeed();</span><br></pre></td></tr></table></figure>
<h3 id="文字颜色美化"><a class="header-anchor" href="#文字颜色美化"></a>文字颜色美化</h3>
<p>成功绿色，失败红色。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(chalk.green(<span class="string">'项目创建成功'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(chalk.red(<span class="string">'项目创建失败'</span>));</span><br></pre></td></tr></table></figure>
<h3 id="符号美化"><a class="header-anchor" href="#符号美化"></a>符号美化</h3>
<p>在文字颜色的基础上，还可以增加 <code>√</code> 或 <code>×</code> 的符号，会让用户更加具象的清楚提示信息。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>);</span><br><span class="line"><span class="keyword">const</span> symbols = <span class="built_in">require</span>(<span class="string">'log-symbols'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(symbols.success, chalk.green(<span class="string">'项目创建成功'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(symbols.error, chalk.red(<span class="string">'项目创建失败'</span>));</span><br></pre></td></tr></table></figure>
<h2 id="发布"><a class="header-anchor" href="#发布"></a>发布</h2>
<p>通过 <code>yarn publish</code> 把脚手架发布到 NPM 上吧。</p>
<h2 id="完整代码"><a class="header-anchor" href="#完整代码"></a>完整代码</h2>
<p>我就知道你们没什么耐心，想直接看完整代码，那就顺便介绍一下我司的脚手架工具。</p>
<div style="text-align: center">
  <div class="github-card"
    data-user="hooray"
    data-repo="1one-project"
    data-height="200"
    data-width="100%"
    data-theme="default"
    data-target="undefined"
    data-client-id=""
    data-client-secret=""
  ></div>
</div>
<script src="/github-card-lib/githubcard.js"></script>
<p>目前提供了 <a href="https://github.com/hooray/gulp-automation" target="_blank" rel="noopener">gulp-automation</a> 和 <a href="https://github.com/hooray/vue-automation" target="_blank" rel="noopener">vue-automation</a> 两套模板，也是介绍过很多遍的东西了。</p>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><a href="https://segmentfault.com/a/1190000016487610" target="_blank" rel="noopener">开发一个 Parcel-vue 脚手架工具</a></li>
</ul>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>脚手架</tag>
      </tags>
  </entry>
  <entry>
    <title>给 Vue 项目中的 vendor.js 文件瘦身</title>
    <url>/posts/c25b8237/</url>
    <content><![CDATA[<p>在 Vue 项目开发中，会引用各种第三方库来提高开发效率，这就导致打包后的 vendor.js 文件体积相当臃肿，在加载时页面空白时间过长，用户体验很差。</p>
<p>要解决这个问题也很简单，既然是第三方的库，那其实就没必要都放在项目里，可以通过 CDN 的方式引入，不仅能减小 vendor.js 的体积，在加载速度上，也会用提升。</p>
<p>那在 Vue 项目中，要如何实现通过 CDN 引入第三方库并正常使用呢，下面就跟着我一步步来操作吧。</p>
<a id="more"></a>
<h2 id="修改-index-html"><a class="header-anchor" href="#修改-index-html"></a>修改 index.html</h2>
<p>找到 <code>public/index.html</code> 文件，将需要引入第三方库的 CDN 地址放进来。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"&lt;%= BASE_URL %&gt;favicon.ico"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue-automation<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">strong</span>&gt;</span>We're sorry but vue-automation doesn't work properly without JavaScript enabled. Please enable it to continue.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vue/2.6.10/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vue-router/3.1.3/vue-router.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vuex/3.1.1/vuex.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/axios/0.19.0/axios.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/qs/6.8.0/qs.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/lodash.js/4.17.15/lodash.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/moment.js/2.24.0/moment.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="修改-vue-config-js"><a class="header-anchor" href="#修改-vue-config-js"></a>修改 vue.config.js</h2>
<p>这里的修改其实是配置 webpack 的外部扩展（<a href="https://webpack.docschina.org/configuration/externals/" target="_blank" rel="noopener">externals</a>）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    configureWebpack: &#123;</span><br><span class="line">        externals: &#123;</span><br><span class="line">            <span class="string">'vue'</span>: <span class="string">'Vue'</span>,</span><br><span class="line">            <span class="string">'vue-router'</span>: <span class="string">'VueRouter'</span>,</span><br><span class="line">            <span class="string">'vuex'</span>: <span class="string">'Vuex'</span>,</span><br><span class="line">            <span class="string">'axios'</span>: <span class="string">'axios'</span>,</span><br><span class="line">            <span class="string">'qs'</span>: <span class="string">'Qs'</span>,</span><br><span class="line">            <span class="string">'lodash'</span>: <span class="string">'_'</span>,</span><br><span class="line">            <span class="string">'moment'</span>: <span class="string">'moment'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在 <code>externals</code> 中，key 是 require 的包名，value 是全局的变量</p>
</blockquote>
<h2 id="修改-main-js"><a class="header-anchor" href="#修改-main-js"></a>修改 main.js</h2>
<p>这一步就是要修改代码中的引入方式了，需要把原先用 <code>import</code> 引入的，改为 <code>require</code> 方式引入，就像这样。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import Vue from 'vue'</span></span><br><span class="line"><span class="keyword">const</span> Vue = <span class="built_in">require</span>(<span class="string">'vue'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// import axios from 'axios'</span></span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>)</span><br><span class="line"><span class="comment">// import qs from 'qs'</span></span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">'qs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// import lodash from 'lodash'</span></span><br><span class="line"><span class="keyword">const</span> lodash = <span class="built_in">require</span>(<span class="string">'lodash'</span>)</span><br><span class="line">Vue.prototype._ = lodash</span><br><span class="line"></span><br><span class="line"><span class="comment">// import moment from 'moment'</span></span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">'moment'</span>)</span><br><span class="line">Vue.prototype.$moment = moment</span><br></pre></td></tr></table></figure>
<p>当然不局限在 <code>main.js</code> 里，其它文件里如果有用到这些第三方库的地方，也需要一并修改掉。</p>
<h2 id="大功告成"><a class="header-anchor" href="#大功告成"></a>大功告成</h2>
<p>修改完上面这三处地方后，我们可以打包看看实际效果变化有多大。</p>
<p><img src="https://i.loli.net/2019/09/24/7iS5uJwmQXMqIUg.png" alt="优化前"></p>
<p><img src="https://i.loli.net/2019/09/24/k42l9bEI3yVaTeH.png" alt="优化后"></p>
<p>可以看到，优化前后的效果还是很明显的，从原先接近 500kb 的大小，一下减到 58kb 了，体积压缩到只有原先的八分之一。</p>
<p>当然，这只是 Vue 项目打包优化中的冰山一角，还有很多优化技巧，比如大家比较熟知的路由懒加载，这里就不展开了。</p>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><a href="https://segmentfault.com/a/1190000016309142" target="_blank" rel="noopener">配置webpack中externals来减少打包后vendor.js的体积</a></li>
<li><a href="https://www.jeffjade.com/2017/08/06/124-webpack-packge-optimization-for-volume/" target="_blank" rel="noopener">Webpack 打包优化之体积篇</a></li>
<li><a href="https://www.jeffjade.com/2017/08/12/125-webpack-package-optimization-for-speed/" target="_blank" rel="noopener">Webpack 打包优化之速度篇</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue 相关</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>打包</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>将 Git 项目提交到多个不同的仓库</title>
    <url>/posts/cbb1760/</url>
    <content><![CDATA[<p>在维护一些开源项目的时候，会遇到需要将代码提交到多个开源仓库，比如 Github/Gitlab/Gitee 等等，一般的做法是借助 GUI 工具配置多个远程仓库，例如 Sourcetree 里就是这样。</p>
<p><img src="https://i.loli.net/2019/08/22/O5UplEoNaWswDv3.png" alt=""></p>
<p>但是这样也并没有很方便，因为提交的时候需要分别提交，例如我配置了 2 个仓库，就需要提交 2 次，如果仓库比较多，重复性的操作就会比较多，而且容易出错，忘记提交了哪些仓库，哪些仓库还没提交。</p>
<p><img src="https://i.loli.net/2019/08/22/KxXBkPNrA3tabFm.png" alt=""></p>
<a id="more"></a>
<p>其实有个更方便的方法可以解决这个问题，但有个前置要求，就是不同仓库的分支名必须相同。</p>
<p>确保分支名一致后，打开项目目录下的 <code>.git/config</code> 文件。</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">[core]</span><br><span class="line">    <span class="attr">repositoryformatversion</span> = <span class="number">0</span></span><br><span class="line">    <span class="attr">filemode</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">bare</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">logallrefupdates</span> = <span class="literal">true</span></span><br><span class="line">    <span class="attr">symlinks</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">ignorecase</span> = <span class="literal">true</span></span><br><span class="line">[remote <span class="string">"origin"</span>]</span><br><span class="line">    <span class="attr">url</span> = https://gitee.com/eoner/gulp-automation.git</span><br><span class="line">    <span class="attr">fetch</span> = +refs/heads<span class="comment">/*:refs/remotes/origin/*</span></span><br><span class="line"><span class="comment">[branch "master"]</span></span><br><span class="line"><span class="comment">    remote = origin</span></span><br><span class="line"><span class="comment">    merge = refs/heads/master</span></span><br><span class="line"><span class="comment">[remote "master"]</span></span><br><span class="line"><span class="comment">    url = http://192.168.1.15/1one/gulp-automation.git</span></span><br><span class="line"><span class="comment">    fetch = +refs/heads/*:refs/remotes/master/*</span></span><br></pre></td></tr></table></figure>
<p>这份配置就是上面我举例的 git 仓库的配置，如果要一次提交到多个仓库，就只需要在 <code>[remote &quot;origin&quot;]</code> 里配置多个 <code>url</code> 即可。</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">[core]</span><br><span class="line">    <span class="attr">repositoryformatversion</span> = <span class="number">0</span></span><br><span class="line">    <span class="attr">filemode</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">bare</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">logallrefupdates</span> = <span class="literal">true</span></span><br><span class="line">    <span class="attr">symlinks</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">ignorecase</span> = <span class="literal">true</span></span><br><span class="line">[remote <span class="string">"origin"</span>]</span><br><span class="line">    <span class="attr">url</span> = https://gitee.com/eoner/gulp-automation.git</span><br><span class="line">    <span class="attr">url</span> = http://<span class="number">192.168</span>.<span class="number">1.15</span>/<span class="number">1</span>one/gulp-automation.git</span><br><span class="line">    <span class="attr">fetch</span> = +refs/heads<span class="comment">/*:refs/remotes/origin/*</span></span><br><span class="line"><span class="comment">[branch "master"]</span></span><br><span class="line"><span class="comment">    remote = origin</span></span><br><span class="line"><span class="comment">    merge = refs/heads/master</span></span><br></pre></td></tr></table></figure>
<p>是不是很简单？好叭，我承认我水了一篇，但这个需求对我来说确实挺需要的。因为有个开源项目不光需要在公司内网发布，还需要提交到 Gitee 。</p>
<p>原本提交 2 个仓库还可以接受，大不了多操作一遍。但最近我把它在 Github 上也开了一个仓库，这一下就需要提交到 3 个仓库了，这个重复的工作就变得有点烦人了，于是就打算把这个问题解决一下。</p>
<p>在解决这个问题的时候还想到一件事，其实看一个人是否有程序员思维，除了直接看代码外，从做事方式和流程也能看出来。就比如这次这事，如果我还在坚持手动重复提交 3 次的操作方式，或许我就不太适合干这一行了，毕竟程序员如果不会“偷懒”，怎么能算个合格的程序员呢。</p>
]]></content>
      <categories>
        <category>Git 相关</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack-spritesmith 的一些高阶使用技巧</title>
    <url>/posts/2c9d9bf2/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2019/08/21/OzZ17a3UXh5jMVJ.png" alt=""></p>
<p>精灵图想必对大家来说都不陌生，就是将多个小图整合到一张图上，以此减少浏览器向服务器请求的次数，从而提高网页的加载速度。</p>
<p>而在 Vue 项目中，我通常会使用 <a href="https://www.npmjs.com/package/webpack-spritesmith" target="_blank" rel="noopener">webpack-spritesmith</a> 这个 npm 包来制作需要的精灵图，而这篇文章主要是针对 <a href="https://www.npmjs.com/package/webpack-spritesmith" target="_blank" rel="noopener">webpack-spritesmith</a> 的一些高阶使用技巧。</p>
<blockquote>
<p>如果你没使用过 <a href="https://www.npmjs.com/package/webpack-spritesmith" target="_blank" rel="noopener">webpack-spritesmith</a> ，建议熟悉了解后再阅读本篇文章。</p>
</blockquote>
<a id="more"></a>
<p>虽然 <a href="https://www.npmjs.com/package/webpack-spritesmith" target="_blank" rel="noopener">webpack-spritesmith</a> 已经能帮我减轻很大的工作量了，但在项目中具体使用的时候，还是会遇到一些不大不小的问题，之所以说不大不小，是因为这些问题的解决方案有很多种，而下面我所提供的解决方案，只是单纯从技术角度去思考如何处理。</p>
<h2 id="痛点一：变量名冲突"><a class="header-anchor" href="#痛点一：变量名冲突"></a>痛点一：变量名冲突</h2>
<p>在配置好各种参数，并且精灵图和对应的 <code>.scss</code> 文件都能生成好后，第一个痛点就来了。</p>
<p>我们先观察一下生成好的 <code>.scss</code> 文件，大致如下：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SCSS variables are information about icon's compiled state, stored under its original file name</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// .icon-home &#123;</span></span><br><span class="line"><span class="comment">//   width: $icon-home-width;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The large array-like variables contain all information about a single icon</span></span><br><span class="line"><span class="comment">// $icon-home: x y offset_x offset_y width height total_width total_height image_path;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// At the bottom of this section, we provide information about the spritesheet itself</span></span><br><span class="line"><span class="comment">// $spritesheet: width height image $spritesheet-sprites;</span></span><br><span class="line"><span class="variable">$address-name</span>: <span class="string">'address'</span>;</span><br><span class="line"><span class="variable">$address-x</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="variable">$address-y</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="variable">$address-offset-x</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="variable">$address-offset-y</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="variable">$address-width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="variable">$address-height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="variable">$address-total-width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="variable">$address-total-height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="variable">$address-image</span>: <span class="string">'~sprites.fe6c69f7e7ec270381e68e2dd4a910c1.png'</span>;</span><br><span class="line"><span class="variable">$address</span>: (<span class="number">0px</span>, <span class="number">0px</span>, <span class="number">0px</span>, <span class="number">0px</span>, <span class="number">100px</span>, <span class="number">100px</span>, <span class="number">200px</span>, <span class="number">200px</span>, <span class="string">'~sprites.fe6c69f7e7ec270381e68e2dd4a910c1.png'</span>, <span class="string">'address'</span>, );</span><br><span class="line"><span class="variable">$feedback-name</span>: <span class="string">'feedback'</span>;</span><br><span class="line"><span class="variable">$feedback-x</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="variable">$feedback-y</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="variable">$feedback-offset-x</span>: -<span class="number">100px</span>;</span><br><span class="line"><span class="variable">$feedback-offset-y</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="variable">$feedback-width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="variable">$feedback-height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="variable">$feedback-total-width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="variable">$feedback-total-height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="variable">$feedback-image</span>: <span class="string">'~sprites.fe6c69f7e7ec270381e68e2dd4a910c1.png'</span>;</span><br><span class="line"><span class="variable">$feedback</span>: (<span class="number">100px</span>, <span class="number">0px</span>, -<span class="number">100px</span>, <span class="number">0px</span>, <span class="number">100px</span>, <span class="number">100px</span>, <span class="number">200px</span>, <span class="number">200px</span>, <span class="string">'~sprites.fe6c69f7e7ec270381e68e2dd4a910c1.png'</span>, <span class="string">'feedback'</span>, );</span><br><span class="line"><span class="variable">$payment-name</span>: <span class="string">'payment'</span>;</span><br><span class="line"><span class="variable">$payment-x</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="variable">$payment-y</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="variable">$payment-offset-x</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="variable">$payment-offset-y</span>: -<span class="number">100px</span>;</span><br><span class="line"><span class="variable">$payment-width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="variable">$payment-height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="variable">$payment-total-width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="variable">$payment-total-height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="variable">$payment-image</span>: <span class="string">'~sprites.fe6c69f7e7ec270381e68e2dd4a910c1.png'</span>;</span><br><span class="line"><span class="variable">$payment</span>: (<span class="number">0px</span>, <span class="number">100px</span>, <span class="number">0px</span>, -<span class="number">100px</span>, <span class="number">100px</span>, <span class="number">100px</span>, <span class="number">200px</span>, <span class="number">200px</span>, <span class="string">'~sprites.fe6c69f7e7ec270381e68e2dd4a910c1.png'</span>, <span class="string">'payment'</span>, );</span><br><span class="line"><span class="variable">$spritesheet-width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="variable">$spritesheet-height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="variable">$spritesheet-image</span>: <span class="string">'~sprites.fe6c69f7e7ec270381e68e2dd4a910c1.png'</span>;</span><br><span class="line"><span class="variable">$spritesheet-sprites</span>: (<span class="variable">$address</span>, <span class="variable">$feedback</span>, <span class="variable">$payment</span>, );</span><br><span class="line"><span class="variable">$spritesheet</span>: (<span class="number">200px</span>, <span class="number">200px</span>, <span class="string">'~sprites.fe6c69f7e7ec270381e68e2dd4a910c1.png'</span>, <span class="variable">$spritesheet-sprites</span>, );</span><br><span class="line"></span><br><span class="line"><span class="comment">// The provided mixins are intended to be used with the array-like variables</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// .icon-home &#123;</span></span><br><span class="line"><span class="comment">//   @include sprite-width($icon-home);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// .icon-email &#123;</span></span><br><span class="line"><span class="comment">//   @include sprite($icon-email);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Example usage in HTML:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// `display: block` sprite:</span></span><br><span class="line"><span class="comment">// &lt;div class="icon-home"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// // CSS</span></span><br><span class="line"><span class="comment">// .icon &#123;</span></span><br><span class="line"><span class="comment">//   display: inline-block;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// // HTML</span></span><br><span class="line"><span class="comment">// &lt;i class="icon icon-home"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="keyword">@mixin</span> sprite-width(<span class="variable">$sprite</span>) &#123;</span><br><span class="line">    <span class="attribute">width</span>: nth(<span class="variable">$sprite</span>, <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@mixin</span> sprite-height(<span class="variable">$sprite</span>) &#123;</span><br><span class="line">    <span class="attribute">height</span>: nth(<span class="variable">$sprite</span>, <span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@mixin</span> sprite-position(<span class="variable">$sprite</span>) &#123;</span><br><span class="line">    <span class="variable">$sprite-offset-x</span>: nth(<span class="variable">$sprite</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="variable">$sprite-offset-y</span>: nth(<span class="variable">$sprite</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="variable">$sprite-offset-x</span> <span class="variable">$sprite-offset-y</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@mixin</span> sprite-image(<span class="variable">$sprite</span>) &#123;</span><br><span class="line">    <span class="variable">$sprite-image</span>: nth(<span class="variable">$sprite</span>, <span class="number">9</span>);</span><br><span class="line">    <span class="attribute">background-image</span>: url(#&#123;<span class="variable">$sprite-image</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@mixin</span> sprite(<span class="variable">$sprite</span>) &#123;</span><br><span class="line">    <span class="keyword">@include</span> sprite-image(<span class="variable">$sprite</span>);</span><br><span class="line">    <span class="keyword">@include</span> sprite-position(<span class="variable">$sprite</span>);</span><br><span class="line">    <span class="keyword">@include</span> sprite-width(<span class="variable">$sprite</span>);</span><br><span class="line">    <span class="keyword">@include</span> sprite-height(<span class="variable">$sprite</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The `sprites` mixin generates identical output to the CSS template</span></span><br><span class="line"><span class="comment">//   but can be overridden inside of SCSS</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// @include sprites($spritesheet-sprites);</span></span><br><span class="line"><span class="keyword">@mixin</span> sprites(<span class="variable">$sprites</span>) &#123;</span><br><span class="line">    <span class="keyword">@each</span> <span class="variable">$sprite</span> in <span class="variable">$sprites</span> &#123;</span><br><span class="line">        <span class="variable">$sprite-name</span>: nth(<span class="variable">$sprite</span>, <span class="number">10</span>);</span><br><span class="line">        .#&#123;<span class="variable">$sprite-name</span>&#125; &#123;</span><br><span class="line">            <span class="keyword">@include</span> sprite(<span class="variable">$sprite</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实生成出来的 <code>.scss</code> 文件很简单，就是包含了一些变量和 <code>@mixin</code> ，这样在 <code>@import</code> 这个 <code>.scss</code> 文件之后就可以很方便的进行使用了。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.example</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> sprite(<span class="variable">$address</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是也出现了一个问题，就是生成出来的这个变量，在使用的时候如果稍有不注意，可能就会和项目中自定义的一些全局变量重名，导致变量被覆盖。</p>
<p>这个问题其实可以用很简单办法解决，仔细观察就会发现，变量名是依据文件名定义的，所以在给图片文件命名的时候，定义好一个规则就行了，比如全部以 <code>sprite-</code> 开头，这样就极大程度避免了变量的重名的问题，只是在使用的时候会麻烦一点，就需要改成这样。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.example</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> sprite(<span class="variable">$sprite-address</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有没有更好的方法呢？答案当然是有。在查看 <a href="https://www.npmjs.com/package/webpack-spritesmith" target="_blank" rel="noopener">webpack-spritesmith</a> 介绍的时候看到了这句话：</p>
<blockquote>
<p>Webpack plugin that converts set of images into a spritesheet and SASS/LESS/Stylus mixins, using <a href="https://github.com/twolfson/spritesmith" target="_blank" rel="noopener">spritesmith</a> and <a href="https://github.com/twolfson/spritesheet-templates" target="_blank" rel="noopener">spritesheet-templates</a>.</p>
</blockquote>
<p>说明 <code>.scss</code> 文件其实是通过模版生成的，那只要对模版修改一下，理论上就可以解决这问题了。</p>
<p>首先找到原始的模版，在 <a href="https://github.com/twolfson/spritesheet-templates" target="_blank" rel="noopener">spritesheet-templates</a> 这个仓库里搜寻后发现 <code>scss.template.handlebars</code> 这个文件。</p>
<p>接下来先对模版进行精简，因为生成出来的一系列变量中，只用到了这句：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$address</span>: (<span class="number">0px</span>, <span class="number">0px</span>, <span class="number">0px</span>, <span class="number">0px</span>, <span class="number">100px</span>, <span class="number">100px</span>, <span class="number">200px</span>, <span class="number">200px</span>, <span class="string">'~sprites.fe6c69f7e7ec270381e68e2dd4a910c1.png'</span>, <span class="string">'address'</span>, );</span><br></pre></td></tr></table></figure>
<p>它将所有的值都存放在了一个数组变量中，在 <code>@mixin</code> 中通过 <code>nth()</code> 这个方法去获取数组中其中所需要的值，所以只需要保留这段模版即可：</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml">$</span><span class="template-variable">&#123;&#123;strings.name&#125;&#125;</span><span class="xml">: (</span><span class="template-variable">&#123;&#123;px.x&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.y&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.offset_x&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.offset_y&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.width&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.height&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.total_width&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.total_height&#125;&#125;</span><span class="xml">, '</span><span class="template-variable">&#123;&#123;&#123;escaped_image&#125;&#125;&#125;</span><span class="xml">', '</span><span class="template-variable">&#123;&#123;name&#125;&#125;</span><span class="xml">', );</span></span><br></pre></td></tr></table></figure>
<p>剩下生成 <code>@mixin</code> 的模版都是需要用到的，那就原封不动的复制过来，这样就初步定制了一个我的模版。</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml">&#123;</span></span><br><span class="line"><span class="xml">    // Default options</span></span><br><span class="line"><span class="xml">    'functions': true,</span></span><br><span class="line"><span class="xml">    'variableNameTransforms': ['dasherize']</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;&#123;#<span class="name">block</span> "sprites"&#125;&#125;</span></span><br><span class="line"><span class="template-tag">&#123;&#123;#<span class="name"><span class="builtin-name">each</span></span> sprites&#125;&#125;</span></span><br><span class="line"><span class="xml">$</span><span class="template-variable">&#123;&#123;strings.name&#125;&#125;</span><span class="xml">: (</span><span class="template-variable">&#123;&#123;px.x&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.y&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.offset_x&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.offset_y&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.width&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.height&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.total_width&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.total_height&#125;&#125;</span><span class="xml">, '</span><span class="template-variable">&#123;&#123;&#123;escaped_image&#125;&#125;&#125;</span><span class="xml">', '</span><span class="template-variable">&#123;&#123;name&#125;&#125;</span><span class="xml">');</span></span><br><span class="line"><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;&#123;#<span class="name">block</span> "sprite-functions"&#125;&#125;</span></span><br><span class="line"><span class="template-tag">&#123;&#123;#<span class="name"><span class="builtin-name">if</span></span> options.functions&#125;&#125;</span></span><br><span class="line"><span class="xml">@mixin sprite-width($sprite) &#123;</span></span><br><span class="line"><span class="xml">    width: nth($sprite, 5);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">@mixin sprite-height($sprite) &#123;</span></span><br><span class="line"><span class="xml">    height: nth($sprite, 6);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">@mixin sprite-position($sprite) &#123;</span></span><br><span class="line"><span class="xml">    $sprite-offset-x: nth($sprite, 3);</span></span><br><span class="line"><span class="xml">    $sprite-offset-y: nth($sprite, 4);</span></span><br><span class="line"><span class="xml">    background-position: $sprite-offset-x $sprite-offset-y;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">@mixin sprite-image($sprite) &#123;</span></span><br><span class="line"><span class="xml">    $sprite-image: nth($sprite, 9);</span></span><br><span class="line"><span class="xml">    background-image: url(#&#123;$sprite-image&#125;);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">@mixin sprite($sprite) &#123;</span></span><br><span class="line"><span class="xml">    @include sprite-image($sprite);</span></span><br><span class="line"><span class="xml">    @include sprite-position($sprite);</span></span><br><span class="line"><span class="xml">    @include sprite-width($sprite);</span></span><br><span class="line"><span class="xml">    @include sprite-height($sprite);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">if</span></span>&#125;&#125;</span></span><br><span class="line"><span class="template-tag">&#123;&#123;/<span class="name">block</span>&#125;&#125;</span></span><br></pre></td></tr></table></figure>
<p>接下来要解决变量名冲突的问题，我在模版里给变量名增加一个前缀，也叫 <code>sprite-</code> 。</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml">$sprite-</span><span class="template-variable">&#123;&#123;strings.name&#125;&#125;</span><span class="xml">: (</span><span class="template-variable">&#123;&#123;px.x&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.y&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.offset_x&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.offset_y&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.width&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.height&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.total_width&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.total_height&#125;&#125;</span><span class="xml">, '</span><span class="template-variable">&#123;&#123;&#123;escaped_image&#125;&#125;&#125;</span><span class="xml">', '</span><span class="template-variable">&#123;&#123;name&#125;&#125;</span><span class="xml">');</span></span><br></pre></td></tr></table></figure>
<p>这样就好了么？还没有。虽然变量名不冲突了，但在使用的时候还是没有变化。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.example</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> sprite(<span class="variable">$sprite-address</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>依旧要多写 <code>sprite-</code> 这个前缀，为了偷这个懒，我进行了进一步的定制。</p>
<p>因为 <code>sprite</code> 这个 <code>@mixin</code> 需要传入指定的变量做为参数，那能不能改成传入一个字符串，动态拼装一个变量呢？比如这样：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> sprite(<span class="variable">$name</span>) &#123;</span><br><span class="line">    <span class="keyword">@include</span> sprite-image(<span class="variable">$sprite</span>-#&#123;<span class="variable">$name</span>&#125;);</span><br><span class="line">    <span class="keyword">@include</span> sprite-position(<span class="variable">$sprite</span>-#&#123;<span class="variable">$name</span>&#125;);</span><br><span class="line">    <span class="keyword">@include</span> sprite-width(<span class="variable">$sprite</span>-#&#123;<span class="variable">$name</span>&#125;);</span><br><span class="line">    <span class="keyword">@include</span> sprite-height(<span class="variable">$sprite</span>-#&#123;<span class="variable">$name</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很遗憾，并不行，查了资料才知道 SASS 并不支持动态创建引用变量。虽然不支持动态变量，那就换个思路，把所需要的变量放到一个数组变量里总可以吧？这样说可能有点绕，直接看代码吧。</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml">$sprites: (</span></span><br><span class="line"><span class="template-tag">&#123;&#123;#<span class="name"><span class="builtin-name">each</span></span> sprites&#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123;strings.name&#125;&#125;</span><span class="xml">: $sprite-</span><span class="template-variable">&#123;&#123;strings.name&#125;&#125;</span><span class="xml">,</span></span><br><span class="line"><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span></span><br><span class="line"><span class="xml">);</span></span><br><span class="line"></span><br><span class="line"><span class="xml">@mixin sprite($name) &#123;</span></span><br><span class="line"><span class="xml">    @include sprite-image(map-get($sprite, #&#123;$name&#125;));</span></span><br><span class="line"><span class="xml">    @include sprite-position(map-get($sprite, #&#123;$name&#125;));</span></span><br><span class="line"><span class="xml">    @include sprite-width(map-get($sprite, #&#123;$name&#125;));</span></span><br><span class="line"><span class="xml">    @include sprite-height(map-get($sprite, #&#123;$name&#125;));</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>
<p>我单独定义了一个 <code>$sprites</code> 变量，里面是一个键值对的数组，键是文件名，值是通过拼装出来变量。而在 <code>@mixin</code> 中则使用了 <code>map-get()</code> 这个方法去获取到对应的变量，再接下来就是和原先一样了。</p>
<p>这样处理之后，直接就可以这样使用了，甚至比原有的方式更简单，都不需要写 <code>$</code> 符号了。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.example</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> sprite(address);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后就是如何调用我的自定义模版了，这在 <a href="https://www.npmjs.com/package/webpack-spritesmith" target="_blank" rel="noopener">webpack-spritesmith</a> 的文档中详细的介绍，我就不具体细说了，贴一份大致的代码吧。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> SpritesmithPlugin(&#123;</span><br><span class="line">    src: &#123;</span><br><span class="line">        cwd: path.resolve(__dirname, <span class="string">'src/assets/sprites'</span>),</span><br><span class="line">        glob: <span class="string">'*.png'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    target: &#123;</span><br><span class="line">        image: path.resolve(__dirname, <span class="string">'src/assets/images/sprites.[hash].png'</span>),</span><br><span class="line">        css: [</span><br><span class="line">            [path.resolve(__dirname, <span class="string">'src/assets/style/sprites.scss'</span>), &#123;</span><br><span class="line">                format: <span class="string">'handlebars_based_template'</span></span><br><span class="line">            &#125;]</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    customTemplates: &#123;</span><br><span class="line">        <span class="string">'handlebars_based_template'</span>: path.resolve(__dirname, <span class="string">'my.scss.template.handlebars'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 样式文件中调用雪碧图地址写法</span></span><br><span class="line">    apiOptions: &#123;</span><br><span class="line">        cssImageRef: <span class="string">'~sprites.[hash].png'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="痛点二：文件名冲突"><a class="header-anchor" href="#痛点二：文件名冲突"></a>痛点二：文件名冲突</h2>
<blockquote>
<p>在说这个问题之前，先说明一下， <a href="https://www.npmjs.com/package/webpack-spritesmith" target="_blank" rel="noopener">webpack-spritesmith</a> 是可以生成多张精灵图的，虽然办法有点蠢，就是多增加一个 <code>new SpritesmithPlugin()</code> 实例，把里面的路径都替换即可。</p>
<p>当然办法是蠢的，但我可是聪明的，可以借助 fs 模块遍历精灵图存放目录的文件夹，依次执行 <code>new SpritesmithPlugin()</code> 就行啦，具体可<a href="https://gitee.com/eoner/vue-automation/blob/master/vue.config.js#L5" target="_blank" rel="noopener">点击看这里</a></p>
</blockquote>
<p>如果项目比较大，并且有多个模块，这个时候可能就会需要根据不同模块生成对应的精灵图，也就是小图会归类到不同的文件夹，但也就出现一个情况，不同文件夹里的图片文件名可能会重名，比如这种情况：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">sprites</span></span><br><span class="line">  ├─ <span class="selector-tag">order</span></span><br><span class="line">  │  ├─ <span class="selector-tag">success</span><span class="selector-class">.png</span></span><br><span class="line">  │  └─ <span class="selector-tag">close</span><span class="selector-class">.png</span></span><br><span class="line">  └─ <span class="selector-tag">payment</span></span><br><span class="line">     ├─ <span class="selector-tag">success</span><span class="selector-class">.png</span></span><br><span class="line">     └─ <span class="selector-tag">fail</span><span class="selector-class">.png</span></span><br></pre></td></tr></table></figure>
<p>sprites 目录下有两个文件夹，分别是 order 和 payment ，并且里面都有一个 <code>success.png</code> 文件，假设这两个目录生成出的两个 <code>.scss</code> 文件需要在同一个页面上调用，就又出现上面变量名冲突的问题了。</p>
<blockquote>
<p>举例的这种情况可能不常见，更多情况可能是有一个存放全局精灵图的目录，里面的文件名可能会和某个模块文件夹下的文件名重名，导致在使用的时候出现变量名冲突。</p>
</blockquote>
<p>这个问题也可以用简单的办法解决，不就是改个文件名嘛，但如果项目是多人协作开发，这个问题就会变成一个潜在隐患，不知道什么时候就和别人定义的名字重名了。所以我还是决定用技术手段来解决。</p>
<h3 id="方案一"><a class="header-anchor" href="#方案一"></a>方案一</h3>
<p>我最先的思路是，能不能将文件夹的名字做为一个新增变量注入到模版中，这样在模板中就可以通过模版变量 <code>{{...}}</code> 的方式去使用了，但翻遍了 <a href="https://www.npmjs.com/package/webpack-spritesmith" target="_blank" rel="noopener">webpack-spritesmith</a> 文档也没找到相关的 API ，不过倒是在模版选项里看到了 <code>spritesheetName</code> 的设置项，它对应的模版变量是 <code>spritesheet_info.name</code> ，这是一个没被使用到模版变量，正好可以用来解决我的问题。</p>
<p>使用也很简单，只需要在配置里增加这一项设置，并设置为文件夹的名字即可：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> SpritesmithPlugin(&#123;</span><br><span class="line">    ...</span><br><span class="line">    target: &#123;</span><br><span class="line">        image: path.resolve(__dirname, <span class="string">'src/assets/images/order.[hash].png'</span>),</span><br><span class="line">        css: [</span><br><span class="line">            [path.resolve(__dirname, <span class="string">'src/assets/style/order.scss'</span>), &#123;</span><br><span class="line">                spritesheetName: <span class="string">'order'</span>,</span><br><span class="line">                format: <span class="string">'handlebars_based_template'</span></span><br><span class="line">            &#125;]</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>接下来在模版里通过 <code>{{spritesheet_info.strings.name}}</code> 就可以得到刚才设置的值，只需要把对应位置的变量和 <code>@mixin</code> 都加上这个前缀就行了，需要注意的是，在 <code>{{#each}}</code> 里需要通过增加 <code>../</code> 的方式来访问父级属性，下面为部分模版代码。</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml">$</span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprites: (</span></span><br><span class="line"><span class="template-tag">&#123;&#123;#<span class="name"><span class="builtin-name">each</span></span> sprites&#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123;strings.name&#125;&#125;</span><span class="xml">: $</span><span class="template-variable">&#123;&#123;../spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprite-</span><span class="template-variable">&#123;&#123;strings.name&#125;&#125;</span><span class="xml">,</span></span><br><span class="line"><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span></span><br><span class="line"><span class="xml">);</span></span><br><span class="line"></span><br><span class="line"><span class="xml">@mixin </span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprite($name) &#123;</span></span><br><span class="line"><span class="xml">    @include </span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprite-image(map-get($</span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprites, #&#123;$name&#125;));</span></span><br><span class="line"><span class="xml">    @include </span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprite-position(map-get($</span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprites, #&#123;$name&#125;));</span></span><br><span class="line"><span class="xml">    @include </span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprite-width(map-get($</span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprites, #&#123;$name&#125;));</span></span><br><span class="line"><span class="xml">    @include </span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprite-height(map-get($</span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprites, #&#123;$name&#125;));</span></span><br><span class="line"><span class="xml">    @include </span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprite-size(map-get($</span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprites, #&#123;$name&#125;));</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>
<p>这样修改后，生成出来的 <code>.scss</code> 文件中的变量和 <code>@mixin</code> 都加上了文件夹名做为前缀，所以在使用上也稍微有变化。如果有用过 <a href="http://compass-style.org/" target="_blank" rel="noopener">Compass</a> 制作精灵图的，一定不陌生。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.example</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> order-sprite(success);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方案二"><a class="header-anchor" href="#方案二"></a>方案二</h3>
<p>这个思路是在看 <a href="https://www.npmjs.com/package/webpack-spritesmith" target="_blank" rel="noopener">webpack-spritesmith</a> 文档时想到的，然后结合了上网的一些参考资料最终实现的。首先先看一下文档里对 <code>generateSpriteName()</code> 这个方法的介绍吧。</p>
<blockquote>
<p>generateSpriteName - function. Takes full path to source image file and expected to return name by which it will be referenced in API. Return value will be used as <a href="http://sprite.name" target="_blank" rel="noopener">sprite.name</a> for spritesheet-templates. Default behaviour is to use filename (without dirname and extension)</p>
</blockquote>
<p>大概意思是说，通过 <code>generateSpriteName()</code> 方法可以获取到源文件的完整路径，并且可以手动返回一个将在 API 中引用的名称，默认返回的是文件名。</p>
<p>既然能得到完整路径，那在返回的时候，把文件夹的名称和文件名一起返回，这样在模版中不就解决变量冲突的问题了么，毕竟文件夹名加上文件名，这样组出来的名称能重名的就很少了。</p>
<p>直接看配置代码吧，这些需要用到 Node 里的 <code>path</code> 模块。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> SpritesmithPlugin(&#123;</span><br><span class="line">    ...</span><br><span class="line">    apiOptions: &#123;</span><br><span class="line">        generateSpriteName: <span class="function"><span class="keyword">function</span>(<span class="params">fullPath</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> parsed = path.parse(fullPath)</span><br><span class="line">            <span class="keyword">let</span> dir = parsed.dir.split(path.sep)</span><br><span class="line">            <span class="keyword">let</span> moduleName = dir[dir.length - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">return</span> moduleName + <span class="string">'_'</span> + parsed.name</span><br><span class="line">        &#125;,</span><br><span class="line">        cssImageRef: <span class="string">'~order.[hash].png'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>打开生成出来的 <code>.scss</code> 文件看看。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sprite-order-success</span>: (<span class="number">0px</span>, <span class="number">0px</span>, <span class="number">0px</span>, <span class="number">0px</span>, <span class="number">100px</span>, <span class="number">100px</span>, <span class="number">200px</span>, <span class="number">200px</span>, <span class="string">'~order.fe6c69f7e7ec270381e68e2dd4a910c1.png'</span>, <span class="string">'order_success'</span>);</span><br></pre></td></tr></table></figure>
<p>那么如何使用呢？</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.example</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> sprite(order-success);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>是不是觉得和方案一没太大差别，其实在使用上确实没太大差别。两个方案生成的变量名都是唯一的，只不过前者是从 <code>@mixin</code> 命名上做了区分，不同的文件夹会生成多个不同的 <code>@mixin</code> ；而后者会生成多个同名且代码一模一样的 <code>@mixin</code> ，在使用的时候，后面定义的同名 <code>@mixin</code> 会进行重写覆盖，但因为代码是一样的，所以使用上并无影响。</p>
<p>但从代码优雅上来说，还是<strong>方案一</strong>更好，各自的变量和 <code>@mixin</code> 都相对独立，不受干扰。</p>
<h2 id="痛点三：响应式布局"><a class="header-anchor" href="#痛点三：响应式布局"></a>痛点三：响应式布局</h2>
<p>因为生成的 <code>.scss</code> 文件里使用的都是 px 单位，而在响应式布局下会使用 rem 或者 vw/vh 做为长度大小单位，这时候就出现一个问题，如何在响应式布局下更方便的使用生成出来的 <code>.scss</code> 文件呢？</p>
<p>这里我以 vw/vh 举例，首先先给项目安装 <a href="https://github.com/evrone/postcss-px-to-viewport" target="_blank" rel="noopener">postcss-px-to-viewport</a> 这个 npm 包，它可以很方便的帮我把 px 转成 vw/vh 。</p>
<p>这个包如何使用这里不做更多介绍，重点是在配置好后， <code>.scss</code> 文件定义的一些 px 单位也能正常转换成 vw 单位了。但是因为 vw 是一个相对长度单位，在不同终端下它计算出来的实际长度并不是一致的，而生成出来的精灵图文件的尺寸是固定的，导致 <code>background-position</code> 定位不能准确的定位到某个图片上。</p>
<p>要解决这个问题，就需要使用 <code>background-size</code> 这个属性了，但不是使用 cover/contain 这两个预设的值，因为 cover 是拉伸图片使之充满元素，虽然元素被铺满了，但是图片有可能显示不全；而 contain 刚好相反，它是拉伸图片使图片完全显示在元素内，虽然图片显示全了，但是元素可能不会被铺满。所以这里就需要手动设置背景图的宽高来解决。思路确定了，那就看看模版里有没有提供合并后图片宽高的参数。</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml">$sprite-</span><span class="template-variable">&#123;&#123;strings.name&#125;&#125;</span><span class="xml">: (</span><span class="template-variable">&#123;&#123;px.x&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.y&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.offset_x&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.offset_y&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.width&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.height&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.total_width&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.total_height&#125;&#125;</span><span class="xml">, '</span><span class="template-variable">&#123;&#123;&#123;escaped_image&#125;&#125;&#125;</span><span class="xml">', '</span><span class="template-variable">&#123;&#123;name&#125;&#125;</span><span class="xml">');</span></span><br></pre></td></tr></table></figure>
<p>从数组变量中可以看到 <code>{{px.total_width}}</code> 和 <code>{{px.total_height}}</code> 这两个就是精灵图图片的宽高了，有了这两个值，就可以在 <code>@mixin</code> 中增加一句 <code>background-size</code> 的样式代码了，为了代码风格统一，我增加一个 <code>@mixin sprite-size</code> 。</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml">@mixin sprite-size($sprite) &#123;</span></span><br><span class="line"><span class="xml">    background-size: nth($sprite, 7) nth($sprite, 8);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">@mixin sprite($name) &#123;</span></span><br><span class="line"><span class="xml">    @include sprite-image(map-get($sprites, #&#123;$name&#125;));</span></span><br><span class="line"><span class="xml">    @include sprite-position(map-get($sprites, #&#123;$name&#125;));</span></span><br><span class="line"><span class="xml">    @include sprite-size(map-get($sprites, #&#123;$name&#125;));</span></span><br><span class="line"><span class="xml">    @include sprite-width(map-get($sprites, #&#123;$name&#125;));</span></span><br><span class="line"><span class="xml">    @include sprite-height(map-get($sprites, #&#123;$name&#125;));</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>
<p>这样 <code>background-size</code> 设置的宽高就和精灵图的实际宽高一致了，再通过 px 转 vw 后，也不会出现任何问题。</p>
<p>另外需要注意的是，因为 vw 计算出来的实际长度大概率会出现小数，如果精灵图贴合太紧凑，就会出现图片显示不全或超出的情况，解决这个问题只需要在配置中增加 <code>padding</code> 的设置即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> SpritesmithPlugin(&#123;</span><br><span class="line">    ...</span><br><span class="line">    spritesmithOptions: &#123;</span><br><span class="line">        padding: <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="补充痛点：嫌手动引入麻烦"><a class="header-anchor" href="#补充痛点：嫌手动引入麻烦"></a>补充痛点：嫌手动引入麻烦</h2>
<p>最后这个痛点是因第二个痛点引发而来的，因为项目模块多，生成的 <code>.scss</code> 文件也很多，在页面上使用的时候，经常会忘记要先引入对应的 <code>.scss</code> 文件后，再去使用 <code>@mixin</code> 。</p>
<p>因为生成的都是变量和 <code>@mixin</code> ，所以我就在想能不能全局引用，这样就不用在每个页面上使用的时候再去引用了。但是手动一个个在 <code>main.js</code> 里引用还是不够智能，于是网上搜寻了一番，发现了 <a href="https://github.com/shakacode/sass-resources-loader" target="_blank" rel="noopener">sass-resources-loader</a> 这个 npm 包。</p>
<blockquote>
<p>This loader will <code>@import</code> your SASS resources into every <code>required</code> SASS module. So you can use your shared variables &amp; mixins across all SASS styles without manually importing them in each file. Made to work with CSS Modules!</p>
</blockquote>
<p>官方文档里第一句话就说的很清楚了。因为没啥技术含量，下面接直接贴配置代码了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> oneOfsMap = config.module.rule(<span class="string">'scss'</span>).oneOfs.store</span><br><span class="line">    oneOfsMap.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        item.use(<span class="string">'sass-resources-loader'</span>)</span><br><span class="line">            .loader(<span class="string">'sass-resources-loader'</span>)</span><br><span class="line">            .options(&#123;</span><br><span class="line">                resources: [</span><br><span class="line">                    <span class="string">'./src/assets/styles/global/*.scss'</span>,</span><br><span class="line">                    <span class="string">'./src/assets/sprites/*.scss'</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;)</span><br><span class="line">            .end()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里我还指定一个 global 目录下的所有 <code>.scss</code> 文件，这是我存放整站自定义的一些全局变量、<code>@mixin</code> 等一些资源。</p>
<blockquote>
<p>需要注意的是， <a href="https://github.com/shakacode/sass-resources-loader" target="_blank" rel="noopener">sass-resources-loader</a> 只会把变量、<code>@mixin</code> 、<code>@function</code> 这类资源注入到全局，如果文件里包含实际的样式代码，它并不会生效。</p>
</blockquote>
<h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2>
<p>也没啥可总结的，该说的在上面都说了，非要总结的话，那就是多看官方文档，很多问题其实插件/包的作者都有考虑到，合理使用就能达到想要的效果。</p>
<p>最后分享下完整的配置和模版，因为上面都是代码片段，我知道很多人都偷懒，想直接用现成的。</p>
<p><strong>vue.config.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> SpritesmithPlugin = <span class="built_in">require</span>(<span class="string">'webpack-spritesmith'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    publicPath: <span class="string">''</span>,</span><br><span class="line">    configureWebpack: &#123;</span><br><span class="line">        resolve: &#123;</span><br><span class="line">            modules: [<span class="string">'node_modules'</span>, <span class="string">'assets/sprites'</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        plugins: [</span><br><span class="line">            <span class="keyword">new</span> SpritesmithPlugin(&#123;</span><br><span class="line">                src: &#123;</span><br><span class="line">                    cwd: path.resolve(__dirname, <span class="string">'src/assets/sprites/example'</span>),</span><br><span class="line">                    glob: <span class="string">'*.png'</span></span><br><span class="line">                &#125;,</span><br><span class="line">                target: &#123;</span><br><span class="line">                    image: path.resolve(__dirname, <span class="string">'src/assets/sprites/example.[hash].png'</span>),</span><br><span class="line">                    css: [</span><br><span class="line">                        [path.resolve(__dirname, <span class="string">'src/assets/sprites/example.scss'</span>), &#123;</span><br><span class="line">                            format: <span class="string">'handlebars_based_template'</span>,</span><br><span class="line">                            spritesheetName: <span class="string">'example'</span></span><br><span class="line">                        &#125;]</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                customTemplates: &#123;</span><br><span class="line">                    <span class="string">'handlebars_based_template'</span>: path.resolve(__dirname, <span class="string">'my.scss.template.handlebars'</span>)</span><br><span class="line">                &#125;,</span><br><span class="line">                apiOptions: &#123;</span><br><span class="line">                    cssImageRef: <span class="string">'~example.[hash].png'</span></span><br><span class="line">                &#125;,</span><br><span class="line">                spritesmithOptions: &#123;</span><br><span class="line">                    algorithm: <span class="string">'binary-tree'</span>,</span><br><span class="line">                    padding: <span class="number">10</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>my.scss.template.handlebars</strong></p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml">&#123;</span></span><br><span class="line"><span class="xml">    // Default options</span></span><br><span class="line"><span class="xml">    'functions': true,</span></span><br><span class="line"><span class="xml">    'variableNameTransforms': ['dasherize']</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;&#123;#<span class="name">block</span> "sprites"&#125;&#125;</span></span><br><span class="line"><span class="template-tag">&#123;&#123;#<span class="name"><span class="builtin-name">each</span></span> sprites&#125;&#125;</span></span><br><span class="line"><span class="xml">$</span><span class="template-variable">&#123;&#123;../spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprite-</span><span class="template-variable">&#123;&#123;strings.name&#125;&#125;</span><span class="xml">: (</span><span class="template-variable">&#123;&#123;px.x&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.y&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.offset_x&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.offset_y&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.width&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.height&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.total_width&#125;&#125;</span><span class="xml">, </span><span class="template-variable">&#123;&#123;px.total_height&#125;&#125;</span><span class="xml">, '</span><span class="template-variable">&#123;&#123;&#123;escaped_image&#125;&#125;&#125;</span><span class="xml">', '</span><span class="template-variable">&#123;&#123;name&#125;&#125;</span><span class="xml">');</span></span><br><span class="line"><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">$</span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprites: (</span></span><br><span class="line"><span class="template-tag">&#123;&#123;#<span class="name"><span class="builtin-name">each</span></span> sprites&#125;&#125;</span></span><br><span class="line"><span class="template-variable">&#123;&#123;strings.name&#125;&#125;</span><span class="xml">: $</span><span class="template-variable">&#123;&#123;../spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprite-</span><span class="template-variable">&#123;&#123;strings.name&#125;&#125;</span><span class="xml">,</span></span><br><span class="line"><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span></span><br><span class="line"><span class="xml">);</span></span><br><span class="line"><span class="template-tag">&#123;&#123;/<span class="name">block</span>&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;&#123;#<span class="name">block</span> "sprite-functions"&#125;&#125;</span></span><br><span class="line"><span class="template-tag">&#123;&#123;#<span class="name"><span class="builtin-name">if</span></span> options.functions&#125;&#125;</span></span><br><span class="line"><span class="xml">@mixin </span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprite-width($sprite) &#123;</span></span><br><span class="line"><span class="xml">    width: nth($sprite, 5);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">@mixin </span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprite-height($sprite) &#123;</span></span><br><span class="line"><span class="xml">    height: nth($sprite, 6);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">@mixin </span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprite-position($sprite) &#123;</span></span><br><span class="line"><span class="xml">    $sprite-offset-x: nth($sprite, 3);</span></span><br><span class="line"><span class="xml">    $sprite-offset-y: nth($sprite, 4);</span></span><br><span class="line"><span class="xml">    background-position: $sprite-offset-x $sprite-offset-y;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">@mixin </span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprite-size($sprite) &#123;</span></span><br><span class="line"><span class="xml">    background-size: nth($sprite, 7) nth($sprite, 8);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">@mixin </span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprite-image($sprite) &#123;</span></span><br><span class="line"><span class="xml">    $sprite-image: nth($sprite, 9);</span></span><br><span class="line"><span class="xml">    background-image: url(#&#123;$sprite-image&#125;);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">@mixin </span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprite($name) &#123;</span></span><br><span class="line"><span class="xml">    @include </span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprite-image(map-get($</span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprites, #&#123;$name&#125;));</span></span><br><span class="line"><span class="xml">    @include </span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprite-position(map-get($</span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprites, #&#123;$name&#125;));</span></span><br><span class="line"><span class="xml">    @include </span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprite-size(map-get($</span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprites, #&#123;$name&#125;));</span></span><br><span class="line"><span class="xml">    @include </span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprite-width(map-get($</span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprites, #&#123;$name&#125;));</span></span><br><span class="line"><span class="xml">    @include </span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprite-height(map-get($</span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprites, #&#123;$name&#125;));</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">if</span></span>&#125;&#125;</span></span><br><span class="line"><span class="template-tag">&#123;&#123;/<span class="name">block</span>&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;&#123;#<span class="name">block</span> "spritesheet-functions"&#125;&#125;</span></span><br><span class="line"><span class="template-tag">&#123;&#123;#<span class="name"><span class="builtin-name">if</span></span> options.functions&#125;&#125;</span></span><br><span class="line"><span class="xml">@mixin </span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprites($sprites) &#123;</span></span><br><span class="line"><span class="xml">    @each $sprite in $sprites &#123;</span></span><br><span class="line"><span class="xml">        $sprite-name: nth($sprite, 10);</span></span><br><span class="line"><span class="xml">        .sprite-#&#123;$sprite-name&#125; &#123;</span></span><br><span class="line"><span class="xml">            @include </span><span class="template-variable">&#123;&#123;spritesheet_info.strings.name&#125;&#125;</span><span class="xml">-sprite($sprite);</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">if</span></span>&#125;&#125;</span></span><br><span class="line"><span class="template-tag">&#123;&#123;/<span class="name">block</span>&#125;&#125;</span></span><br></pre></td></tr></table></figure>
<p>最后的最后，本篇文章涉及到的内容也已经同步更新到 vue-autumation 中，这是一个基于 Vue CLI 3 制作的 Vue 脚手架，能方便快速进行业务开发。</p>
<script src='https://gitee.com/eoner/vue-automation/widget_preview'></script>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><a href="https://blog.csdn.net/u012443286/article/details/90339762" target="_blank" rel="noopener">Vue-cli3.0下的雪碧图插件webpack-spritesmith配置方法</a> 部分参数的中文说明</li>
<li><a href="http://handlebarsjs.com/" target="_blank" rel="noopener">handlebarsjs</a> 在修改模版的时候特地去学习了 handlebars 的语法</li>
<li><a href="https://segmentfault.com/q/1010000010829858/a-1020000010831866" target="_blank" rel="noopener">Sass用变量作为变量名的语法</a> 在这个问题里针对sass不支持动态变量做了明确的解答，并且也提供的解决思路</li>
</ul>
]]></content>
      <categories>
        <category>Web 综合</category>
      </categories>
      <tags>
        <tag>webpack-spritesmith</tag>
        <tag>sprite</tag>
        <tag>vue-cli</tag>
        <tag>webpack</tag>
        <tag>精灵图</tag>
        <tag>雪碧图</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 全局组件自动注册</title>
    <url>/posts/1f86b6e7/</url>
    <content><![CDATA[<p>在 Vue 中，我们通过 <code>Vue.component('MyComponentName', { /* ... */ })</code> 的方式来进行全局组件注册，但如果需要全局注册的组件很多，这时代码就会变得比较臃肿，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册 5 个全局组件</span></span><br><span class="line"><span class="keyword">import</span> ExampleComponent1 <span class="keyword">from</span> <span class="string">'./components/exampleComponent1/index'</span></span><br><span class="line"><span class="keyword">import</span> ExampleComponent2 <span class="keyword">from</span> <span class="string">'./components/exampleComponent2/index'</span></span><br><span class="line"><span class="keyword">import</span> ExampleComponent3 <span class="keyword">from</span> <span class="string">'./components/exampleComponent3/index'</span></span><br><span class="line"><span class="keyword">import</span> ExampleComponent4 <span class="keyword">from</span> <span class="string">'./components/exampleComponent4/index'</span></span><br><span class="line"><span class="keyword">import</span> ExampleComponent5 <span class="keyword">from</span> <span class="string">'./components/exampleComponent5/index'</span></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">'ExampleComponent1'</span>, ExampleComponent1)</span><br><span class="line">Vue.component(<span class="string">'ExampleComponent2'</span>, ExampleComponent2)</span><br><span class="line">Vue.component(<span class="string">'ExampleComponent3'</span>, ExampleComponent3)</span><br><span class="line">Vue.component(<span class="string">'ExampleComponent4'</span>, ExampleComponent4)</span><br><span class="line">Vue.component(<span class="string">'ExampleComponent5'</span>, ExampleComponent5)</span><br></pre></td></tr></table></figure>
<p>下面我们就针对这块痛点，做些优化。</p>
<a id="more"></a>
<h2 id="循环注册"><a class="header-anchor" href="#循环注册"></a>循环注册</h2>
<p>回看上面的演示代码，最先能想到的优化方式，就是能不能做到批量注册，但查了 Vue 的手册，并没有看到组件批量注册的 API。</p>
<p>没办法，只能改变下思路，既然不能批量注册，那能不能做一层循环，在循环体内依次注册我们的组件呢？</p>
<p>答案当然是可以的，来看下我的实现代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ExampleComponent1 <span class="keyword">from</span> <span class="string">'./components/exampleComponent1/index'</span></span><br><span class="line"><span class="keyword">import</span> ExampleComponent2 <span class="keyword">from</span> <span class="string">'./components/exampleComponent2/index'</span></span><br><span class="line"><span class="keyword">import</span> ExampleComponent3 <span class="keyword">from</span> <span class="string">'./components/exampleComponent3/index'</span></span><br><span class="line"><span class="keyword">import</span> ExampleComponent4 <span class="keyword">from</span> <span class="string">'./components/exampleComponent4/index'</span></span><br><span class="line"><span class="keyword">import</span> ExampleComponent5 <span class="keyword">from</span> <span class="string">'./components/exampleComponent5/index'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> components = &#123;</span><br><span class="line">    ExampleComponent1,</span><br><span class="line">    ExampleComponent2,</span><br><span class="line">    ExampleComponent3,</span><br><span class="line">    ExampleComponent4,</span><br><span class="line">    ExampleComponent5</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.keys(components).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    Vue.component(key, components[key])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>首先组件还是要手动引入，引入之后我定义了一个 <code>components</code> 的对象，将引入组件的变量名存放在 <code>components</code> 对象里，最后通过 <code>Object.keys()</code> 方法循环对象并注册组件。</p>
<p>这个方法虽然减轻了一部分工作，但实际使用中，依旧还是比较麻烦，于是我又开始思考能否做到全自动注册。</p>
<h2 id="自动注册"><a class="header-anchor" href="#自动注册"></a>自动注册</h2>
<p>之前在阅读 <a href="https://github.com/PanJiaChen/vue-admin-template" target="_blank" rel="noopener">vue-admin-template</a> 的时候，学习到了一个语法 <code>require.context()</code> ，这是 Webpack 的一个 API ，它能做到遍历文件夹中的指定文件并自动引入。</p>
<p>既然能遍历指定文件，还能自动引入，这就已经解决了主要问题了，而我要做无非就是在遍历指定文件的同时，将其注册就可以了。</p>
<p>下面来看下实现代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> componentsContext = <span class="built_in">require</span>.context(<span class="string">'./components'</span>, <span class="literal">true</span>, /index.vue$/)</span><br><span class="line">componentsContext.keys().forEach(<span class="function"><span class="params">component</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取文件中的 default 模块</span></span><br><span class="line">    <span class="keyword">const</span> componentConfig = componentsContext(component).default</span><br><span class="line">    Vue.component(componentConfig.name, componentConfig)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>首先通过 <code>require.context()</code> 获取 ./components 目录下所有文件夹里的 index.vue 文件，然后循环依次读取文件中的 default 模块，并使用组件的 <code>name</code> 做为组件名进行组件注册。</p>
<blockquote>
<p>需要注意的是，组件必须设置 <code>name</code> 值，因为注册的组件名就是 <code>name</code> 值，所以还要确保不能重名。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">   name: <span class="string">'ExampleComponent1'</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
</blockquote>
<p>到此为止，我们已经实现组件的全局自动注册功能了，只需按照规范写好组件，放到 ./components 目录下即可，程序就会自动遍历并注册，无需我再手动操作。</p>
<h2 id="扩展"><a class="header-anchor" href="#扩展"></a>扩展</h2>
<p>组件有另一种调用方式，也就是通过 js 调用，例如 ElementUI 里的 <a href="https://element.eleme.cn/#/zh-CN/component/notification" target="_blank" rel="noopener">Notification</a> 组件，它的调用就是通过 <code>this.$notify()</code> 的方式调用，而 <code>$notify</code> 方法是 ElementUI 挂载到 Vue 原型链上的一个全局方法。</p>
<p>针对这种通过 js 调用的组件，我们需要在原有组件同目录下增加一个 js 文件，里面的代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">constructor</span> = Vue.extend(require('./main.vue').default)</span><br><span class="line"></span><br><span class="line">let instance</span><br><span class="line"></span><br><span class="line">const exampleComponent1 = options =&gt; &#123;</span><br><span class="line">    options = options || &#123;&#125;</span><br><span class="line">    instance = <span class="keyword">new</span> <span class="keyword">constructor</span>(&#123;</span><br><span class="line">        data: options</span><br><span class="line">    &#125;)</span><br><span class="line">    instance.vm = instance.$mount()</span><br><span class="line">    instance.dom = instance.vm.$el</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(instance.dom)</span><br><span class="line">    <span class="keyword">return</span> instance.vm</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> exampleComponent1</span><br></pre></td></tr></table></figure>
<p>这时候，我们还需要修改一下自动注册的代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> componentsContext = <span class="built_in">require</span>.context(<span class="string">'./components'</span>, <span class="literal">true</span>, /index.(vue|js)$/)</span><br><span class="line">componentsContext.keys().forEach(<span class="function"><span class="params">component</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 组件配置信息</span></span><br><span class="line">    <span class="keyword">const</span> componentConfig = componentsContext(component).default</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/.vue$/</span>.test(component)) &#123;</span><br><span class="line">        Vue.component(componentConfig.name, componentConfig)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Vue.prototype[<span class="string">`$<span class="subst">$&#123;componentConfig.name&#125;</span>`</span>] = componentConfig</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在循环依次读取文件中的 default 模块的时候，判断一下文件是 vue 文件还是 js 文件，如果是 vue 文件，则进行组件注册，如果是 js 文件，则将组件挂载到 Vue 原型链上。</p>
<p>上面这个 Demo，在实际使用中，就可以通过 <code>this.$exampleComponent1()</code> 的方式调用组件了。</p>
<h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2>
<p>全局组件自动注册的功能也加入到 vue-autumation 中，这是一个基于 Vue CLI 3 制作的 Vue 脚手架，能方便快速进行业务开发。</p>
<script src='https://gitee.com/eoner/vue-automation/widget_preview'></script>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><a href="https://www.jianshu.com/p/c894ea00dfec" target="_blank" rel="noopener">使用require.context实现前端工程自动化</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue 相关</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>组件</tag>
        <tag>全局组件</tag>
        <tag>自动</tag>
        <tag>注册</tag>
      </tags>
  </entry>
  <entry>
    <title>利用嵌套路由动态生成后台导航</title>
    <url>/posts/a2b0b91e/</url>
    <content><![CDATA[<p>导航一直是后台系统里不可缺少的一块，在 jQuery 时代，我通常会将导航的信息以数组的形式存放在某个 js 文件里，然后通过遍历数组动态渲染到页面上。</p>
<p>到了 Vue 后，这一方式似乎没什么变化，但工作量却变多了，因为 Vue 多了一步路由配置，不配置路由则不能跳转到需要的页面，也就是我要维护两份数据，一份是路由，一份是导航数组，而且这两份数据的相似度极高。</p>
<p>这一痛点其实在 <a href="https://github.com/PanJiaChen/vue-element-admin" target="_blank" rel="noopener">vue-element-admin</a> 里已经解决了，在通读源码后，我决定自行实现一个通过嵌套路由动态生成后台导航的功能。</p>
<a id="more"></a>
<h2 id="实现目标"><a class="header-anchor" href="#实现目标"></a>实现目标</h2>
<p>先来看看导航的结构吧：</p>
<p><img src="https://i.loli.net/2019/07/08/5d2308288030e97462.png" alt=""></p>
<p>首先在页面头部有顶部导航，其次还有侧边栏导航，当切换顶部导航的时候，侧边栏导航会改变。也就是一个三级导航，一级在顶部，二级三级在侧边栏。</p>
<p>需求清楚了，接下来就正式开始编码了。</p>
<h2 id="配置路由"><a class="header-anchor" href="#配置路由"></a>配置路由</h2>
<p>既然是通过路由生成导航，那首先就是要按导航的结构，配置好我们的路由，这里就需要用到路由的嵌套了，我们来看看代码是怎么样的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">'/nav1'</span>,</span><br><span class="line">            redirect: <span class="string">'/nav1/side1'</span>,</span><br><span class="line">            component: Layout,</span><br><span class="line">            meta: &#123;</span><br><span class="line">                title: <span class="string">'顶部导航1'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            children: [</span><br><span class="line">                &#123;</span><br><span class="line">                    path: <span class="string">'side1'</span>,</span><br><span class="line">                    redirect: <span class="string">'/nav1/side1/item1'</span>,</span><br><span class="line">                    component: Empty,</span><br><span class="line">                    meta: &#123;</span><br><span class="line">                        title: <span class="string">'侧边导航1'</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    children: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            path: <span class="string">'item1'</span>,</span><br><span class="line">                            component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/nav1/side1/item1'</span>),</span><br><span class="line">                            meta: &#123;</span><br><span class="line">                                title: <span class="string">'子导航1'</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            path: <span class="string">'item2'</span>,</span><br><span class="line">                            component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/nav1/side1/item2'</span>),</span><br><span class="line">                            meta: &#123;</span><br><span class="line">                                title: <span class="string">'子导航2'</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    path: <span class="string">'side2'</span>,</span><br><span class="line">                    redirect: <span class="string">'/nav1/side2/item1'</span>,</span><br><span class="line">                    component: Empty,</span><br><span class="line">                    meta: &#123;</span><br><span class="line">                        title: <span class="string">'侧边导航2'</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    children: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            path: <span class="string">'item1'</span>,</span><br><span class="line">                            component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/nav1/side2/item1'</span>),</span><br><span class="line">                            meta: &#123;</span><br><span class="line">                                title: <span class="string">'子导航1'</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            path: <span class="string">'item2'</span>,</span><br><span class="line">                            component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/nav1/side2/item2'</span>),</span><br><span class="line">                            meta: &#123;</span><br><span class="line">                                title: <span class="string">'子导航2'</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">'/nav2'</span>,</span><br><span class="line">            redirect: <span class="string">'/nav2/side1'</span>,</span><br><span class="line">            component: Layout,</span><br><span class="line">            meta: &#123;</span><br><span class="line">                title: <span class="string">'顶部导航2'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            children: [</span><br><span class="line">                &#123;</span><br><span class="line">                    path: <span class="string">'side1'</span>,</span><br><span class="line">                    redirect: <span class="string">'/nav2/side1/item1'</span>,</span><br><span class="line">                    component: Empty,</span><br><span class="line">                    meta: &#123;</span><br><span class="line">                        title: <span class="string">'侧边导航1'</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    children: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            path: <span class="string">'item1'</span>,</span><br><span class="line">                            component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/nav2/side1/item1'</span>),</span><br><span class="line">                            meta: &#123;</span><br><span class="line">                                title: <span class="string">'子导航1'</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            path: <span class="string">'item2'</span>,</span><br><span class="line">                            component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/nav2/side1/item2'</span>),</span><br><span class="line">                            meta: &#123;</span><br><span class="line">                                title: <span class="string">'子导航2'</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    path: <span class="string">'side2'</span>,</span><br><span class="line">                    redirect: <span class="string">'/nav2/side2/item1'</span>,</span><br><span class="line">                    component: Empty,</span><br><span class="line">                    meta: &#123;</span><br><span class="line">                        title: <span class="string">'侧边导航2'</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    children: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            path: <span class="string">'item1'</span>,</span><br><span class="line">                            component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/nav2/side2/item1'</span>),</span><br><span class="line">                            meta: &#123;</span><br><span class="line">                                title: <span class="string">'子导航1'</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            path: <span class="string">'item2'</span>,</span><br><span class="line">                            component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/nav2/side2/item2'</span>),</span><br><span class="line">                            meta: &#123;</span><br><span class="line">                                title: <span class="string">'子导航2'</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>可以看到，我把页面每一级的标题也配置在了路由中，统一存放在 <code>meta</code> 参数内。</p>
<h2 id="展示导航"><a class="header-anchor" href="#展示导航"></a>展示导航</h2>
<p>路由配置好后，接着就是要在页面上展示出来。怎么输出呢？通过 Router 实例可以获取到路由的完整数据，数据获取到，基本上就没难度了，根据界面要求输出即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.$router.options.routes)</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/07/08/5d2315923082e24310.png" alt=""></p>
<p>这里有几点需要注意下：</p>
<p><strong>第一点</strong>，需要使用 <code>&lt;router-link&gt;&lt;/router-link&gt;</code> 输出，这样就可以通过设置 <code>.router-link-active</code> 样式来实现导航高亮的效果，就像这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">"item in nav"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:key</span>=<span class="string">"item.path"</span> <span class="attr">:to</span>=<span class="string">"item.path"</span>&gt;</span>&#123;&#123; item.meta.title &#125;&#125;<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>第二点</strong>，由于侧边栏导航是根据当前是哪个顶部导航而展示其下面对应的导航，所以在遍历侧边栏的时候，需要加一个条件判断，也就是判断当前路由属于哪个头部导航，然后再遍历该头部导航下面的侧边栏导航。</p>
<p>这里可以通过 <code>this.$route.matched</code> 得到当前路由的整个层级数组，其中数组第一个就是头部导航的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.$route.matched)</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/07/08/5d231f07de11824793.png" alt=""></p>
<p>通过这个 <code>path</code> 就可以去判断了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">"sidebar in nav"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"sidebar.path == basePath"</span> <span class="attr">:key</span>=<span class="string">"sidebar.path"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in sidebar.children"</span> <span class="attr">:key</span>=<span class="string">"item.path"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 循环侧边栏导航 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    computed: &#123;</span><br><span class="line">        basePath() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> <span class="keyword">this</span>.$route.matched[<span class="number">0</span>].path</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>第三点</strong>，侧边栏实际是个二级导航，而使用 <code>&lt;router-link&gt;&lt;/router-link&gt;</code> 输出的实际是 <code>&lt;a&gt;&lt;/a&gt;</code> 标签，因为 <code>&lt;a&gt;&lt;/a&gt;</code> 标签不支持嵌套 <code>&lt;a&gt;&lt;/a&gt;</code> ，所以在输出侧边栏一级导航的时候，我们需要用其它标签代替，比如 <code>&lt;div&gt;&lt;/div&gt;</code> 。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in sidebar.children"</span> <span class="attr">:key</span>=<span class="string">"item.path"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>&#123;&#123; item.meta.title &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar-menu"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-for</span>=<span class="string">"a in item.children"</span> <span class="attr">:key</span>=<span class="string">"a.path"</span> <span class="attr">:to</span>=<span class="string">"resolvePath(item.path, a.path)"</span> <span class="attr">class</span>=<span class="string">"sidebar-menu-item"</span>&gt;</span>&#123;&#123; a.meta.title &#125;&#125;<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>第四点</strong>，由于路由里存放的 <code>path</code> 是相对路径，而非绝对路径，所以除头部导航外，侧边栏导航的跳转地址是需要手动拼装的，通过上面的代码可以看到有调用 <code>resolvePath()</code> 这个方法，分别传入了二级三级导航的 <code>path</code> ，方法内部其实是用了 <code>path.resolve()</code> 实现跳转地址的拼装。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">resolvePath(...routePath) &#123;</span><br><span class="line">    <span class="keyword">return</span> path.resolve(<span class="keyword">this</span>.basePath, ...routePath)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="功能扩展"><a class="header-anchor" href="#功能扩展"></a>功能扩展</h2>
<p>以上就能实现基础的后台框架了，在此基础上，扩展功能就可以自行发挥了。</p>
<p>比如顶部导航要增加 icon 图标，我的做法就是在路由 <code>meta</code> 参数里增加一个 <code>icon</code> 的设置，然后页面上获取到这个 <code>icon</code> 值并做对应处理。</p>
<p>再比如侧边栏的手风琴效果，以及面包屑导航，这里就不具体讲解如何实现了，本次的完整示例已经提交到 Gitee 上，感兴趣的可以关注这个仓库：</p>
<script src='https://gitee.com/hooray/example-backstage-template/widget_preview'></script>
<h2 id="最终效果"><a class="header-anchor" href="#最终效果"></a>最终效果</h2>
<p>最后来看下完整的效果吧！</p>
<p><img src="https://i.loli.net/2019/07/08/5d230dfe979db64371.gif" alt=""></p>
]]></content>
      <categories>
        <category>Vue 相关</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>router</tag>
        <tag>路由</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>重构 vue-element-admin 权限模块</title>
    <url>/posts/6237952e/</url>
    <content><![CDATA[<p>后台开发离不开权限，不同的用户登录，根据不同的权限，可以访问不同的管理目录。但在使用 <a href="https://github.com/PanJiaChen/vue-admin-template" target="_blank" rel="noopener">vue-element-template</a> 里内置的权限模块功能后，发现作者提供的权限模块扩展性不是很好，所以这篇文章就是记录我是如何基于作者原有的权限模块进行的一次重构。</p>
<a id="more"></a>
<h2 id="为什么要重构"><a class="header-anchor" href="#为什么要重构"></a>为什么要重构</h2>
<p>开篇的时候说了，因为扩展性不是很好，那具体是什么扩展性不好呢？我们先来看下作者原有的权限模块实现思路是怎么样的。</p>
<p>首先需要在路由里配置 <code>roles</code> 角色字段，代表该角色可以访问这个路由，可以配置多个角色，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">'page'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/permission/page'</span>),</span><br><span class="line">    name: <span class="string">'PagePermission'</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">        title: <span class="string">'Page Permission'</span>,</span><br><span class="line">        roles: [<span class="string">'admin'</span>, <span class="string">'editor'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在登录成功时，根据用户角色过滤生成能访问的路由，最后通过 <code>addRoutes</code> 进行动态路由挂载，这部分的实现可参考 <a href="https://github.com/PanJiaChen/vue-admin-template/blob/permission-control/src/permission.js#L37" target="_blank" rel="noopener">permission.js</a> 文件。</p>
<p>这样的实现有个缺点，就是角色无法动态增加，比如要增加一个角色，就需要到路由里将这个角色需要的权限全部添加一遍，删除修改同理，而这部分的操作无法交给用户或者管理员自行配置。</p>
<h2 id="开始重构"><a class="header-anchor" href="#开始重构"></a>开始重构</h2>
<p>依托于这样一个痛点，重构的思路其实就出来了，将路由里配置的角色改成具体的权限即可。</p>
<h3 id="路由配置"><a class="header-anchor" href="#路由配置"></a>路由配置</h3>
<p>我先把权限划分出了四大类：</p>
<ul>
<li><code>browse</code> 浏览权限</li>
<li><code>create</code> 新增权限</li>
<li><code>edit</code> 编辑权限</li>
<li><code>delete</code> 删除权限</li>
</ul>
<p>再结合不同模块，就可以组成这样一个字符串 <code>[moduleName].[authType]</code> ，例如新闻管理模块下的新增权限就是 <code>news.create</code> ，最后将路由文件里 <code>roles</code> 字段替换成对应的模块权限即可，当然现在不能叫 <code>roles</code> ，我将字段名也替换成了 <code>auth</code> ，就像这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">'page'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/permission/page'</span>),</span><br><span class="line">    name: <span class="string">'PagePermission'</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">        title: <span class="string">'Page Permission'</span>,</span><br><span class="line">        auth: [<span class="string">'module.browse'</span>, <span class="string">'module.create'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="接口配合"><a class="header-anchor" href="#接口配合"></a>接口配合</h3>
<p>接口要如何配合我们修改呢？原先接口只需要返回当前用户的角色即可，现在则需要返回具体的权限列表，例如这样一个数组：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="string">'news.browse'</span>,</span><br><span class="line">    <span class="string">'news.create'</span>,</span><br><span class="line">    <span class="string">'news.edit'</span>,</span><br><span class="line">    <span class="string">'category.browse'</span>,</span><br><span class="line">    <span class="string">'category.create'</span>,</span><br><span class="line">    <span class="string">'category.edit'</span>,</span><br><span class="line">    <span class="string">'category.delete'</span>,</span><br><span class="line">    <span class="string">'log.browse'</span>,</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="生成路由"><a class="header-anchor" href="#生成路由"></a>生成路由</h3>
<p>这部分就是要修改原有根据用户角色生成能访问的路由的代码，这部分代码逻辑在全局状态 <a href="https://github.com/PanJiaChen/vue-admin-template/blob/permission-control/src/store/modules/permission.js" target="_blank" rel="noopener">permission</a> 里，可以看到 <code>actions</code> 里有个叫 <code>generateRoutes</code> 的方法，就是用于根据用户角色生成路由并返回的。</p>
<p>这部分改动比较大，具体直接看代码吧：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; asyncRoutes, constantRoutes &#125; <span class="keyword">from</span> <span class="string">'@/router'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasAuthorization</span>(<span class="params">authorization, route</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (route.meta &amp;&amp; route.meta.auth) &#123;</span><br><span class="line">    <span class="keyword">return</span> authorization.some(<span class="function"><span class="params">auth</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> route.meta.auth.some(<span class="function"><span class="params">routeAuth</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> routeAuth === auth</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">filterAsyncRoutes</span>(<span class="params">routes, authorization</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = []</span><br><span class="line">  routes.forEach(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> tmp = &#123; ...route &#125;</span><br><span class="line">    <span class="keyword">if</span> (hasAuthorization(authorization, tmp)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (tmp.children) &#123;</span><br><span class="line">        tmp.children = filterAsyncRoutes(tmp.children, authorization)</span><br><span class="line">      &#125;</span><br><span class="line">      res.push(tmp)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  routes: [],</span><br><span class="line">  addRoutes: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  SET_ROUTES: <span class="function">(<span class="params">state, routes</span>) =&gt;</span> &#123;</span><br><span class="line">    state.addRoutes = routes</span><br><span class="line">    state.routes = constantRoutes.concat(routes)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  generateRoutes(&#123; commit &#125;, authList) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> accessedRoutes = filterAsyncRoutes(asyncRoutes, authList)</span><br><span class="line">      commit(<span class="string">'SET_ROUTES'</span>, accessedRoutes)</span><br><span class="line">      resolve(accessedRoutes)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  namespaced: <span class="literal">true</span>,</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然了，在 <a href="https://github.com/PanJiaChen/vue-admin-template/blob/permission-control/src/permission.js#L40" target="_blank" rel="noopener">permission.js</a> 里调用 <code>generateRoutes</code> 这个方法的时候，入参也要修改掉，需要把用户权限列表传入进来。</p>
<p>这样，最终生成好的路由就是根据用户权限过滤出来的可访问路由了。</p>
<h3 id="按钮级别权限控制"><a class="header-anchor" href="#按钮级别权限控制"></a>按钮级别权限控制</h3>
<p>原框架中并没有提供按钮级别的权限控制，但业务中肯定避免不了这样的需求，例如下面这个员工管理的列表页。</p>
<p><img src="https://i.loli.net/2019/06/15/5d049fe831f7297745.png" alt=""></p>
<p>这样一个页面，就刚好涵盖了权限四大类型，首先列表页是否能访问，是 <code>browse</code> 权限，页面中“添加新员工”按钮是 <code>create</code> 权限，列表中“编辑”和“删除”按钮分别是 <code>edit</code> 和 <code>delete</code> 权限，但这时候如果用户只有 <code>browse</code> 和 <code>edit</code> 权限的话，那对应没有权限的按钮，就应该在页面上去掉。</p>
<p>其实实现这个很简单，只需要自己写一个鉴权的方法就可以了，我的做法是在全局状态 permission 里增加一个叫 <code>hasAuthorization</code> 的 <code>getters</code> ：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  hasAuthorization: <span class="function"><span class="params">state</span> =&gt;</span> <span class="function"><span class="params">authorization</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.authorization.some(<span class="function"><span class="params">auth</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> auth === authorization</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在需要做权限控制的按钮上就可以调用了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">v-if</span>=<span class="string">"$store.getters['permission/hasAuthorization']('member.create')"</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">icon</span>=<span class="string">"el-icon-plus"</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span>添加新员工<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="自定义指令"><a class="header-anchor" href="#自定义指令"></a>自定义指令</h3>
<p><code>$store.getters['permission/hasAuthorization']('xxx.yyy')</code> 这样的方式还是过于麻烦了，毕竟要写这么一长端代码，于是我想到了 Vue 的自定义指令。</p>
<p>我把鉴权部分封装成一个方法，同时注册了 <code>v-auth</code> 的全局指令，并且还把鉴权的方法挂载到 Vue 的原型链上，方便功能点的鉴权。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> auth = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> auth</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">'string'</span>) &#123;</span><br><span class="line">    auth = store.getters[<span class="string">'permission/hasAuthorization'</span>](value)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    auth = value.some(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> store.getters[<span class="string">'permission/hasAuthorization'</span>](item)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> auth</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册 v-auth 指令</span></span><br><span class="line">Vue.directive(<span class="string">'auth'</span>, &#123;</span><br><span class="line">  inserted: <span class="function">(<span class="params">el, binding</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!auth(binding.value)) &#123;</span><br><span class="line">      el.remove()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载 this.$auth() 方法</span></span><br><span class="line">Vue.prototype.$auth = auth</span><br></pre></td></tr></table></figure>
<p>这个 <code>v-auth</code> 指令支持传入数组格式，只要数组其中一项满足则鉴权成功，如果需要数组每一项都满足才算成功，可以自行再注册一个全局指令实现。</p>
<h2 id="完成重构"><a class="header-anchor" href="#完成重构"></a>完成重构</h2>
<p>这样就完成了对权限模块的重构，因为路由直接和权限对接，用户就可以自行去配置角色的权限了，例如这样：</p>
<p><img src="https://i.loli.net/2019/06/15/5d049e1235fe510900.png" alt=""></p>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<p><a href="https://juejin.im/post/591aa14f570c35006961acac" target="_blank" rel="noopener">手摸手，带你用vue撸后台 系列二(登录权限篇)</a><br>
<a href="https://juejin.im/post/5c92ff94f265da6128275a85" target="_blank" rel="noopener">手摸手，带你用vue撸后台 系列五(v4.0新版本)</a></p>
<blockquote>
<p>2019/07/31 更新：<br>
昨天看到了《<a href="https://v.qq.com/x/page/t0905b3h0qj.html" target="_blank" rel="noopener">iView 2019 新品发布会录像</a>》的视频，发现 iView Admin Pro 里提供的鉴权，和我这篇文章里提供的部分鉴权的思路，可以说是如出一辙，可以说是英雄所见略同。<br>
尤其是自定义指令这部分，都采用了 <code>v-auth</code> 的指令，也同样提供了单个和多个权限的鉴权，当然也有部分各自的特点，比如我在实际项目中还提供了 <code>v-auth-all</code> 指令，iView 则还提供了一个 <code>&lt;Auth&gt;</code> 的组件做功能块的鉴权。</p>
</blockquote>
]]></content>
      <categories>
        <category>Vue 相关</category>
      </categories>
      <tags>
        <tag>后台</tag>
        <tag>vue-element-admin</tag>
        <tag>权限</tag>
        <tag>角色</tag>
      </tags>
  </entry>
  <entry>
    <title>父组件调用子组件自定义事件的同时增加自定义参数</title>
    <url>/posts/8b819d9e/</url>
    <content><![CDATA[<h2 id="问题描述"><a class="header-anchor" href="#问题描述"></a>问题描述</h2>
<p>通常，在写组件的时候，会在组件里用 <code>$emit</code> 方法携带参数传出组件的自定义事件，比如这样</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">this</span>.$emit(<span class="string">'test'</span>, <span class="keyword">this</span>.param)</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Component</span> @<span class="attr">test</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">Component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是会碰到这样一个需求，就是在父组件调用子组件自定义事件的同时，还需要传入其它的参数。</p>
<p>这时候如果直接带上自定义的参数，就无法接收到子组件传出参数，那有什么办法可以同时都接收到呢？</p>
<a id="more"></a>
<h2 id="解决办法"><a class="header-anchor" href="#解决办法"></a>解决办法</h2>
<p>翻遍 Vue 的文档也没看到对这块有说明，不过最后还是找到了方法了，就是通过 <code>$event</code> ，看下面的具体使用吧。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">this</span>.$emit(<span class="string">'test'</span>, <span class="keyword">this</span>.param)</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Component</span> @<span class="attr">test</span>=<span class="string">"test($event, other)"</span>&gt;</span><span class="tag">&lt;/<span class="name">Component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以看到， <code>other</code> 就是附加的自定义参数，通过这样的写法，就可以同时接收子组件传出的参数和自定义的参数。</p>
<p>问题又来了，如果子组件里传出的是多个参数应该怎么办？</p>
<p>这时候只要把 <code>$event</code> 替换成 <code>arguments</code> 就可以了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">this</span>.$emit(<span class="string">'test'</span>, <span class="keyword">this</span>.param1, <span class="keyword">this</span>.param2, <span class="keyword">this</span>.param3)</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Component</span> @<span class="attr">test</span>=<span class="string">"test(arguments, other)"</span>&gt;</span><span class="tag">&lt;/<span class="name">Component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="参考链接"><a class="header-anchor" href="#参考链接"></a>参考链接</h2>
<p><a href="https://github.com/vuejs/vue/issues/5735" target="_blank" rel="noopener">自定义事件传参问题</a></p>
]]></content>
      <categories>
        <category>Vue 相关</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>组件</tag>
        <tag>$emit</tag>
        <tag>自定义参数</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序列表页不满一屏自动加载下一页</title>
    <url>/posts/e4b09421/</url>
    <content><![CDATA[<p>在移动端，不管是在 App、H5，还是小程序，滚动加载已经成了列表页的标配功能。</p>
<p>但最近在学习小程序的时候，发现一个问题，就是如果第一页的数据如果无法撑满一屏，这时候无法滚动页面，也就导致不能触发加载第二页的数据。</p>
<p>对于这个问题，最简单的办法就是把每页加载的条目加大，比如原先一页 10 条，那就改成一页 15 条，或者 20 条，保证一页的数据能撑满一屏就可以。</p>
<p>但做为一个技术人员，这样的解决方案难免有点不 geek ，于是，我想到了另一种解决方案。</p>
<a id="more"></a>
<p>其实标题已经剧透了，就是在加载完一页数据后，通过判断页面高度是否大于窗口高度，如果小于窗口高度，则自动触发加载下一页。实现一个递归函数，直到页面高度大于窗口高度则停止递归。</p>
<h2 id="获取页面高度"><a class="header-anchor" href="#获取页面高度"></a>获取页面高度</h2>
<p>翻阅小程序的 API 发现了这个方法 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/NodesRef.boundingClientRect.html" target="_blank" rel="noopener"><code>NodesRef.boundingClientRect</code></a> ，可以获取指定节点的信息，其中就包含了节点的高度。</p>
<p>直接上代码：</p>
<p>首先给页面最外层的 view 加个 id</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后就是增加一段 js 在原有加载列表数据的方法里</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getList() &#123;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    wx.createSelectorQuery().select(<span class="string">'#list'</span>).boundingClientRect(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 页面高度</span></span><br><span class="line">        <span class="built_in">console</span>.log(res.height)</span><br><span class="line">    &#125;).exec()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="获取窗口高度"><a class="header-anchor" href="#获取窗口高度"></a>获取窗口高度</h2>
<p>一样还是先翻阅小程序的 API ，然后发现第一个就是 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/wx.getSystemInfoSync.html" target="_blank" rel="noopener"><code>wx.getSystemInfoSync()</code></a> ，这里我们用的是同步版本。</p>
<p>话不多说，上代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getList() &#123;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    wx.createSelectorQuery().select(<span class="string">'#list'</span>).boundingClientRect(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 页面高度</span></span><br><span class="line">        <span class="built_in">console</span>.log(res.height)</span><br><span class="line">        <span class="comment">// 窗口高度</span></span><br><span class="line">        <span class="built_in">console</span>.log(wx.getSystemInfoSync().windowHeight)</span><br><span class="line">    &#125;).exec()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实现业务逻辑"><a class="header-anchor" href="#实现业务逻辑"></a>实现业务逻辑</h2>
<p>到此为止，需要的数据都得到了，接下来就简单了，判断一下页面高度如果小于窗口高度，则调用下自身 <code>getList()</code> 方法就可以了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getList() &#123;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    wx.createSelectorQuery().select(<span class="string">'#list'</span>).boundingClientRect(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(res.height &lt; wx.getSystemInfoSync().windowHeight) &#123;</span><br><span class="line">            <span class="keyword">this</span>.getList()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).exec()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>来看看实际使用中的效果吧，这里为了演示，我把列表加载改成了每次只获取一条记录，可以看到，我们写的递归函数会依次加载下一页数据，直到把一屏铺满。</p>
<p><img src="https://i.loli.net/2019/03/18/5c8f484ae5af8.gif" alt=""></p>
]]></content>
      <categories>
        <category>小程序相关</category>
      </categories>
      <tags>
        <tag>小程序</tag>
        <tag>滚动加载</tag>
      </tags>
  </entry>
  <entry>
    <title>gulp-automation 升级小记</title>
    <url>/posts/157bef6b/</url>
    <content><![CDATA[<p>最近几天，对以前制作的 <a href="https://gitee.com/eoner/gulp-automation" target="_blank" rel="noopener">gulp-automation</a> 进行了一次较大的升级，这篇文章主要是记录一下升级的心路历程，也勉强算一篇升级说明吧。😀</p>
<a id="more"></a>
<h2 id="升级至-Gulp-4-0"><a class="header-anchor" href="#升级至-Gulp-4-0"></a>升级至 Gulp 4.0</h2>
<p>Gulp 其实在 2015 年就已经放出 4.0 的分支，网上还能找到腾讯 AlloyTeam 在 2015 年发布一篇《<a href="http://www.alloyteam.com/2015/07/update-your-gulp/" target="_blank" rel="noopener">是时候升级你的gulp到4.0了</a>》的文章，但直到去年 Gulp 才正式发布 4.0 。</p>
<p>根据官方的说明，如果全局安装过旧版本的 gulp ，需要先运行 <code>npm rm --global gulp</code> 卸载旧版本后，再运行 <code>npm install --global gulp-cli</code> 安装最新版本。</p>
<h3 id="新的-task-注册方法"><a class="header-anchor" href="#新的-task-注册方法"></a>新的 task 注册方法</h3>
<p>在 4.0 里 <code>gulp.task</code> 支持传递一个具名函数做为参数， gulp 会自动注册一个 taskname ，比如以前是这样写的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">'zip'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./build/**/*'</span>)</span><br><span class="line">        .pipe($.zip(pkg.name + <span class="string">'.'</span> + getNowFormatDate() + <span class="string">'.zip'</span>))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./build-zip'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>现在就可以这样写了：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">zip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./build/**/*'</span>)</span><br><span class="line">        .pipe($.zip(pkg.name + <span class="string">'.'</span> + getNowFormatDate() + <span class="string">'.zip'</span>))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./build-zip'</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gulp.task(zip);</span><br></pre></td></tr></table></figure>
<h3 id="gulp-series-和-gulp-parallel"><a class="header-anchor" href="#gulp-series-和-gulp-parallel"></a>gulp.series 和 gulp.parallel</h3>
<p>在一个复杂的构建工作流程里，会涉及到各种同步或异步执行的任务。以前我会使用 <a href="https://www.npmjs.com/package/run-sequence" target="_blank" rel="noopener">run-sequence</a> 这种依赖包来解决，但用着并不是很明白。</p>
<p>现在官方终于出面解决这问题了，增加了 <code>gulp.series</code>（顺序执行）和 <code>gulp.parallel</code>（同时执行）这两个 API 。这部分我就不举对比的例子了，直接看下引入 <code>gulp.series</code> 和 <code>gulp.parallel</code> 后的代码是怎么样的吧。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>)</span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params"></span>)</span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>)</span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'test'</span>, gulp.series(</span><br><span class="line">    a,</span><br><span class="line">    b,</span><br><span class="line">    gulp.parallel(</span><br><span class="line">        c,</span><br><span class="line">        gulp.series(</span><br><span class="line">            d,</span><br><span class="line">            e</span><br><span class="line">        ),</span><br><span class="line">        f</span><br><span class="line">    ),</span><br><span class="line">    g</span><br><span class="line">));</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在 4.0 里 <code>gulp.task</code> 取消了三个参数的用法。</p>
</blockquote>
<h2 id="移除-Compass"><a class="header-anchor" href="#移除-Compass"></a>移除 Compass</h2>
<p>在实际项目开发中，发现 compass 的编译时间实在是太耗时了，而且使用到的东西也不多，也就用到了 compass 里的精灵图生成，所以在这次升级中，果断把 compass 给移除了。</p>
<h3 id="sass"><a class="header-anchor" href="#sass"></a>sass</h3>
<p>移除 compass 之后， sass 文件的编译就要自己实现了，当然这部分不难，直接安装 <a href="https://www.npmjs.com/package/gulp-sass" target="_blank" rel="noopener">gulp-sass</a> 、<a href="https://www.npmjs.com/package/gulp-sourcemaps" target="_blank" rel="noopener">gulp-sourcemaps</a> 和 <a href="https://www.npmjs.com/package/node-sass" target="_blank" rel="noopener">node-sass</a> 的依赖包后，再写一个具名函数就可以了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sass</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">        .src(G.sass)</span><br><span class="line">        .pipe($.plumber())</span><br><span class="line">        .pipe($.sourcemaps.init())</span><br><span class="line">        .pipe($.sass())</span><br><span class="line">        .pipe($.sourcemaps.write(<span class="string">'.'</span>))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./static/css/'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="精灵图"><a class="header-anchor" href="#精灵图"></a>精灵图</h3>
<p>精灵图我用的是 <a href="https://www.npmjs.com/package/gulp.spritesmith" target="_blank" rel="noopener">gulp.spritesmith</a> ，但在使用上做了一些小技巧，实现了一次生成多张精灵图，同时结合 <code>gulp.watch</code> 还做到了实时更新精灵图。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sprites</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">var</span> folder = [];</span><br><span class="line">    fs.readdirSync(<span class="string">'static/image/sprite/'</span>).map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> stat = fs.statSync(<span class="string">`static/image/sprite/<span class="subst">$&#123;item&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">if</span> (stat.isDirectory()) &#123;</span><br><span class="line">            folder.push(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    folder.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        arr.push(</span><br><span class="line">            gulp</span><br><span class="line">            .src(<span class="string">`static/image/sprite/<span class="subst">$&#123;item&#125;</span>/*.png`</span>)</span><br><span class="line">            .pipe($.plumber())</span><br><span class="line">            .pipe(</span><br><span class="line">                $.spritesmith(&#123;</span><br><span class="line">                    imgName: <span class="string">`<span class="subst">$&#123;item&#125;</span>.png`</span>,</span><br><span class="line">                    cssName: <span class="string">`_<span class="subst">$&#123;item&#125;</span>.scss`</span>,</span><br><span class="line">                    imgPath: <span class="string">`../image/sprite/<span class="subst">$&#123;item&#125;</span>.png`</span>,</span><br><span class="line">                    cssVarMap: <span class="function"><span class="keyword">function</span> (<span class="params">sprite</span>) </span>&#123;</span><br><span class="line">                        sprite.name = <span class="string">`<span class="subst">$&#123;item&#125;</span>_<span class="subst">$&#123;sprite.name&#125;</span>`</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            )</span><br><span class="line">            .pipe(gulp.dest(<span class="string">'static/image/sprite/'</span>))</span><br><span class="line">        );</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> mergeStream(...arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="移除-yargs-，引入-inquirer"><a class="header-anchor" href="#移除-yargs-，引入-inquirer"></a>移除 yargs ，引入 inquirer</h2>
<blockquote>
<p><a href="https://www.npmjs.com/package/yargs" target="_blank" rel="noopener">yargs</a> 是一个处理命令行参数的依赖包<br>
<a href="https://www.npmjs.com/package/inquirer" target="_blank" rel="noopener">inquirer</a> 是一个命令行交互工具的依赖包</p>
</blockquote>
<p>毕竟图形化的操作方式比起敲命令行还是会更加直观，所以这次升级把这部分也优化了。</p>
<p>比如下面这个是原先 <code>gulp build</code> 打包指令的说明文档，涉及到很多可选参数：</p>
<p><img src="https://i.loli.net/2019/02/02/5c5593fbd63d0.png" alt=""></p>
<p>而现在只需要输入 <code>gulp build</code> ，根据引导提示一步步确认就可以了，我自己使用起来感觉极爽！</p>
<p><img src="https://i.loli.net/2019/02/02/5c55799d3d10b.gif" alt=""></p>
<p>在学习 <a href="https://www.npmjs.com/package/inquirer" target="_blank" rel="noopener">inquirer</a> 的时候，我还发现了一个叫 <a href="https://www.npmjs.com/package/gulp-prompt" target="_blank" rel="noopener">gulp-prompt</a> 的包，它核心也是使用了 <a href="https://www.npmjs.com/package/inquirer" target="_blank" rel="noopener">inquirer</a> ，但没有用它的原因是因为我在使用 list 类型的时候， task 结束后进程不会结束，并且在 <a href="https://github.com/Freyskeyd/gulp-prompt/issues/63" target="_blank" rel="noopener">issues</a> 里发现去年 11 月就有人提了，但一直没得到解决， so sad 😔</p>
<h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2>
<p>以上就是本次 <a href="https://gitee.com/eoner/gulp-automation" target="_blank" rel="noopener">gulp-automation</a> 的升级小记，这套基于 Gulp 的自动化工作流在我司内部使用了一年多的时间，整个开发流程也比较符合大部分公司。</p>
<p>如果你也在使用 Gulp ，我认真的推荐你走过路过，不如看一眼，如果觉得有用，那是我的荣幸，如果觉得有不足的，也希望能留言告诉我。</p>
<script src='//gitee.com/eoner/gulp-automation/widget_preview'></script>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><a href="http://www.alloyteam.com/2015/07/update-your-gulp/" target="_blank" rel="noopener">是时候升级你的gulp到4.0了</a></li>
<li><a href="https://blog.skk.moe/post/update-gulp-to-4/" target="_blank" rel="noopener">升级到 gulp 4.0</a></li>
<li><a href="https://blog.csdn.net/qq_26733915/article/details/80461257" target="_blank" rel="noopener">inquirer.js —— 一个用户与命令行交互的工具</a></li>
</ul>
]]></content>
      <categories>
        <category>Web 综合</category>
      </categories>
      <tags>
        <tag>Gulp</tag>
        <tag>自动化</tag>
        <tag>gulp-automation</tag>
      </tags>
  </entry>
  <entry>
    <title>2018 年终工作小结</title>
    <url>/posts/b7a52e4b/</url>
    <content><![CDATA[<p>写完这篇年终小结，意味着我的 2018 年正式结束了，因为公司放假正好是今天开始。当然很巧的是，我在这个独立博客写的第一篇文章也是 1 月 31 日，时间刚好整一年。</p>
<p>其实这篇文章早就写好了，为了凑这天整整等了一周。😂</p>
<a id="more"></a>
<blockquote>
<p>如果用一个字概况我的 2018 年，那就是「新」。新的团队，新的技术，新的自我定位，「新」成为了我整个 2018 年的主旋律。</p>
</blockquote>
<h2 id="团队"><a class="header-anchor" href="#团队"></a>团队</h2>
<p>为什么说是新的团队，因为 2018 年初始，由我负责的前端部门，老员工陆陆续续地全部离职了，允悲。虽然实际就走了 2 人，但对于当时的我来说，压力还是蛮大的，部门被迫换血，团队需重新组建，招人、带人、新项目开发、老项目维护，各种事情都不是接踵而来，而是并行发生，让刚过完年还沉浸在“假期综合症”里的我，连续失眠了好几天。（我才没有给晚睡找理由 😒</p>
<p>这件事发生后我一直在反思为什么留不住人，一开始我并不觉得是我的原因，甚至觉得有点无能为力，因为离职前做过几次沟通，大概意思就是钱没给够，工作压力大，可这些事都不是我能控制的，但越往深的想，越发觉自己还是有做的不够的地方，那就是责任感不够。做为主管，虽然不能直接给下属员工发钱，但没能帮助他们提升能力，让他们有机会赚更多的钱，那就是我的失职。</p>
<p>这点感悟和后来我看了《燃点》这部电影里，老罗说的一句话产生了强烈的共鸣，原话我不记得了，大概意思是“如果公司倒闭了，一想到跟着我（罗永浩）的500个员工，背后是500个家庭，就觉得对不住人家”。顺带提一句，电影拍得真不咋地，白期待了好久。</p>
<p>随后在新团队培养的时候，我开始有意识的去关注同事工作能力的提升，定期开内部例会，做技术分享，做代码审查。除了这些，我还开发了一些工程化的开发工具来提升部门的整体开发效率，例如基于 Gulp 的开发工作流，以及下半年还开展了内部学习 Vue ，并成功把部分项目的技术栈转移到 Vue 上。</p>
<p>至此，新的团队经过近一年的磨合，同事之间的默契，整体的作战能力达到合格要求。当然也有不足的，就是话少，似乎是继承了我的“基因”，希望新的一年里能调整一下，毕竟活跃的氛围会让人更有干劲。</p>
<h2 id="个人"><a class="header-anchor" href="#个人"></a>个人</h2>
<p>因为整体技术环境的升级，不管是公司，还是培训机构，前端技术的重心都在从 jQuery 转向以 MVVM 为核心的三大技术框架。这一点在我年初进行面试招聘的时候感触颇深，部分求职者在了解到公司还是以 jQuery 为核心技术栈后直接表示不愿来上班，使得我不得不把技术栈升级的事提上日程。</p>
<p>所以在新团队基本稳定后，下半年我开始自学 Vue ，大概花了一个月的时间，掌握了基本语法，之后还对内部的几个项目进行了重构，在我觉得自己没问题后，也开展了几次内部学习，最终效果还算理想，在年底最后几个项目中，成功在 2 个项目中把技术栈转移到 Vue 上了，算是把年初立下的 flag 给实现了。</p>
<p>当然这只是其中一件小事，放眼整个 2018 年，这是我比较幸福的一年，摆脱了实际项目开发，我有更多的时间来自由安排我的工作内容。例如这一年我通过 HBuilder 熟悉了 Web APP 的开发，并开发出内部使用的 OA 办公 App ，还学习了 Electron 桌面应用程序的开发，参考微信桌面版 UI 简单做了一个 OA 办公的 demo 。另外通过管理项目进度，了解同事在项目开发中遇到的痛点，优化出一套基于 Gulp 的开发工作流，还有部分公司自有产品的研发等等。</p>
<p>但从管理层面来看，则是我摸黑探路的一年，因为我并不是一个有丰富经验的管理者，所以这一年我自问最多的 2 个问题就是：</p>
<ol>
<li>我希望我是个什么样的人？</li>
<li>我希望我的上级是什么样的人？</li>
</ol>
<p>第一条，简单点说就是以身作则，我是个什么样的人，带出来的队伍就是什么样的队伍，下属更多时候是看领导的做事风格，所以我在要求下属一些事情的时候，下意识的会先对照下自己，如果自己都做不到，也不好意思开口要求别人。</p>
<p>第二条，我经常会觉得和下属不走心，不知道他们在想什么，这也是职场的常见现象。我的解决办法就是换位思考，我会幻想如果可以定制一个我的上级，我会怎样搭配他的“属性”，然后再把这些“属性”当做自己的目标去完成，或许就能解决这类的问题。</p>
<h2 id="结尾"><a class="header-anchor" href="#结尾"></a>结尾</h2>
<blockquote>
<p>并没有结尾，而是新的开始……</p>
</blockquote>
<p>自从 25 岁之后，我就发觉时间过得贼快，以至于我都在朋友圈感慨「如果一天有 48 小时，人可以不用睡觉就好了」。 2019 年对我最大的挑战就是「<code>取舍</code>」，合理的安排时间做更有意义的事，对于马上就 30 岁的我来说尤其重要，必须得在这两年做出些成绩来了。</p>
<p>最后送上一首王以太的《时间是金》，就先到这吧~ ❤️</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="370" height="86" src="//music.163.com/outchain/player?type=2&id=1306498829&auto=1&height=66"></iframe>]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>年终小结</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 使用 HBuilder 打包 APP</title>
    <url>/posts/32753007/</url>
    <content><![CDATA[<div class="note info">
            <p>官方已经把 HBuilder 正式升级为 HBuilder X 了，在测试途中发现 HBuilder X 打包 IOS 应用失败，也没有提示任何失败原因，但用 HBuilder 打包则可以成功打包，所以本文还是基于 HBuilder 进行演示，如果你是使用 HBuilder X ，部分设置操作可对照参考。</p>
          </div>
<h2 id="准备一个-Vue-项目"><a class="header-anchor" href="#准备一个-Vue-项目"></a>准备一个 Vue 项目</h2>
<p>依托 Vue CLI ，我们先快速初始化一个 Vue 的项目，这里我已经创建好并成功运行了。</p>
<p><img src="https://i.loli.net/2018/12/26/5c22e9e6a72e6.png" alt=""></p>
<a id="more"></a>
<h2 id="真机调试"><a class="header-anchor" href="#真机调试"></a>真机调试</h2>
<p>这会我们打开 HBuilder ，将项目导入进来。</p>
<p><img src="https://i.loli.net/2018/12/26/5c22f11aaa21b.png" alt=""></p>
<p>但是这时候我们的项目还不是 APP 项目，可以看到，如果是 APP 项目，项目名前面的图标应该是“A”，而不是“W”，所以我们要右键项目，选择“转换成移动App”。</p>
<p><img src="https://i.loli.net/2018/12/26/5c22f2f8617f3.png" alt=""></p>
<p>这时候，项目目录下多了个 <code>manifest.json</code> 文件，双击打开，能看到很多配置项，可以大致了解一下，但现在我们先不用都熟悉，我们只需将刚才部署的 Vue 能在真机上运行起来就可以，那要怎么做呢？</p>
<p>其实很简单，只需修改入口页面的配置就行，默认入口页面指向的是 <code>index.html</code> ，我们只需将入口页面修改成本地的地址就可以，当然 <code>localhost</code> 要替换成本机 IP 。</p>
<p><img src="https://i.loli.net/2018/12/26/5c22f3c0e5fbd.png" alt=""></p>
<p>这会我们连上手机，确保手机和电脑处于同个局域网下，点击“运行-真机运行”，就能看到我们连上的手机了，点击第一个， HBuilder 就会开始进行打包并在手机上安装调试用的 APP 了。</p>
<p><img src="https://i.loli.net/2018/12/26/5c22f80cc0190.png" alt=""></p>
<div class="note warning">
            <p>可以尝试在手机浏览器里直接访问入口页面的地址，如果访问不了，则需要关闭防火墙，这点针对 Windows 用户。</p>
          </div>
<p>现在我们修改下代码，是不是发现 APP 上没有即时更新，需要退出 APP 在进来才能刷新，关于这个问题，我也没找到解决办法，所以我建议还是在浏览器上做开发调试，因为本身其实还是 Web 项目，真机调试一般做为正式发布前最后一次测试，针对手机上做一些微调的处理。</p>
<h2 id="打包发布"><a class="header-anchor" href="#打包发布"></a>打包发布</h2>
<p>打包发布就很简单了，首先将 Vue 项目打包，会在项目目录下生成 <code>dist/</code> 文件夹，然后到 <code>manifest.json</code> 里把入口页面修改成 <code>dist/index.html</code> ，就可以进行打包（发行）了。</p>
<p>HBuilder 打包是云端打包，会把资源上传到 HBuilder 的服务器，打包好后会自动下载到项目目录里，我们无需关心打包过程，唯一需要注意的是， IOS 打包需要准备 profile 文件、私钥证书和私钥密码，而 Andriod 可以使用 DCloud 的公用证书。</p>
<h2 id="热更新"><a class="header-anchor" href="#热更新"></a>热更新</h2>
<p>热更新其实就是在线升级，配合资源升级包可以实现 APP 升级而无需重新安装，具体实现可以查看我之前写的文章《<a href="/posts/d8a12da8/" title="Web APP 在线升级更新">Web APP 在线升级更新</a>》。</p>
<h2 id="HTML5"><a class="header-anchor" href="#HTML5"></a><a href="http://www.html5plus.org/doc/h5p.html" target="_blank" rel="noopener">HTML5+</a></h2>
<p>HTML5+ 是一套 API 标准，它能让 Web 页面实现原生 APP 的水平。</p>
<p>这里我们做一个简单的演示，实现一个 APP 常见的功能，就是需要按两次返回键才退出 APP 。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'plusready'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 监听返回按键</span></span><br><span class="line">    <span class="keyword">let</span> now = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> time = <span class="literal">null</span>;</span><br><span class="line">    plus.key.addEventListener(<span class="string">'backbutton'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        time = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (now) &#123;</span><br><span class="line">            now = <span class="literal">false</span>;</span><br><span class="line">            plus.runtime.quit();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            now = <span class="literal">true</span>;</span><br><span class="line">            plus.nativeUI.toast(<span class="string">'再按一次退出'</span>);</span><br><span class="line">            time = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                now = <span class="literal">false</span>;</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>其中以 <code>plus.</code> 开头的都是 HTML5+ 提供的接口，需要注意的是， HTML5+ 的接口必须在 plusready 后才能运行，我们可以写个单独的文件 <code>html5plus.js</code> 用初始化 plusready 。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isplusReady = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">Vue.mixin(&#123;</span><br><span class="line">    computed: &#123;</span><br><span class="line">        plusReady() &#123;</span><br><span class="line">            <span class="keyword">return</span> isplusReady;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'plusready'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    isplusReady = <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>然后在 <code>main.js</code> 里引入。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./html5plus.js'</span>;</span><br></pre></td></tr></table></figure>
<p>这样在页面里我们就可以通过 <code>this.plusReady</code> 来判断 plusready 是否准备好。</p>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><a href="https://juejin.im/post/5b5595f7f265da0f700710ba" target="_blank" rel="noopener">webpack + Vue + Hbuilder 打包成App，混合app开发，一个人搞定</a></li>
<li><a href="http://ask.dcloud.net.cn/article/13214" target="_blank" rel="noopener">让Vue-cli 构建SPA 搭上 HTML5+的顺风车</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue 相关</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>hbuilder</tag>
        <tag>app</tag>
        <tag>打包</tag>
        <tag>热更新</tag>
      </tags>
  </entry>
  <entry>
    <title>初识 ESLint</title>
    <url>/posts/97bfd00e/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2018/12/12/5c10704ee5e4d.png" alt=""></p>
<p>昨天在学习 <a href="https://github.com/PanJiaChen/vue-element-admin" target="_blank" rel="noopener">vue-element-admin</a> 的时候发现一个神奇的现象，因为我的编码习惯是使用 4 个空格做为缩进，但在 VS Code 里编辑 vue-element-admin 项目的时候，发现一保存，编辑器就会对代码进行格式化（我以 4 个空格缩进写的代码会被格式化成 2 个空格缩进），这个“黑科技”突然就引起了我的<s>性趣</s>兴趣，于是一路顺藤摸瓜，发现了今天的主角 —— <a href="http://eslint.cn/" target="_blank" rel="noopener">ESLint</a></p>
<a id="more"></a>
<h2 id="什么是-ESLint"><a class="header-anchor" href="#什么是-ESLint"></a>什么是 ESLint</h2>
<p>官方的一句话介绍：<strong>可组装的 JavaScript 和 JSX 检查工具</strong>。简单的说，它可以帮我们检测代码，小到检测代码是否有错误，大到检测代码风格是否符合规范。</p>
<p>要知道，代码风格这事，一个人好搞定，自己想怎么来就怎么来，可一旦项目大了，需要多人协作开发就比较麻烦了。拿我司的情况来说，虽然我也编写了代码风格规范的文档，但实际落地有一定的学习成本，需要培养一种新的编码风格的习惯，如果本身原有习惯较差，那学习成本就越大。其次还有各种其他因素也可能导致代码风格无法统一，比如偷懒了，忘记了，跨编辑器等等。</p>
<p>所以在我看来， ESLint 的出现极大简化了统一代码风格这事，让程序员能更专注业务。</p>
<h2 id="安装-ESLint"><a class="header-anchor" href="#安装-ESLint"></a>安装 ESLint</h2>
<p>夸了这么多，那就安装起来用一用吧，首先就是全局安装 ESLint ：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> i -g eslint</span><br></pre></td></tr></table></figure>
<p>安装好后，进入我们的项目根目录，进行下初始化：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">eslint <span class="comment">--init</span></span><br></pre></td></tr></table></figure>
<p>ESLint 会提示“How would you like to configure ESLint?”，我们选择“Answer questions about your style”，然后接下来就是根据它的问题进行初始化的配置。</p>
<p><img src="https://i.loli.net/2018/12/12/5c1081827ecdb.png" alt=""></p>
<p>配置好后，会在项目根目录下创建一个 <code>.eslintrc.js</code> 文件，这个就是 ESLint 的配置文件了，后面我们还要修改这个文件，增加更多检测规则。</p>
<h2 id="配置"><a class="header-anchor" href="#配置"></a>配置</h2>
<p>打开 <code>.eslintrc.js</code> 文件，找到 <code>rules</code> 属性，这部分就是主要配置的部分，可以看到 <code>rules</code> 属性里已经有一部分规则了，这些是在初始化的时候生成的，但这部分规则肯定是不够的，这时候我们就要去<a href="http://eslint.cn/docs/rules/" target="_blank" rel="noopener">官方文档</a>里查阅有提供哪些检测规则，把需要的添加进来，形成一套自己/公司的代码规范。</p>
<p>例如，我想增加 <a href="http://eslint.cn/docs/rules/block-spacing" target="_blank" rel="noopener">block-spacing</a>（禁止或强制在代码块中开括号前和闭括号后有空格）这条规则，那就在 <code>.eslintrc.js</code> 文件的 <code>rules</code> 属性里增加一项：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">"block-spacing"</span>: [</span><br><span class="line">    <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"always"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>其中 error 代表规则是否开启及错误级别，一共有 3 个可选项：</p>
<ul>
<li><code>&quot;off&quot;</code> 或 <code>0</code> - 关闭规则</li>
<li><code>&quot;warn&quot;</code> 或 <code>1</code> - 开启规则，使用警告级别的错误：warn (不会导致程序退出)</li>
<li><code>&quot;error&quot;</code> 或 <code>2</code> - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)</li>
</ul>
<p>更多规则移至：<a href="http://eslint.cn/docs/rules/" target="_blank" rel="noopener">官方文档</a></p>
<h2 id="ESLint-Vue"><a class="header-anchor" href="#ESLint-Vue"></a>ESLint &amp; Vue</h2>
<p>ESLint 本身不支持 Vue 的语法的检测，所以我们需要在项目里添加一个 <a href="https://vuejs.github.io/eslint-plugin-vue/" target="_blank" rel="noopener">eslint-plugin-vue</a> 依赖，让 ESLint 懂 Vue 。</p>
<p>安装好后，打开 <code>.eslintrc.js</code> 文件修改 <code>extends</code> 属性：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">extends: [</span><br><span class="line">    <span class="string">"plugin:vue/essential"</span>,</span><br><span class="line">    <span class="string">"eslint:recommended"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>eslint-plugin-vue 提供了 4 种 Vue 规则预设，分别是：</p>
<ol>
<li><code>&quot;plugin:vue/base&quot;</code> - 基本规则</li>
<li><code>&quot;plugin:vue/essential&quot;</code> - 错误预防</li>
<li><code>&quot;plugin:vue/strongly-recommended&quot;</code> - 提高可读性</li>
<li><code>&quot;plugin:vue/recommended&quot;</code> - 最完整，包含所有规则</li>
</ol>
<p>4 种规则预设内容依次递增，也就是说，第 2 种包含了第 1 种的所有规则，第 3 种包含了前 2 种的所有规则。</p>
<p>这里我用的是第 2 种（官方推荐是第 3 种），选择好预设后，我们还可以针对性的设置具体某个规则，这样就可以修改预设里某个规则，也可以增加预设里没有的规则，实现自定义。</p>
<p>具体就不展开介绍了，配置的方法和 ESLint 一样，规则文档目录<a href="https://vuejs.github.io/eslint-plugin-vue/rules/" target="_blank" rel="noopener">在这</a>。</p>
<h2 id="ESLint-VS-Code"><a class="header-anchor" href="#ESLint-VS-Code"></a>ESLint &amp; VS Code</h2>
<p>终于到最后一步了，我们在 VS Code 里搜索并安装 <a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" target="_blank" rel="noopener">ESLint</a> 扩展，安装好后打开 User Settings ，将下面这段配置复制到里面：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">"eslint.validate"</span>: [</span><br><span class="line">    <span class="string">"javascript"</span>,</span><br><span class="line">    <span class="string">"javascriptreact"</span>,</span><br><span class="line">    <span class="string">"vue-html"</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"language"</span>: <span class="string">"vue"</span>,</span><br><span class="line">        <span class="string">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="string">"eslint.run"</span>: <span class="string">"onSave"</span>,</span><br><span class="line"><span class="string">"eslint.autoFixOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"eslint.packageManager"</span>: <span class="string">"yarn"</span></span><br></pre></td></tr></table></figure>
<p>这样就都准备好了，我们打开一个 js 文件，或者 vue 文件，写一段不符合规范的代码并保存，然后就是见证奇迹的时刻。</p>
<h2 id="最后"><a class="header-anchor" href="#最后"></a>最后</h2>
<p>如果你想看下我的 ESLint 配置，可以到下面这个项目里查看，这个项目是我整理的一套 Vue 的开发工作流，如果感兴趣，也欢迎你来了解下。</p>
<script src='https://gitee.com/eoner/vue-automation/widget_preview'></script>
<style>
.pro_name a{color: #4183c4;}
.osc_git_title{background-color: #fff;}
.osc_git_box{background-color: #fff;}
.osc_git_box{border-color: #E3E9ED;}
.osc_git_info{color: #666;}
.osc_git_main a{color: #9B9B9B;}
</style>
]]></content>
      <categories>
        <category>Web 综合</category>
      </categories>
      <tags>
        <tag>ESLint</tag>
        <tag>代码检测</tag>
        <tag>代码风格</tag>
        <tag>自动修复</tag>
      </tags>
  </entry>
  <entry>
    <title>Axios 封装小记</title>
    <url>/posts/1059e373/</url>
    <content><![CDATA[<blockquote>
<p>开发思路远比开发流程及工具更重要。</p>
</blockquote>
<p>开发中一个很重要的思想就是工程化，在我理解，工程化落实到实际开发中，最直观的体现就是封装， js 我们会封装函数库， sass 我们会封装常用的 <code>@mixin</code> ，等等。</p>
<p>这次就针对 Vue 中使用的 Axios ，对它进行一次封装。</p>
<a id="more"></a>
<h2 id="为什么要封装-Axios"><a class="header-anchor" href="#为什么要封装-Axios"></a>为什么要封装 Axios</h2>
<p>一个 Web 应用离不开 HTTP 请求，早期用 jQuery <code>$.ajax()</code> 的时候，我就会在 <code>$.ajax()</code> 外面再封装一层，主要做的处理有统一接口地址和返回状态处理。</p>
<p>因为不这么做，那在每个业务模块里使用 <code>$.ajax()</code> 的时候，就需要分别去处理，代码复用性很低，如果是比较大的项目，多人协作开发，后期维护会非常可怕。</p>
<p>所以即便是现在换了 Vue 开发， <code>$.ajax()</code> 换成了 Axios ，也还是离不开封装，下面就看下我是怎么封装 Axios 的吧。</p>
<h2 id="封装-Axios"><a class="header-anchor" href="#封装-Axios"></a>封装 Axios</h2>
<p>直接看代码吧。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'@/router/index'</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'@/store/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> api = axios.create(&#123;</span><br><span class="line">    baseURL: <span class="string">''</span>,</span><br><span class="line">    timeout: <span class="number">10000</span>,</span><br><span class="line">    responseType: <span class="string">'json'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// request 拦截</span></span><br><span class="line">api.interceptors.request.use(<span class="function"><span class="params">request</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (request.method == <span class="string">'post'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.data <span class="keyword">instanceof</span> FormData) &#123;</span><br><span class="line">            <span class="keyword">if</span> (store.getters[<span class="string">'token/isLogin'</span>]) &#123;</span><br><span class="line">                <span class="comment">// 如果是 FormData 类型（上传图片）</span></span><br><span class="line">                request.data.append(<span class="string">'token'</span>, store.state.token);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 带上 token</span></span><br><span class="line">            <span class="keyword">if</span> (request.data == <span class="literal">undefined</span>) &#123;</span><br><span class="line">                request.data = &#123;&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 从 vuex 里获取 token 数据</span></span><br><span class="line">            <span class="keyword">if</span> (store.getters[<span class="string">'token/isLogin'</span>]) &#123;</span><br><span class="line">                request.data.token = store.state.token.token;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 序列化 POST 类型的数据</span></span><br><span class="line">            request.data = qs.stringify(request.data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 带上 token</span></span><br><span class="line">        <span class="keyword">if</span> (request.params == <span class="literal">undefined</span>) &#123;</span><br><span class="line">            request.params = &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从 vuex 里获取 token 数据</span></span><br><span class="line">        <span class="keyword">if</span> (store.getters[<span class="string">'token/isLogin'</span>]) &#123;</span><br><span class="line">            request.params.token = store.state.token.token;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> request;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// response 拦截</span></span><br><span class="line">api.interceptors.response.use(</span><br><span class="line">    response =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (response.data.error != <span class="string">''</span>) &#123;</span><br><span class="line">            <span class="comment">// 鉴权，如果未登录则跳转到登录页</span></span><br><span class="line">            <span class="keyword">if</span> (response.data.status == <span class="number">0</span>) &#123;</span><br><span class="line">                router.push(&#123;</span><br><span class="line">                    path: <span class="string">'/login'</span>,</span><br><span class="line">                    query: &#123;</span><br><span class="line">                        redirect: router.currentRoute.fullPath</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 错误提示，可更换其他消息提示组件</span></span><br><span class="line">            swal(&#123;</span><br><span class="line">                icon: <span class="string">'error'</span>,</span><br><span class="line">                title: <span class="string">'系统错误'</span>,</span><br><span class="line">                text: response.data.error,</span><br><span class="line">                timer: <span class="number">2000</span>,</span><br><span class="line">                button: <span class="literal">false</span></span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(response.data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(response.data);</span><br><span class="line">    &#125;,</span><br><span class="line">    error =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(error);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; axios, api &#125;;</span><br></pre></td></tr></table></figure>
<p>可以看到 request 拦截器主要就做了一件事，就是如果 token 存在，则在请求里把 token 带上。 response 拦截器也只做一件事，就是在获取到返回参数后先判断接口是否报错，并给出错误提示，如果错误是未登录，则跳转到登录页。</p>
<h2 id="使用"><a class="header-anchor" href="#使用"></a>使用</h2>
<p>在 main.js 里直接引入，并将 api 和 axios 挂载到 Vue 的原型上，这样在页面上就可以通过 <code>this.$api</code> 和 <code>this.$axios</code> 直接使用了，无需再引入 api 文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; api, axios &#125; <span class="keyword">from</span> <span class="string">'./api'</span>;</span><br><span class="line">Vue.prototype.$api = api;</span><br><span class="line">Vue.prototype.$axios = axios;</span><br></pre></td></tr></table></figure>
<p>这里你可能会有疑问，不是已经封装了 axios ，为什么还要把 axios 挂载到 Vue 的原型上？原因很简单，因为我需要用到 axios 并发函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$axios</span><br><span class="line">    .all([</span><br><span class="line">        <span class="keyword">this</span>.$api.get(<span class="string">'banner/list'</span>, &#123;</span><br><span class="line">            params: &#123;</span><br><span class="line">                id: <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">this</span>.$api.get(<span class="string">'banner/list'</span>, &#123;</span><br><span class="line">            params: &#123;</span><br><span class="line">                id: <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ])</span><br><span class="line">    .then(</span><br><span class="line">        <span class="keyword">this</span>.$axios.spread(<span class="function">(<span class="params">acct, perms</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 请求之后处理</span></span><br><span class="line">        &#125;)</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>
<h2 id="最后"><a class="header-anchor" href="#最后"></a>最后</h2>
<p>以前整过一套 Gulp 的工程化工作流，现在换到 Vue 了，虽然两者不是同一类型的产物，但我还是尝试也整了一套 Vue 的开发工作流。</p>
<p>这篇文章封装的 Axios 自然也在其中，当然还有其他特性，比如更完整的鉴权体系、精灵图、页面刷新等等，不了解一下吗？</p>
<script src='https://gitee.com/eoner/vue-automation/widget_preview'></script>
<style>
.pro_name a{color: #4183c4;}
.osc_git_title{background-color: #fff;}
.osc_git_box{background-color: #fff;}
.osc_git_box{border-color: #E3E9ED;}
.osc_git_info{color: #666;}
.osc_git_main a{color: #9B9B9B;}
</style>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<p><a href="https://juejin.im/post/5b55c118f265da0f6f1aa354" target="_blank" rel="noopener">vue 中 Axios 的封装和 API 接口的管理</a></p>
]]></content>
      <categories>
        <category>Web 综合</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>axios</tag>
        <tag>封装</tag>
        <tag>api</tag>
        <tag>接口</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 组件传递对象的坑</title>
    <url>/posts/e65fe6c/</url>
    <content><![CDATA[<p>近期做的一个项目，涉及到一个类似于 dialog 的组件，由于传递的数据比较多，为了偷懒，把部分可选数据统一放到一个对象变量里，打算用对象直接传递，于是，坑就来了。</p>
<a id="more"></a>
<h2 id="场景重现"><a class="header-anchor" href="#场景重现"></a>场景重现</h2>
<p>为了方便大家理解，这里我写了一个简单的 demo ：</p>
<iframe src="https://codesandbox.io/embed/y2wrw8vlwz?view=preview" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe>
<p>传递的数据很简单，就是一个 <code>info</code> 的对象，里面有 <code>title</code> 和 <code>content</code> 两个属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        info: &#123;</span><br><span class="line">            title: <span class="string">"title"</span>,</span><br><span class="line">            content: [<span class="string">"item1"</span>, <span class="string">"item2"</span>, <span class="string">"item3"</span>, <span class="string">"item4"</span>, <span class="string">"item5"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在组件里，我将 <code>info</code> 对象里的 <code>content</code> 数组删除最后一个，然后显示出来。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">    <span class="keyword">this</span>.info.content.splice(<span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来可以点击 demo 里的 <code>Open Dialog</code> 按钮，发现问题了没？对咯，子组件里更新数据，把父组件里的也更新了，按照我这个 demo ，每次点击，父组件里的 <code>content</code> 数组就会少一个，多点击几次后，数组就变空了。</p>
<h2 id="解决方案"><a class="header-anchor" href="#解决方案"></a>解决方案</h2>
<p>其实问题的核心和 Vue 并没有太多关系，这里涉及到的 Javascript 的基础知识，就是值传递和引用传递， Object 和 Array 直接赋值是引用传递，这也就是为什么在子组件里修改，会导致父组件里也更新的原因。</p>
<p>既然明白问题的原因，那解决起来也就很容易了，比如下面这个深拷贝函数，在子组件里处理引用传递的数据前，先进行一次深拷贝。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">deepcopy(source) &#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        result[key] = <span class="keyword">typeof</span> source[key] === <span class="string">'object'</span> ? deepcopy(source[key]) : source[key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info">
            <p>数据进行深拷贝后，似乎就脱离 Vue 的监控了，对数据进行修改， DOM 不会实时更新，我的解决办法的每次修改数据后再进行依次深拷贝，覆盖原数据，不知道各位看官有什么更好的办法？</p>
          </div>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><a href="https://blog.csdn.net/shuaizi96/article/details/72652248" target="_blank" rel="noopener">vue组件传递对象中实现单向绑定的方法</a></li>
<li><a href="https://molunerfinn.com/vue-components" target="_blank" rel="noopener">Vue组件的三种调用方式</a> （本文 demo 里的组件采用了第二种调用方式，也就是直接在 js 里调用）</li>
</ul>
]]></content>
      <categories>
        <category>Vue 相关</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue组件</tag>
        <tag>传递对象</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 实现单独页面设置 body 样式</title>
    <url>/posts/ddffb6ac/</url>
    <content><![CDATA[<p>在用 Vue 写 demo 的时候发现可能会遇到这样的需求，就是针对不同的页面， <code>&lt;body&gt;</code> 的样式需要做一些变化。比如不同页面设置不同的背景色，但这就碰到一个问题，如果直接在页面里设置 body 的样式，页面并不会生效，如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>page<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">body &#123;</span><br><span class="line"><span class="css">    <span class="selector-tag">backgroud-color</span>: <span class="selector-id">#ff0</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>网上搜索了一圈，发现解决办法就是通过 js 是设置 body 的样式，也就是在 created() 中添加样式，然后在 beforeDestory() 中移除样式，说干就干，立马就写了一个 demo 。</p>
<iframe src="https://codesandbox.io/embed/mq259v9q89?view=preview" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe>
<p>我做了 3 个页面，第一个页面无任何样式，第二个页面给 body 设置了字体大小，第三个页面同时给 body 设置了字体大小和背景颜色。但在实际效果里出现了一点问题，当我从第一个页面切换到第二个页面，一切正常，然后再从第二个页面切换到第三个页面，发现第三个页面的样式无法生效（同样的问题也出现在第一个页面 -&gt; 第三个页面 -&gt; 第二个页面）。</p>
<p>这是为什么呢？为什么第一次页面切换能成功，第二次就不行了？这时候我想起了 Vue 的生命周期：</p>
<p><img src="https://i.loli.net/2018/10/22/5bcd282199370.png" alt=""></p>
<p>这是 Vue 官网上提供的一张单页面的生命周期图，可我对照了一遍之后，还是没发现问题在哪。没办法，只能再写一个 demo ，实际还原多页面下，页面之间的生命周期执行顺序：</p>
<iframe src="https://codesandbox.io/embed/040mp8j69l?view=preview" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe>
<p>这个 demo 写出来后，真相立马大白了，原来页面在跳转时，在跳转页面执行到 mounted() 前，会先执行原页面的 beforeDestory() 和 destroyed() 方法，然后再执行跳转页面的 mounted() 。</p>
<p>这就解释了为什么第一次跳转页面都是正常，因为第一个页面没有做任何样式操作。然而第二次跳转页面，不管是从第二个页面跳转到第三个页面，还是从第三个页面跳转到第二个页面，因为跳转页面的 created() 会在原页面的 beforeDestory() 之前执行，所以跳转页面设置 body 样式的代码，会在原页面的 beforeDestory() 里一起被清空掉。</p>
<p>了解这一特性后，解决起来就很简单的，只需要把原先写在 created() 里的代码，放到 mounted() 里就行，这样就能确保设置样式的代码是在上一个页面清空样式代码后执行，最终效果如下：</p>
<iframe src="https://codesandbox.io/embed/n99znjp44l?view=preview" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe>
<p>关于这一点特性，我回去重新看了下 Vue 的文档，发现确实没有任何地方有提到，还以为自己又看漏了呢 😛</p>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><a href="https://segmentfault.com/q/1010000008828013" target="_blank" rel="noopener">vue 单独页面 body css 设置如何设置！</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue 相关</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>vue-router</tag>
        <tag>body样式</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 组件发布到 NPM 全记录</title>
    <url>/posts/6606c443/</url>
    <content><![CDATA[<p>虽然学习 Vue 没多久，但按捺不住我这颗想为社区贡献的心，一直就想着有机会能发布一个自己的组件，但搜遍各种教程，发现起步操作几乎都是 <code>vue init webpack-simple</code> ，这是 Vue CLI 2.x 的语法，而我本地已经早已安装了 Vue CLI 3，难道要降级才能发布组件？不存在的，这辈子不可能降级的，那只能硬着头皮慢慢摸索了……</p>
<a id="more"></a>
<h1>初始化项目</h1>
<p>我们先执行 <code>vue ui</code> 启动 Vue CLI 的图形化界面，然后再创建一个新项目，就先取名叫 my-first-component ，预设选择默认。</p>
<p><img src="https://i.loli.net/2018/10/11/5bbebfa1f0029.png" alt=""></p>
<p><img src="https://i.loli.net/2018/10/11/5bbebfdeb62fb.png" alt=""></p>
<p>初始化完毕后就可以看到刚创建的项目了，我们先什么都不做，到“任务”里先把项目运行起来。</p>
<p><img src="https://i.loli.net/2018/10/11/5bbec10f722ea.png" alt=""></p>
<p>如果一切正常，运行成功后访问 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 会看到以下界面：</p>
<p><img src="https://i.loli.net/2018/10/11/5bbec169b092d.png" alt=""></p>
<h1>编写组件</h1>
<p>这一步就是我们熟悉的 Vue 开发了，这里我就简单写一个展示数组的组件用于演示。</p>
<p>首先删除 component 目录下默认生成的 HelloWorld.vue 文件，并创建 MyFirstComponent.vue 文件，然后写入下面代码：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in items"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">export default &#123;</span></span><br><span class="line"><span class="xml">    props: &#123;</span></span><br><span class="line"><span class="xml">        items: Array</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="xml">ul&#123;</span></span><br><span class="line"><span class="xml">    background-color: pink;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">ul li&#123;</span></span><br><span class="line"><span class="xml">    list-style: decimal;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>接着在组件同目录下创建 index.js ，做为组件的入口文件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> MyFirstComponent <span class="keyword">from</span> <span class="string">'./MyFirstComponent.vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyFirstComponent</span><br></pre></td></tr></table></figure>
<p>最后修改 App.vue 文件，看看组件是否可以调用成功。</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="xml"><span class="tag">&lt;<span class="name">MyFirstComponent</span> <span class="attr">:items</span>=<span class="string">"cityList"</span>&gt;</span><span class="tag">&lt;/<span class="name">MyFirstComponent</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">import MyFirstComponent from './components/index.js'</span></span><br><span class="line"></span><br><span class="line"><span class="xml">export default </span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">   <span class="built_in"> name</span>: <span class="string">'app'</span>,</span></span><br><span class="line"><span class="xquery">    components: &#123;</span></span><br><span class="line"><span class="xquery">        MyFirstComponent</span></span><br><span class="line"><span class="xquery">    &#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">    data() </span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="xquery">            cityList: [</span></span><br><span class="line"><span class="xquery">                <span class="string">'北京'</span>, <span class="string">'上海'</span>, <span class="string">'广州'</span>, <span class="string">'深圳'</span></span></span><br><span class="line"><span class="xquery">            ]</span></span><br><span class="line"><span class="xquery">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>能正常运行，那这个组件就编写完成了。</p>
<p><img src="https://i.loli.net/2018/10/11/5bbee894dfa10.png" alt=""></p>
<h2 id="打包组件"><a class="header-anchor" href="#打包组件"></a>打包组件</h2>
<p>因为 Vue CLI 图形界面里的 build 任务是打包整个应用，而我们希望打包出是库的形式，所以先打开 package.json ，修改 script 里的内容为：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"serve"</span>: <span class="string">"vue-cli-service serve"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"vue-cli-service build"</span>,</span><br><span class="line">    <span class="attr">"lint"</span>: <span class="string">"vue-cli-service lint"</span>,</span><br><span class="line">    <span class="attr">"build-lib"</span>: <span class="string">"vue-cli-service build --target lib --name MyFirstComponent ./src/components/index.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在项目根目录新建一个 vue.config.js 文件，写入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    css: &#123;</span><br><span class="line">        extract: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为打包出来的库会将 css 单独提取到 css 文件里，设置 extract 为 false 则会强制内联。</p>
<p>现在我们回到 Vue CLI 图形界面里，就会看到这一条刚才新增的任务，点击运行，最终会在根目录生成好打包出来的文件。</p>
<p><img src="https://i.loli.net/2018/10/11/5bbef1401d257.png" alt=""></p>
<p><img src="https://i.loli.net/2018/10/12/5bbffb8880317.png" alt=""></p>
<h2 id="发布组件"><a class="header-anchor" href="#发布组件"></a>发布组件</h2>
<h3 id="准备工作"><a class="header-anchor" href="#准备工作"></a>准备工作</h3>
<p>发布前需要做一些准备工作，首先要配置我们的 package.json 文件。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"my-first-vue-component"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">    <span class="attr">"private"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"main"</span>: <span class="string">"./dist/MyFirstComponent.umd.min.js"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td>组件名字，确保不会和别人的组件重名，可在 <a href="https://www.npmjs.com/" target="_blank" rel="noopener">NPM</a> 上测试搜索</td>
</tr>
<tr>
<td style="text-align:center">version</td>
<td>版本号，默认是 0.1.0 ，之后每次发布，都要修改版本号</td>
</tr>
<tr>
<td style="text-align:center">private</td>
<td>设置为 false 才能发布</td>
</tr>
<tr>
<td style="text-align:center">main</td>
<td>入口文件，指向我们打包好的 js 文件</td>
</tr>
</tbody>
</table>
<p>然后打开 .gitignore 文件，删掉 <code>dist/</code> ，要不然发布的时候 dist 目录会被忽略掉不被发布到 <a href="https://www.npmjs.com/" target="_blank" rel="noopener">NPM</a> 上。</p>
<p>接着打开 <a href="http://README.md" target="_blank" rel="noopener">README.md</a> 给我们的组件写一份完整的介绍吧，方便别人了解我们的组件是做什么的，以及怎么使用。</p>
<p>最后我们访问 <a href="https://www.npmjs.com/" target="_blank" rel="noopener">NPM</a> 并注册好自己的账号，接下来就可以开始发布了。</p>
<h3 id="发布"><a class="header-anchor" href="#发布"></a>发布</h3>
<p>在项目根目录下运行 <code>npm login</code> 进行登录，登录成功后再执行 <code>npm publish</code> 就会开始发布操作。</p>
<p><img src="https://i.loli.net/2018/10/12/5bc0059be1511.png" alt=""></p>
<p>如果 NPM 全局已经替换成淘宝的镜像源后，登录和发布会失败，这时候可以在命令后面加上 <code>--registry http://registry.npmjs.org</code> 即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm login --registry http://registry.npmjs.org</span><br><span class="line">npm publish --registry http://registry.npmjs.org</span><br></pre></td></tr></table></figure>
<div class="note info">
            <p>登录成功后，登录信息会存放于全局，也就是说，下次更新发布组件，不需要再重新登录，直接执行 <code>npm publish</code> 即可。</p><p>通过 <code>npm whoami</code> 可查看当前登录账号名。</p>
          </div>
<h2 id="安装测试"><a class="header-anchor" href="#安装测试"></a>安装测试</h2>
<p>虽然在本地测试过没问题，但最好还是实际安装测试一下。我们在项目根目录下执行 <code>npm install my-first-vue-component -S</code> ，安装成功后，打开我们的 App.vue 文件，将组件引入修改为 <code>import MyFirstComponent from 'my-first-vue-component'</code> ，访问一下页面，大功告成！</p>
<h2 id="最后"><a class="header-anchor" href="#最后"></a>最后</h2>
<p>其实安装了 Vue CLI 3 也可以使用旧版 <code>vue init</code> 功能，需要全局安装一个桥接工具，这是我在开发完组件后才发现的资料，果然还是文档没看仔细。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">npm install -g <span class="meta">@vue</span>/cli-<span class="keyword">init</span></span><br><span class="line">vue <span class="keyword">init</span> webpack my-project</span><br></pre></td></tr></table></figure>
<p>最后，以上的整个从开发到发布，都是一次练习操作，而真正意义上由我开发的一个 Vue 组件是这个： <a href="https://www.npmjs.com/package/vue-clicaptcha" target="_blank" rel="noopener">vue-clicaptcha</a> ，它是由原先 jQuery 版本移植过来的，搭配 PHP 后端一起使用，欢迎大家体验。</p>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><a href="https://blog.csdn.net/baidu_25464429/article/details/81153798" target="_blank" rel="noopener">创建, 发布自己的 Vue UI 组件库</a></li>
<li><a href="https://blog.csdn.net/ns2250225/article/details/79800671" target="_blank" rel="noopener">【Vue】编写一个Vue插件并发布到NPM</a></li>
<li><a href="https://blog.csdn.net/Fundebug/article/details/80620683" target="_blank" rel="noopener">如何使用@vue/cli 3.0在npm上创建，发布和使用你自己的Vue.js组件库</a></li>
<li><a href="https://www.jb51.net/article/137725.htm" target="_blank" rel="noopener">vue todo-list组件发布到npm上的方法</a></li>
<li><a href="https://juejin.im/post/5b231f6ff265da595f0d2540" target="_blank" rel="noopener">📦vue组件发布npm最佳实践</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue 相关</category>
      </categories>
      <tags>
        <tag>vue cli</tag>
        <tag>vue组件</tag>
        <tag>npm</tag>
        <tag>发布</tag>
      </tags>
  </entry>
  <entry>
    <title>Electron 进阶——菜单和系统托盘</title>
    <url>/posts/20beb467/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2018/08/14/5b724978c354e.png" alt=""></p>
<p>在《<a href="/posts/20f3f334/" title="Electron 初体验">Electron 初体验</a>》里我初步入门并上手了 Electron ，在这篇文章里，我会进一步熟悉 Electron 中菜单以及系统托盘的 API ，并实现对应的功能。</p>
<a id="more"></a>
<h2 id="菜单"><a class="header-anchor" href="#菜单"></a><a href="https://electronjs.org/docs/api/menu" target="_blank" rel="noopener">菜单</a></h2>
<p>有两种菜单类型：原生应用菜单和上下文菜单</p>
<h3 id="原生应用菜单"><a class="header-anchor" href="#原生应用菜单"></a>原生应用菜单</h3>
<p>原生应用菜单可以理解为应用窗口菜单，当我们成功运行官方 <a href="https://github.com/electron/electron-quick-start" target="_blank" rel="noopener">electron-quick-start</a> 库的时候，下图红框区域就是原生应用菜单，因为我们没有自定义设置菜单，所以 Electron 会展示一个默认的菜单。</p>
<p><img src="https://i.loli.net/2018/08/30/5b87555268b98.png" alt=""></p>
<h3 id="上下文菜单"><a class="header-anchor" href="#上下文菜单"></a>上下文菜单</h3>
<p>上下文菜单可以理解为就是页面上的菜单，最常见的应用就是鼠标右键菜单，当然触发条件不一定是鼠标右键，也可以是左键或者键盘事件。</p>
<h2 id="菜单项"><a class="header-anchor" href="#菜单项"></a><a href="https://electronjs.org/docs/api/menu-item" target="_blank" rel="noopener">菜单项</a></h2>
<p>不管是原生应用菜单，还是上下文菜单，都需要配置菜单项， Electron 提供了 5 种类型的菜单项，分别是：</p>
<ul>
<li>normal （常规菜单项）</li>
<li>separator （分割线）</li>
<li>submenu （子菜单）</li>
<li>checkbox （复选菜单项）</li>
<li>radio （单选菜单项）</li>
</ul>
<p>下面我用一个实际的例子来演示这 5 种类型的菜单项。</p>
<h3 id="原生应用菜单演示"><a class="header-anchor" href="#原生应用菜单演示"></a>原生应用菜单演示</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主进程</span></span><br><span class="line"><span class="keyword">const</span> &#123;Menu&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> menu = Menu.buildFromTemplate([</span><br><span class="line">    &#123;</span><br><span class="line">        label: <span class="string">'原生应用菜单演示'</span>,</span><br><span class="line">        submenu: [</span><br><span class="line">            &#123;</span><br><span class="line">                label: <span class="string">'个人信息'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                type: <span class="string">'separator'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label: <span class="string">'开机启动'</span>,</span><br><span class="line">                type: <span class="string">'checkbox'</span>,</span><br><span class="line">                checked: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                type: <span class="string">'separator'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label: <span class="string">'性别'</span>,</span><br><span class="line">                submenu: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        label: <span class="string">'男'</span>,</span><br><span class="line">                        type: <span class="string">'radio'</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        label: <span class="string">'女'</span>,</span><br><span class="line">                        type: <span class="string">'radio'</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]);</span><br><span class="line">Menu.setApplicationMenu(menu);</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2018/08/30/5b87664e0dd32.png" alt=""></p>
<p>可以看到， type 默认是 normal ，所以可以忽略，并且如果设置了 submenu 参数， type 也可以忽略。</p>
<h3 id="上下文菜单演示"><a class="header-anchor" href="#上下文菜单演示"></a>上下文菜单演示</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 渲染进程</span></span><br><span class="line"><span class="keyword">const</span> &#123;remote&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;Menu&#125; = remote;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> menu = Menu.buildFromTemplate([</span><br><span class="line">    &#123;</span><br><span class="line">        label: <span class="string">'个人信息'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        type: <span class="string">'separator'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        label: <span class="string">'开机启动'</span>,</span><br><span class="line">        type: <span class="string">'checkbox'</span>,</span><br><span class="line">        checked: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        type: <span class="string">'separator'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        label: <span class="string">'性别'</span>,</span><br><span class="line">        submenu: [</span><br><span class="line">            &#123;</span><br><span class="line">                label: <span class="string">'男'</span>,</span><br><span class="line">                type: <span class="string">'radio'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                label: <span class="string">'女'</span>,</span><br><span class="line">                type: <span class="string">'radio'</span></span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]);</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'contextmenu'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    menu.popup(&#123;</span><br><span class="line">        <span class="built_in">window</span>: remote.getCurrentWindow()</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2018/08/30/5b8764a89f2d9.png" alt=""></p>
<p>我们也可以换一种写法，通过 <code>menu.append()</code> 追加菜单项，比如下面这段代码，就实现了动态增加菜单项的功能。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;remote&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;Menu, MenuItem&#125; = remote;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> menu = <span class="keyword">new</span> Menu();</span><br><span class="line">menu.append(<span class="keyword">new</span> MenuItem(&#123;</span><br><span class="line">    label: <span class="string">'点我会增加一个菜单项'</span>,</span><br><span class="line">    click: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        menu.append(<span class="keyword">new</span> MenuItem(&#123;</span><br><span class="line">            label: <span class="string">'测试项'</span></span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'contextmenu'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    menu.popup(&#123;</span><br><span class="line">        <span class="built_in">window</span>: remote.getCurrentWindow()</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<h2 id="系统托盘"><a class="header-anchor" href="#系统托盘"></a><a href="https://electronjs.org/docs/api/tray" target="_blank" rel="noopener">系统托盘</a></h2>
<p>系统托盘就是桌面右下角那块常驻图标栏，系统托盘实际上也是一个菜单，通过点击鼠标右键触发。通过系统托盘可以给我们的应用实现一些有趣的特性，比如最小化到托盘，也就是关闭窗口但不退出应用。</p>
<p>下面我们就创建一个系统托盘，注意，系统托盘创建的时候，必须指定一个图标路径，因为在系统托盘区域，都是用图标展示的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主进程</span></span><br><span class="line"><span class="keyword">const</span> &#123;app, Menu, Tray&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tray = <span class="keyword">new</span> Tray(<span class="string">'build/icon.ico'</span>);</span><br><span class="line"><span class="keyword">const</span> contextMenu = Menu.buildFromTemplate([</span><br><span class="line">    &#123;</span><br><span class="line">        label: <span class="string">'退出'</span>,</span><br><span class="line">        click: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            app.quit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]);</span><br><span class="line">tray.setToolTip(<span class="string">'应用标题'</span>);</span><br><span class="line">tray.setContextMenu(contextMenu);</span><br></pre></td></tr></table></figure>
<p>这时候我们运行一下，发现没问题，达到我们想要的要求了，并且点击退出后，整个应用都退出了。</p>
<p><img src="https://i.loli.net/2018/08/30/5b878a9853883.png" alt=""></p>
]]></content>
      <categories>
        <category>Electron 相关</category>
      </categories>
      <tags>
        <tag>electron</tag>
        <tag>menu</tag>
        <tag>menuitem</tag>
        <tag>tray</tag>
        <tag>菜单</tag>
        <tag>系统托盘</tag>
      </tags>
  </entry>
  <entry>
    <title>浅入浅出 Vue 动态组件</title>
    <url>/posts/46704839/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2018/07/30/5b5e7a54ebe8d.png" alt=""></p>
<p>浅入浅出居然出第二篇了，之前整理了一篇《<a href="/posts/bb61bbd3/" title="浅入浅出 Vue 组件">浅入浅出 Vue 组件</a>》，这次就再深入一点，学习一下动态组件。</p>
<a id="more"></a>
<h2 id="什么是动态组件"><a class="header-anchor" href="#什么是动态组件"></a>什么是动态组件</h2>
<p>简单的说，<a href="https://cn.vuejs.org/v2/guide/components.html#%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6" target="_blank" rel="noopener">动态组件</a>就是将几个组件放在一个挂载点下，然后根据父组件里某个变量来决定显示哪个，也可以都不显示。</p>
<h2 id="语法"><a class="header-anchor" href="#语法"></a>语法</h2>
<p>动态组件的核心就是挂载点，在挂载点会使用 <code>&lt;component&gt;</code> 标签，然后配合使用 <code>v-bind:is=&quot;组件名&quot;</code> ，会自动去匹配组件名，有则显示，没有则不显示，也就是通过修改 <code>is</code> 指令的值，就可以改变挂载的组件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件会在 currentComponent 改变时改变 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">"currentComponent"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="实例"><a class="header-anchor" href="#实例"></a>实例</h2>
<p>说再多不如一个例子来得容易理解，根据介绍来看，最简单的场景就是 Tab 切换了，那我们先把基本界面搭出来。</p>
<iframe height='300' scrolling='no' title='3.动态组件-界面' src='//codepen.io/hooray/embed/qyJJPw/?height=300&theme-id=0&default-tab=css,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/hooray/pen/qyJJPw/' target="_blank" rel="noopener">3.动态组件-界面</a> by 代码小睿 (<a href='https://codepen.io/hooray' target="_blank" rel="noopener">@hooray</a>) on <a href='https://codepen.io' target="_blank" rel="noopener">CodePen</a>.
</iframe>
<p>在上面的界面里， Tab 内容区实际上就是组件的挂载点，那我们就把代码替换成：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- :tab="currentTab" 就是传入组件里的数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">"currentComponent"</span> <span class="attr">:tab</span>=<span class="string">"currentTab"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>接着我们准备 2 个 Tab 内容区的组件，同时注册好这 2 个组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 为了做区分，这 2 个组件分别是展示 string 和 array 的数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/x-template"</span> <span class="attr">id</span>=<span class="string">"tab-content-string"</span>&gt;</span></span><br><span class="line"><span class="javascript">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        </span><span class="template-variable">&#123;&#123;tab.content&#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/x-template"</span> <span class="attr">id</span>=<span class="string">"tab-content-array"</span>&gt;</span></span><br><span class="line"><span class="javascript">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"v in tab.content"</span>&gt;</span></span><span class="template-variable">&#123;&#123;v&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'tab-content-string'</span>, &#123;</span><br><span class="line">    props: [<span class="string">'tab'</span>],</span><br><span class="line">    template: <span class="string">'#tab-content-string'</span></span><br><span class="line">&#125;);</span><br><span class="line">Vue.component(<span class="string">'tab-content-array'</span>, &#123;</span><br><span class="line">    props: [<span class="string">'tab'</span>],</span><br><span class="line">    template: <span class="string">'#tab-content-array'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>再接着我们初始化一下这个 Vue 实例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">:class</span>=<span class="string">"&#123;'active': currentTab == v&#125;"</span> <span class="attr">v-for</span>=<span class="string">"v in tab"</span> @<span class="attr">click</span>=<span class="string">"currentTab = v"</span>&gt;</span>&#123;&#123;v.title&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">"currentComponent"</span> <span class="attr">:tab</span>=<span class="string">"currentTab"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        tab: [</span><br><span class="line">            &#123;</span><br><span class="line">                title: <span class="string">"Tab1"</span>,</span><br><span class="line">                content: <span class="string">"abcabc"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                title: <span class="string">"Tab2"</span>,</span><br><span class="line">                content: [<span class="string">"abc"</span>, <span class="string">"def"</span>, <span class="string">"ghi"</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        currentTab: <span class="string">''</span></span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        currentComponent: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="string">"tab-content-"</span> +</span><br><span class="line">                (<span class="keyword">typeof</span> <span class="keyword">this</span>.currentTab.content == <span class="string">"string"</span> ? <span class="string">"string"</span> : <span class="string">"array"</span>)</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currentTab = <span class="keyword">this</span>.tab[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>可以看到，在 <code>data</code> 数据里我定义了一个 <code>currentTab</code> 字段，并且实例在创建好后，将 <code>tab[0]</code> 的数据赋值给 <code>currentTab</code> ，这样可以将第一个 Tab 标签高亮，并显示出内容。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.currentTab = <span class="keyword">this</span>.tab[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同时，在 Tab 标签上绑定一个点击事件，当点击触发后，将当前 Tab 标签的数据赋值给 <code>currentTab</code> ，这样在加载不同组件的时候，可以传入不同的数据。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">:class</span>=<span class="string">"&#123;'active': currentTab == v&#125;"</span> <span class="attr">v-for</span>=<span class="string">"v in tab"</span> @<span class="attr">click</span>=<span class="string">"currentTab = v"</span>&gt;</span>&#123;&#123;v.title&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最后就是处理 <code>v-bind:is=&quot;currentComponent&quot;</code> ，在 <code>computed</code> 里定义了 <code>currentComponent()</code> 这个方法，根据判断 <code>currentTab.content</code> 的类型，返回不同的组件名，实现动态组件的加载。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    currentComponent: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="string">"tab-content-"</span> +</span><br><span class="line">            (<span class="keyword">typeof</span> <span class="keyword">this</span>.currentTab.content == <span class="string">"string"</span> ? <span class="string">"string"</span> : <span class="string">"array"</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>来看下完整的效果：</p>
<iframe height='300' scrolling='no' title='4.动态组件' src='//codepen.io/hooray/embed/gdOqPV/?height=300&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/hooray/pen/gdOqPV/' target="_blank" rel="noopener">4.动态组件</a> by 代码小睿 (<a href='https://codepen.io/hooray' target="_blank" rel="noopener">@hooray</a>) on <a href='https://codepen.io' target="_blank" rel="noopener">CodePen</a>.
</iframe>
<h2 id="keep-alive"><a class="header-anchor" href="#keep-alive"></a><a href="https://cn.vuejs.org/v2/guide/components-dynamic-async.html" target="_blank" rel="noopener">keep-alive</a></h2>
<p>当我们在动态切换这些组件的时候，可能会希望保留之前组件的状态，而不是每次切换后都是全新的界面。</p>
<p>打个比方，假设我们某个 Tab 内容里，又包了一个子 Tab ，就像下面这个演示一样：</p>
<iframe height='300' scrolling='no' title='5.动态组件-没用keep-alive' src='//codepen.io/hooray/embed/xaxmjL/?height=300&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/hooray/pen/xaxmjL/' target="_blank" rel="noopener">5.动态组件-没用keep-alive</a> by 代码小睿 (<a href='https://codepen.io/hooray' target="_blank" rel="noopener">@hooray</a>) on <a href='https://codepen.io' target="_blank" rel="noopener">CodePen</a>.
</iframe>
<p>我们会看到，当切换到 Tab2 的时候，里面是一个子 Tab ，默认显示在 Tab2-1 标签上，当我们对子 Tab 切换到第二个或者第三个标签后，切回到外层的 Tab1 标签再切换回来，会发现 Tab2 里的子 Tab 又回到第一个 Tab2-1 标签上了，这时候就是使用 <code>keep-alive</code> 的时候了。</p>
<p>使用 <code>keep-alive</code> 可以说是尤其简单，只需要用 <code>&lt;keep-alive&gt;</code> 标签将动态组件包裹起来就可以。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">"currentComponent"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>来看看效果如何：</p>
<iframe height='300' scrolling='no' title='6.动态组件-使用keep-alive' src='//codepen.io/hooray/embed/qMBwgx/?height=300&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/hooray/pen/qMBwgx/' target="_blank" rel="noopener">6.动态组件-使用keep-alive</a> by 代码小睿 (<a href='https://codepen.io/hooray' target="_blank" rel="noopener">@hooray</a>) on <a href='https://codepen.io' target="_blank" rel="noopener">CodePen</a>.
</iframe>
<p>没有问题，动态加载的组件被缓存了起来。</p>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><a href="https://www.jb51.net/article/92285.htm" target="_blank" rel="noopener">Vue.js动态组件解析</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue 相关</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue动态组件</tag>
      </tags>
  </entry>
  <entry>
    <title>Electron 初体验</title>
    <url>/posts/20f3f334/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2018/08/14/5b724978c354e.png" alt=""></p>
<p>平时习惯将一些偶尔看到并且感兴趣的技术文章放到收藏夹里，目的是等有空的时候再仔细拜读或学习，但无奈抵不住自己的惰性，于是收藏夹越来越臃肿。近期在整理的时候就发现了好几篇关于 <a href="https://electronjs.org/" target="_blank" rel="noopener">Electron</a> 的文章，但我已经记不起当时为何收藏，大概每个前端开发工程师都有个做软件的梦想吧。</p>
<p>因为收藏了蛮多 Electron 的文章，直接清理掉感觉可惜，于是趁近期工作任务不是很重的前提下，对 Electron 进行了简单的入门，并尝试用 Electron 开发一套公司内部 OA 系统，这也是这篇文章的由来（因为开发过 Web APP 版的 OA ，所以桌面版的 OA 开发起来不算太费劲，业务代码基本可以沿用，主要的坑还是在 Electron 上）。</p>
<a id="more"></a>
<h2 id="入门"><a class="header-anchor" href="#入门"></a>入门</h2>
<p>快速入门我使用了官方的 <a href="https://github.com/electron/electron-quick-start" target="_blank" rel="noopener">electron-quick-start</a> 库，下载这个库后直接安装依赖，然后运行，就可以看到如下的效果。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2018/08/20/5b7a3b0440561.png" alt=""></p>
<h2 id="主进程和渲染进程"><a class="header-anchor" href="#主进程和渲染进程"></a>主进程和渲染进程</h2>
<p>主进程就是 package.json 里的 main 脚本，在当前这个库里，主进程就是 main.js 这个文件，在主进程中运行的脚本通过创建 web 页面来展示用户的界面。</p>
<p>通过上面的图我们可以了解到 Electron 的内核其实是 Chromium ，所以 Chromium 的多进程架构也会被使用到，那么每个 Electron 中的 web 页面都会运行在自己的渲染进程中。</p>
<p>简单的来说， main.js 就是主进程，在主进程里通过 BrowserWindow 创建页面，每个 BrowserWindow 就是渲染进程，当某个 BrowserWindow 页面被销毁后，对应的想染进程也会被终止。</p>
<h2 id="优化窗口"><a class="header-anchor" href="#优化窗口"></a>优化窗口</h2>
<p>因为 Windows 的窗口有够丑的，所以我的计划是不使用 Windows 的界面，用 HTML 和 CSS 自己做一个界面。</p>
<h3 id="无边框窗口"><a class="header-anchor" href="#无边框窗口"></a>无边框窗口</h3>
<p>第一步就是隐藏原生的窗口，打开 main.js 可以看到这段创建窗口的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Create the browser window.</span></span><br><span class="line">    mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;<span class="attr">width</span>: <span class="number">800</span>, <span class="attr">height</span>: <span class="number">600</span>&#125;);</span><br><span class="line">    <span class="comment">// and load the index.html of the app.</span></span><br><span class="line">    mainWindow.loadFile(<span class="string">'index.html'</span>);</span><br><span class="line">    <span class="comment">// Emitted when the window is closed.</span></span><br><span class="line">    mainWindow.on(<span class="string">'closed'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Dereference the window object, usually you would store windows</span></span><br><span class="line">        <span class="comment">// in an array if your app supports multi windows, this is the time</span></span><br><span class="line">        <span class="comment">// when you should delete the corresponding element.</span></span><br><span class="line">        mainWindow = <span class="literal">null</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过阅读官方 BrowserWindow 的 <a href="https://electronjs.org/docs/api/frameless-window" target="_blank" rel="noopener">API</a> 文档可以知道，只需要设置 <code>frame: false</code> 就可以创建无边框窗口，当然还可以设置禁止改变尺寸，这时候创建窗口的代码就变成这样了：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Create the browser window.</span></span><br><span class="line">mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;<span class="attr">width</span>: <span class="number">800</span>, <span class="attr">height</span>: <span class="number">600</span>, <span class="attr">frame</span>: <span class="literal">false</span>, <span class="attr">resizable</span>: <span class="literal">false</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>运行后就会看到这样一个界面：</p>
<p><img src="https://i.loli.net/2018/08/20/5b7a5c74a0dbf.png" alt=""></p>
<h3 id="窗口拖动"><a class="header-anchor" href="#窗口拖动"></a>窗口拖动</h3>
<p>现在窗口已经没有标题栏和菜单栏了，接着就会发现一个问题，就是窗口没办法拖动了。这不是什么大问题，因为官方也想到这问题了，所以在<a href="https://electronjs.org/docs/api/frameless-window" target="_blank" rel="noopener">无边框窗口文档</a>里给出了解决方案，就是给拖动区域增加 <code>-webkit-app-region: drag</code> 的 CSS 代码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"-webkit-app-region: drag"</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>需要注意的是，如果在拖动区域里有按钮等需要点击的元素，需要增加 <code>-webkit-app-region: no-drag</code> 设置，否则会无法点击。</p>
<h3 id="手动实现窗口拖动"><a class="header-anchor" href="#手动实现窗口拖动"></a>手动实现窗口拖动</h3>
<div class="note warning">
            <p>2018-08-25 更新：</p><p>不建议在无边框窗口下使用下面的方法实现拖动效果，在特殊环境下，比如系统 DPI 不为 100% 时候，会导致窗口在拖动时，窗口的宽高会无限变大，建议还是使用官方提供的无边框窗口下的拖动方案。</p><p>我的测试环境为 2560*1440 的分辨率， DPI 为 125% 。</p><p>关于这个问题，我也找到两个相关的 Issus ：</p><ul><li><a href="https://github.com/electron/electron/issues/13086" target="_blank" rel="noopener">Windows 10 move browser window will trigger “resize” event</a></li><li><a href="https://github.com/electron/electron/issues/10862" target="_blank" rel="noopener">Per monitor DPI awareness causes issues with window positioning and sizing</a></li></ul>
          </div>
<p>虽然官方已经提供了无边框窗口拖动的解决方案，但实际使用上会发现一个问题，就是在拖动区域右键，会弹出系统级别的菜单选项，这问题我查了相关资料也没找到屏蔽的办法，所以我就在考虑用 js 来手动实现窗口拖动的效果。</p>
<p>解决办法其实和网页上拖动元素一样，只是在获取坐标和设置坐标上，需要通过 electron 来获取窗口坐标和设置窗口坐标，实现代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> currentWindow = <span class="built_in">require</span>(<span class="string">'electron'</span>).remote.getCurrentWindow();</span><br><span class="line">$(<span class="built_in">document</span>).on(<span class="string">'mousedown'</span>, <span class="string">'.app-drag'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e = e.originalEvent || e;</span><br><span class="line">    <span class="keyword">var</span> $el = $(e.target);</span><br><span class="line">    <span class="keyword">var</span> canDrag = $el.closest(<span class="string">'.app-no-drag'</span>).length &lt;= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (canDrag) &#123;</span><br><span class="line">        <span class="keyword">var</span> winPos = currentWindow.getPosition();</span><br><span class="line">        <span class="keyword">var</span> dX = e.screenX - winPos[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> dY = e.screenY - winPos[<span class="number">1</span>];</span><br><span class="line">        $(<span class="built_in">document</span>).on(<span class="string">'mousemove'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            e = e.originalEvent || e;</span><br><span class="line">            <span class="keyword">var</span> _x = e.screenX - dX;</span><br><span class="line">            <span class="keyword">var</span> _y = e.screenY - dY;</span><br><span class="line">            currentWindow.setPosition(_x, _y);</span><br><span class="line">        &#125;);</span><br><span class="line">        $(<span class="built_in">document</span>).on(<span class="string">'mouseup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            $(<span class="keyword">this</span>).off(<span class="string">'mousemove'</span>).off(<span class="string">'mouseup'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这样只需要在需要给拖动区域设置 <code>.app-drag</code> ，非拖动区域设置 <code>.app-no-drag</code> 即可。</p>
<p>这里我是用 jQuery 来实现的，如果在页面上引入 jQuery 会报错：<strong>Uncaught ReferenceError: $ is not defined</strong>，解决办法如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">'object'</span>)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = <span class="built_in">module</span>.exports;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="进程间通信"><a class="header-anchor" href="#进程间通信"></a>进程间通信</h2>
<p>因为安全限制， web 页面不能直接访问原生 GUI 资源，在 Electron 中也是一样，渲染进程如果想要进行原生的 GUI 操作，就比如和主进程进行通信，请求相应的操作。在 Electron 中提供了几种通信方式</p>
<h3 id="ipcMain-和-ipcRenderer"><a class="header-anchor" href="#ipcMain-和-ipcRenderer"></a><a href="https://electronjs.org/docs/api/ipc-main" target="_blank" rel="noopener">ipcMain</a> 和 <a href="https://electronjs.org/docs/api/ipc-renderer" target="_blank" rel="noopener">ipcRenderer</a></h3>
<p>在渲染进程中使用 ipcRenderer 模块向主进程发送消息，主进程中使用 ipcMain 模块接收消息，进行操作，如果还需要反馈，则通知渲染进程，渲染进程根据接收的内容执行相应的操作：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 渲染进程中</span></span><br><span class="line"><span class="keyword">const</span> &#123;ipcRenderer&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line">ipcRender.send(<span class="string">'somemsg'</span>, data);</span><br><span class="line">ipcRender.on(<span class="string">'replaymsg'</span>, (evt, otherData) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(otherData);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 主进程中</span></span><br><span class="line"><span class="keyword">const</span> &#123;ipcMain&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line">ipcMain.on(<span class="string">'somemsg'</span>, (evt, data) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    evt.sender.send(<span class="string">'replymsg'</span>, otherData);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="remote"><a class="header-anchor" href="#remote"></a><a href="https://electronjs.org/docs/api/remote" target="_blank" rel="noopener">remote</a></h3>
<p>remote 模块为渲染进程和主进程通信提供了一种简单方法，可以看到在上面手动实现拖动窗口的效果里，就用到了 remote 模块。</p>
<h3 id="webContents"><a class="header-anchor" href="#webContents"></a><a href="https://electronjs.org/docs/api/web-contents" target="_blank" rel="noopener">webContents</a></h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主进程中</span></span><br><span class="line">win.webContents.on(<span class="string">'did-finish-load'</span>, () =&gt; &#123;</span><br><span class="line">    win.webContents.send(<span class="string">'ping'</span>, <span class="string">'whoooooooh!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 渲染进程中</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'electron'</span>).ipcRenderer.on(<span class="string">'ping'</span>, (event, message) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(message);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="渲染进程之间通信"><a class="header-anchor" href="#渲染进程之间通信"></a>渲染进程之间通信</h3>
<p>如果对数据的实时性没有要求，只是渲染进程之间数据共享，<a href="https://electronjs.org/docs/faq#%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%A4%E4%B8%AA%E7%BD%91%E9%A1%B5%E9%97%B4%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%EF%BC%9F" target="_blank" rel="noopener">官方建议</a>是使用浏览器中已经实现的 HTML5 API 。</p>
<p>但如果对数据实时性要求高，那就要结合上面的方法来实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主进程中，将两个窗口的 id 分别发送到对方的渲染进程里</span></span><br><span class="line">mainWindow.webContents.on(<span class="string">'did-finish-load'</span>, () =&gt; &#123;</span><br><span class="line">    mainWindow.webContents.send(<span class="string">'getChild'</span>, &#123;</span><br><span class="line">        childId: childWindow.id</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">childWindow.webContents.on(<span class="string">'did-finish-load'</span>, () =&gt; &#123;</span><br><span class="line">    childWindow.webContents.send(<span class="string">'getMain'</span>, &#123;</span><br><span class="line">        mainId: mainWindow.id</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 渲染进程 mainWindow，通过 id 得到 childWindow 并发送一条消息</span></span><br><span class="line">ipcRenderer.on(<span class="string">'getChild'</span>, (event, arg) =&gt; &#123;</span><br><span class="line">    remote.BrowserWindow.fromId(arg.childId).webContents.send(<span class="string">'say'</span>, <span class="string">'Hello World!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 渲染进程 childWindow，接收 mainWindow 的消息</span></span><br><span class="line">ipcRenderer.on(<span class="string">'say'</span>, (event, arg) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg); <span class="comment">// 输出：Hello World!</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 同理 childWindow 也可以通过 id 给 mainWindow 发送消息</span></span><br></pre></td></tr></table></figure>
<h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2>
<p>不明白的地方优先查看<a href="https://electronjs.org/docs" target="_blank" rel="noopener">官方文档</a>，因为官方文档太完整了，虽然部分还是英文的，没有翻译完整，但并不影响阅读，因为官方文档有很多例子，看代码就能理解，也可以下载官方的 <a href="https://github.com/electron/electron-api-demos" target="_blank" rel="noopener">electron-api-demos</a> 库，整理了部分 API 的实例，当然这个项目本身也是一个很好的 Electron 演示。</p>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><a href="https://juejin.im/entry/58869b3f8d6d810058d46135" target="_blank" rel="noopener">我眼中的 Electron</a></li>
<li><a href="https://segmentfault.com/a/1190000011507250" target="_blank" rel="noopener">使用 Electron 在两个进程 (主进程和渲染进程) 之间进行通讯</a></li>
</ul>
]]></content>
      <categories>
        <category>Electron 相关</category>
      </categories>
      <tags>
        <tag>electron</tag>
        <tag>无边框窗口</tag>
        <tag>窗口拖动</tag>
        <tag>主进程</tag>
        <tag>渲染进程</tag>
        <tag>进程通信</tag>
      </tags>
  </entry>
  <entry>
    <title>docsify 全接触</title>
    <url>/posts/ed9dc49e/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2018/08/08/5b6a49c8c93fc.png" alt=""></p>
<p>一直以来我都习惯直接用 markdown 写一些简单的项目文档，并且通过 git 同步到 Github 或者国内的码云上，以满足备份和查看的需求，但直到我遇到了 <a href="https://docsify.js.org/" target="_blank" rel="noopener">docsify</a> ，在初步了解了一天后，我觉得这款工具或许可以代替我之前写文档的方式。</p>
<a id="more"></a>
<h2 id="什么是-docsify"><a class="header-anchor" href="#什么是-docsify"></a>什么是 docsify</h2>
<blockquote>
<p>docsify 是一个动态生成文档网站的工具。不同于 GitBook、Hexo 的地方是它不会生成将 <code>.md</code> 转成 <code>.html</code> 文件，所有转换工作都是在运行时进行。</p>
</blockquote>
<p>官方的介绍其实就已经打动我了，因为 GitBook 和 Hexo ，一个有了解过，一个现在正在使用，它们的“特点”就是都需要编译，相对来说就会比较费时，而运行时编译就方便了很多，而且整个文档目录也不会被 <code>.html</code> 文件“污染”，虽然 SEO 会受到影响，但我不在乎！</p>
<h2 id="开始使用"><a class="header-anchor" href="#开始使用"></a>开始使用</h2>
<h3 id="安装"><a class="header-anchor" href="#安装"></a>安装</h3>
<p>官方推荐安装 <a href="https://www.npmjs.com/package/docsify-cli" target="_blank" rel="noopener">docsify-cli</a> 工具，可以方便创建及本地预览文档网站。</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">npm i docsify-<span class="keyword">cli</span> -g</span><br></pre></td></tr></table></figure>
<h3 id="初始化"><a class="header-anchor" href="#初始化"></a>初始化</h3>
<p>建议在项目的 <code>./docs</code> 目录里写文档，可以通过下面的方式初始化项目：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">docsify init <span class="string">./docs</span></span><br></pre></td></tr></table></figure>
<p>这里我也可以直接创建一个纯文档项目：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">docsify init <span class="string">./</span></span><br></pre></td></tr></table></figure>
<h3 id="本地预览"><a class="header-anchor" href="#本地预览"></a>本地预览</h3>
<p>在上一步初始化完毕后，会看到 <code>Initialization succeeded! Please run docsify serve ./</code> ，那我们接着执行 <code>docsify serve ./</code> 就可以运行起一个支持实时预览的本地网站，通过 <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> 可以访问。</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">docsify serve <span class="string">./</span></span><br></pre></td></tr></table></figure>
<h2 id="基本操作"><a class="header-anchor" href="#基本操作"></a>基本操作</h2>
<p><img src="https://i.loli.net/2018/08/08/5b6a82e9cf935.png" alt=""></p>
<p>运行好后看到这样的页面就代表运行成功了，在开始写文档之前，先来了解一下初始化好后的这三个文件分别是做什么的。</p>
<ul>
<li><code>.nojekyll</code> 用于阻止 GitHub Pages 会忽略掉下划线开头的文件</li>
<li><code>index.html</code> 入口文件，也可以理解为项目配置文件</li>
<li><code>README.md</code> 文档默认主页</li>
</ul>
<h3 id="多页文档"><a class="header-anchor" href="#多页文档"></a>多页文档</h3>
<p>现在文档默认只有一篇，也就是 <code>README.md</code> ，如果要再增加一篇，也很简单，直接在项目根目录创建一个 <code>.md</code> 文件就可以，比如新建一个 <code>guide.md</code> 文件，那么对应的路由就是 <code>/#/guide</code> 。</p>
<p>假设我们的文件目录结构如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">docsify</span></span><br><span class="line">├ <span class="selector-tag">README</span><span class="selector-class">.md</span></span><br><span class="line">├ <span class="selector-tag">guide</span><span class="selector-class">.md</span></span><br><span class="line">├ <span class="selector-tag">zh-cn</span></span><br><span class="line">│　├ <span class="selector-tag">README</span><span class="selector-class">.md</span></span><br><span class="line">│　└ <span class="selector-tag">guide</span><span class="selector-class">.md</span></span><br></pre></td></tr></table></figure>
<p>那么对应访问页面的地址就是：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">docsify<span class="regexp">/README.md            ==&gt; http:/</span><span class="regexp">/localhost:3000/</span><span class="comment">#/</span></span><br><span class="line">docsify<span class="regexp">/guide.md             ==&gt; http:/</span><span class="regexp">/localhost:3000/</span><span class="comment">#/guide</span></span><br><span class="line">docsify<span class="regexp">/zh-cn/README.md      ==&gt; http:/</span><span class="regexp">/localhost:3000/</span><span class="comment">#/zh-cn/</span></span><br><span class="line">docsify<span class="regexp">/zh-cn/guide.md       ==&gt; http:/</span><span class="regexp">/localhost:3000/</span><span class="comment">#/zh-cn/guide</span></span><br></pre></td></tr></table></figure>
<h3 id="侧边栏"><a class="header-anchor" href="#侧边栏"></a>侧边栏</h3>
<p>现在项目里已经可以创建多篇文档了，但发现有个问题，因为现在是通过手动在浏览器地址栏里输入文档地址访问，这种方式肯定不够优雅。</p>
<p>好在 docsify 提供了侧边栏的功能，我们打开 <code>index.html</code> 文件配置 <code>loadSidebar</code> 选项：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.$docsify = &#123;</span><br><span class="line">    loadSidebar: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着在根目录下创建 <code>_sidebar.md</code> 文件，内容如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>[<span class="string">首页</span>](<span class="link">/</span>)</span><br><span class="line"><span class="bullet">* </span>[<span class="string">指南</span>](<span class="link">guide</span>)</span><br><span class="line"><span class="bullet">* </span>[<span class="string">中文首页</span>](<span class="link">zh-cn/</span>)</span><br><span class="line"><span class="bullet">* </span>[<span class="string">中文指南</span>](<span class="link">zh-cn/guide</span>)</span><br></pre></td></tr></table></figure>
<p>需要注意的是，<code>_sidebar.md</code> 的加载逻辑是从每层目录下获取文件，如果当前目录不存在该文件则回退到上一级目录。例如当前路径为 <code>/zh-cn/guide</code> 则从 <code>/zh-cn/_sidebar.md</code> 获取文件，如果不存在则从 <code>/_sidebar.md</code> 获取。当然你也可以配置 <code>alias</code> 避免不必要的回退过程。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.$docsify = &#123;</span><br><span class="line">    loadSidebar: <span class="literal">true</span>,</span><br><span class="line">    alias: &#123;</span><br><span class="line">        <span class="string">'/.*/_sidebar.md'</span>: <span class="string">'/_sidebar.md'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="文档目录"><a class="header-anchor" href="#文档目录"></a>文档目录</h3>
<p>侧边栏开启的同时，通过设置 <code>subMaxLevel</code> 选项也可以开启文档目录功能。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.$docsify = &#123;</span><br><span class="line">    loadSidebar: <span class="literal">true</span>,</span><br><span class="line">    subMaxLevel: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这会我们打开 <code>README.md</code> 文件，随便写几个标题，保存一下看看效果。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">## 标题1</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 标题1-1</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 标题1-2</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 标题2</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 标题3</span></span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2018/08/08/5b6a9ab29079d.png" alt=""></p>
<p>可以看到<code>标题1</code>下面的<code>标题1-1</code>和<code>标题1-2</code>并没有显示出来，因为我们设置了 <code>subMaxLevel</code> 为 2 ，如果需要显示，则修改为 3 即可。</p>
<div class="note info">
            <p>侧边栏一级为页面，从二级开始才是目录，所以 <code>subMaxLevel: 2</code> 只显示了一级目录，如果要显示二级目录，则应该设置为 <code>subMaxLevel: 3</code> 。如果还是不理解，那就动手多试几遍，就明白了。</p>
          </div>
<p>如果文档里有特定的标题不想展示到目录中，可以添加 <code>{docsify-ignore}</code> 或 <code>{docsify-ignore-all}</code> 。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">## 标题1</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 标题1-1 &#123;docsify-ignore&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 标题1-2</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 标题2 &#123;docsify-ignore-all&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 标题2-1</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 标题3</span></span><br></pre></td></tr></table></figure>
<h3 id="导航栏"><a class="header-anchor" href="#导航栏"></a>导航栏</h3>
<p>打开 <code>index.html</code> 文件配置 <code>loadNavbar</code> 选项：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.$docsify = &#123;</span><br><span class="line">    loadNavbar: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着在根目录下创建 <code>_navbar.md</code> 文件，内容如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>[<span class="string">En</span>](<span class="link">/</span>)</span><br><span class="line"><span class="bullet">* </span>[<span class="string">中文</span>](<span class="link">/zh-cn/</span>)</span><br></pre></td></tr></table></figure>
<p>如果导航内容很多，也可以使用嵌套的方式：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>En</span><br><span class="line"><span class="bullet">  * </span>[<span class="string">Index</span>](<span class="link">/</span>)</span><br><span class="line"><span class="bullet">  * </span>[<span class="string">Guide</span>](<span class="link">guide</span>)</span><br><span class="line"><span class="bullet">* </span>中文</span><br><span class="line"><span class="bullet">  * </span>[<span class="string">首页</span>](<span class="link">/zh-cn/</span>)</span><br><span class="line"><span class="bullet">  * </span>[<span class="string">指南</span>](<span class="link">/zh-cn/guide</span>)</span><br></pre></td></tr></table></figure>
<div class="note info">
            <ul><li>导航嵌套支持多层，但官方的样式处理上似乎有点 bug ，多层嵌套展示不理想，所以建议最多就两层嵌套最好。</li><li>导航的加载逻辑与侧边栏一致。</li></ul>
          </div>
<h3 id="封面"><a class="header-anchor" href="#封面"></a>封面</h3>
<p>打开 <code>index.html</code> 文件配置 <code>coverpage</code> 选项：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.$docsify = &#123;</span><br><span class="line">    coverpage: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着在根目录下创建 <code>_coverpage.md</code> 文件，内容就是标准的 markdown 语法，可以参考一下官方的封面：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">logo</span>](<span class="link">_media/icon.svg</span>)</span><br><span class="line"></span><br><span class="line"><span class="section"># docsify</span></span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; A magical documentation site generator.</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>Simple and lightweight (~12kb gzipped)</span><br><span class="line"><span class="bullet">* </span>Multiple themes</span><br><span class="line"><span class="bullet">* </span>Not build static html files</span><br><span class="line"></span><br><span class="line">[<span class="string">GitHub</span>](<span class="link">https://github.com/docsifyjs/docsify/</span>)</span><br><span class="line">[<span class="string">Get Started</span>](<span class="link">#quick-start</span>)</span><br></pre></td></tr></table></figure>
<p>封面的背景是随机生成的渐变色，我们也可以指定一个背景色或者背景图，只要放在文档末尾就可以，同时设定只生效第一个。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 自定义背景色 --&gt;</span></span></span><br><span class="line">![<span class="string">color</span>](<span class="link">#f0f0f0</span>)</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 自定义背景图 --&gt;</span></span></span><br><span class="line">![](background_image.png)</span><br></pre></td></tr></table></figure>
<p>如果我们的文档是多语言的，那可不可以设置多个封面？当然也是可以的。首先确定文档目录结构如下：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">docsify</span><br><span class="line">├ <span class="module-access"><span class="module"><span class="identifier">README</span>.</span></span>md</span><br><span class="line">├ guide.md</span><br><span class="line">├ <span class="module-access"><span class="module"><span class="identifier">_coverpage</span>.</span></span>md</span><br><span class="line">├ zh-cn</span><br><span class="line">│　├ <span class="module-access"><span class="module"><span class="identifier">README</span>.</span></span>md</span><br><span class="line">│　├ guide.md</span><br><span class="line">│　└ <span class="module-access"><span class="module"><span class="identifier">_coverpage</span>.</span></span>md</span><br></pre></td></tr></table></figure>
<p>然后修改 <code>coverpage</code> 选项：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.$docsify = &#123;</span><br><span class="line">    coverpage: [<span class="string">'/'</span>, <span class="string">'/zh-cn/'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者具体指明文件名</span></span><br><span class="line"><span class="built_in">window</span>.$docsify = &#123;</span><br><span class="line">    coverpage: &#123;</span><br><span class="line">        <span class="string">'/'</span>: <span class="string">'_coverpage.md'</span>,</span><br><span class="line">        <span class="string">'/zh-cn/'</span>: <span class="string">'_coverpage.md'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="个性定制"><a class="header-anchor" href="#个性定制"></a>个性定制</h2>
<h3 id="配置项"><a class="header-anchor" href="#配置项"></a>配置项</h3>
<p>在上面已经介绍了一些配置项，比如侧边栏 <code>loadSidebar</code> 、导航栏 <code>loadNavbar</code> 、封面 <code>coverpage</code> ，关于 <code>window.$docsify</code> 完整配置说明，可以查看<a href="https://docsify.js.org/#/zh-cn/configuration" target="_blank" rel="noopener">官方配置项文档</a>参考。</p>
<h3 id="主题"><a class="header-anchor" href="#主题"></a>主题</h3>
<p>直接打开 index.html 修改替换 css 地址即可切换主题，官方目前提供了 4 套主题，分别是：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//unpkg.com/docsify/themes/vue.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//unpkg.com/docsify/themes/buble.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//unpkg.com/docsify/themes/dark.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//unpkg.com/docsify/themes/pure.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 压缩文件位于 /lib/themes/ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//unpkg.com/docsify/lib/themes/vue.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//unpkg.com/docsify/lib/themes/buble.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//unpkg.com/docsify/lib/themes/dark.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//unpkg.com/docsify/lib/themes/pure.css"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="插件"><a class="header-anchor" href="#插件"></a>插件</h3>
<p>插件配置很简单，基本大部分插件只要复制对应的 js 引用代码复制到 index.html 页面里就可以。以下介绍几个我在测试中用到感觉还不错的插件，更<a href="https://docsify.js.org/#/zh-cn/plugins" target="_blank" rel="noopener">完整的插件列表</a>还请查看官方文档。</p>
<h4 id="emoji"><a class="header-anchor" href="#emoji"></a>emoji</h4>
<p>docsify 默认是支持 emoji 表情的，但它不够精准，因为没有处理非 emoji 的字符串。如果你需要正确解析 emoji 字符串，可以引入这个插件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//unpkg.com/docsify/lib/plugins/emoji.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里我还找到一份 github 的完整 emoji 表情代码：<a href="https://gist.github.com/rxaviers/7360908" target="_blank" rel="noopener">去看看</a></p>
<h4 id="复制代码"><a class="header-anchor" href="#复制代码"></a>复制代码</h4>
<p>在用 markdown 展示代码片段的时候，可能需要一键复制代码到本地运行，这时候就可以引入这个插件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//unpkg.com/docsify-copy-code"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="分页"><a class="header-anchor" href="#分页"></a>分页</h4>
<p>在文档底部出现上一页和下一页按钮。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//unpkg.com/docsify-pagination/dist/docsify-pagination.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="代码高亮"><a class="header-anchor" href="#代码高亮"></a>代码高亮</h4>
<p>docsify 内置的代码高亮工具是 Prism ，默认支持 CSS 、JavaScript 和 HTML 。如果需要其它语言，可以手动引入。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入 PHP 代码高亮插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//unpkg.com/prismjs/components/prism-php.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其它语言高亮插件可以查看 <a href="https://github.com/PrismJS/prism/tree/gh-pages/components" target="_blank" rel="noopener">Prims</a> 仓库。</p>
<h2 id="文档助手"><a class="header-anchor" href="#文档助手"></a>文档助手</h2>
<p>docsify 扩展了一些 markdown 的语法，但由于这篇文章是在 Hexo 里编写，无法通过 Hexo 直接展示出效果，建议查看<a href="https://docsify.js.org/#/zh-cn/helpers" target="_blank" rel="noopener">官方文档</a>了解详情。</p>
<h2 id="最后"><a class="header-anchor" href="#最后"></a>最后</h2>
<p>最后把整个项目上传到 GitHub Pages 上，一份在线文档就大功告成了。</p>
<p>整体使用下来还是挺顺畅的，基本和原来写文档的流程一样，如果不会用到 docsify 提供的 markdown 扩展语法，那就可以继续使用原有的 markdown 编辑器进行编写，加上现在大部分 markdown 编辑器都会提供同步预览，所以也不一定非得使用 docsify 提供的本地预览方案。</p>
<p>关于离线模式（PWA）和服务端渲染（SSR），因为目前用不上，所以就没有尝试。</p>
]]></content>
      <categories>
        <category>Web 综合</category>
      </categories>
      <tags>
        <tag>文档</tag>
        <tag>docsify</tag>
      </tags>
  </entry>
  <entry>
    <title>浅入浅出 Vue 组件</title>
    <url>/posts/bb61bbd3/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2018/07/30/5b5e7a54ebe8d.png" alt=""></p>
<p>为什么标题要叫“浅入浅出”呢？因为是刚开始学 Vue.js（以下简称 Vue ），没有做很深入的研究，只是跟着官方<a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">教程</a>和 <a href="https://cn.vuejs.org/v2/api/" target="_blank" rel="noopener">API</a> 一点点熟悉语法，所以标题就叫了个“浅入浅出”，而这篇博文也更像一篇学习笔记。</p>
<p>在学习官方<a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">教程</a>的时候，我发现模板语法、计算属性、条件和列表渲染，还有事件处理，基本看一遍教程，上手熟悉下就基本都能掌握。唯独组件这块花了很多时间，并且在写一个 todolist 的 demo 时候踩了很多坑，又是看教程，又是查资料，才感觉初步掌握。</p>
<div class="note info">
            <p>这篇文章没有用到 Webpack 、Node.js 技术，也没有使用到 Vue 里的单文件组件，仅用最低成本方式，在页面里引用 Vue 的 CDN ，并通过 <code>Vue.component();</code> 方法直接创建组件。</p>
          </div>
<a id="more"></a>
<h2 id="一个待改造的实例"><a class="header-anchor" href="#一个待改造的实例"></a>一个待改造的实例</h2>
<iframe height='300' scrolling='no' title='1.非组件实例' src='//codepen.io/hooray/embed/djJbmr/?height=300&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/hooray/pen/djJbmr/' target="_blank" rel="noopener">1.非组件实例</a> by 代码小睿 (<a href='https://codepen.io/hooray' target="_blank" rel="noopener">@hooray</a>) on <a href='https://codepen.io' target="_blank" rel="noopener">CodePen</a>.
</iframe>
<p>这是一个练习的实例，也是按照官方教程一步步走下来制作完成了，里面涉及了蛮多比如循环、条件判断、计算属性这些知识点，由于没有什么难度，实现过程就不说了，主要实现了以下几个功能：</p>
<ul>
<li>基本 todolist 功能，可新增、删除 todolist 项</li>
<li>可对 todolist 项设置为完成（删除线），并可撤销</li>
<li>可对 todolist 项编辑（双击）</li>
<li>可统计当前 todolist 总数、已完成数、未完成数</li>
</ul>
<p>下面就会在这个实例的基础上，把它改造成一个 todolist 的组件。</p>
<h2 id="改造"><a class="header-anchor" href="#改造"></a>改造</h2>
<h3 id="组件注册"><a class="header-anchor" href="#组件注册"></a>组件注册</h3>
<p>首先确认组件名，在 Vue 里可以采用 kebab-case（短横线分隔）或者 PascalCase（驼峰式）两种命名方式，区别在于组件名采用 PascalCase 命名时，自定义元素支持两种命名法，而组件名采用 kebab-case 命名时，自定义元素也必须使用 kebab-case 命名。</p>
<p><strong>kebab-case 命名</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component-name'</span>, &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component-name</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component-name</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>PascalCase 命名</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'myComponentName'</span>, &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">myComponentName</span>&gt;</span><span class="tag">&lt;/<span class="name">myComponentName</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 或者 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component-name</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component-name</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里我采用的是 kebab-case 的命名方式，取名叫 <code>todo-list</code> ，然后把实例里的部分选项，直接复制到组件注册的代码里，如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'todo-list'</span>, &#123;</span><br><span class="line">    <span class="comment">// 注册局部指令</span></span><br><span class="line">    directives: &#123;</span><br><span class="line">        select: &#123;</span><br><span class="line">            inserted: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">                el.select();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        undoLen: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.lists.map(<span class="function"><span class="keyword">function</span>(<span class="params">list</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!list.isDone)&#123;</span><br><span class="line">                    len += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> len;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 事件</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">        edit: <span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">this</span>.lists[index].isDone)&#123;</span><br><span class="line">                <span class="keyword">this</span>.lists[index].editText = <span class="keyword">this</span>.lists[index].text;</span><br><span class="line">                <span class="keyword">this</span>.lists[index].isEdit = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        editInput: <span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.lists[index].text = <span class="keyword">this</span>.lists[index].editText;</span><br><span class="line">            <span class="keyword">this</span>.lists[index].isEdit = <span class="literal">false</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        remove: <span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.lists.splice(index, <span class="number">1</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        toggleDone: <span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.lists[index].isDone = <span class="keyword">this</span>.lists[index].isDone ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<div class="note primary">
            <p>因为组件是可复用的 Vue 实例，所以它们与 <code>new Vue()</code> 接收相同的选项，例如 <code>data</code> 、<code>computed</code> 、<code>watch</code> 、<code>methods</code> 以及生命周期钩子等。仅有的例外是像 <code>el</code> 这样根实例特有的选项。</p>
          </div>
<h3 id="组件模板"><a class="header-anchor" href="#组件模板"></a>组件模板</h3>
<p>接下来就是要注册组件模板，首先确定演示 demo 中列表和底部的统计是要做成组件，而输入框和确认按钮还是实例里的。确认好组件部分后，首先在页面上增加一段 <code>&lt;script type=&quot;text/x-template&quot;&gt;&lt;/script&gt;</code> ，然后把列表和底部统计的代码复制到里面，最后给这段 <code>script</code> 标签增加一个 ID：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/x-template"</span> <span class="attr">id</span>=<span class="string">"todolistTemp"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">        &lt;ul v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">"activeClass"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(list, index) in lists"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"!list.isEdit"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;done: list.isDone&#125;"</span> @<span class="attr">dblclick.prevent</span>=<span class="string">"edit(index)"</span>&gt;</span></span><span class="template-variable">&#123;&#123;list.text&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> @<span class="attr">click</span>=<span class="string">"toggleDone(index)"</span> <span class="attr">v-if</span>=<span class="string">"!list.isDone"</span>&gt;</span>完成<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> @<span class="attr">click</span>=<span class="string">"toggleDone(index)"</span> <span class="attr">v-else</span>&gt;</span>撤回<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> @<span class="attr">click</span>=<span class="string">"remove(index)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span></span><br><span class="line"><span class="actionscript">                &lt;template v-<span class="keyword">else</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"list.editText"</span> @<span class="attr">keyup.enter</span>=<span class="string">"editInput(index)"</span> <span class="attr">v-select</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"editInput(index)"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>当前一共有 </span><span class="template-variable">&#123;&#123;lists.length&#125;&#125;</span><span class="xml"> 条 todo-list，</span><span class="template-variable">&#123;&#123;undoLen&#125;&#125;</span><span class="xml"> 条未完成，</span><span class="template-variable">&#123;&#123;lists.length - undoLen&#125;&#125;</span><span class="xml"> 条已完成<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<div class="note primary">
            <p>组件模板必须只有一个根元素，如果有多个则会报错：<strong>Component template should contain exactly one root element.</strong> 这也是为什么我在上面代码里，在列表和统计代码外增加一个 <code>div</code> 标签的原因。</p>
          </div>
<p>模板创建好后，到组件注册代码里关联一下（其实可以把 HTML 代码直接写到 <code>template</code> 参数里，但这样就不方便维护了）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'todo-list'</span>, &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">    template: <span class="string">'#todolistTemp'</span>,</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>现在我的 todo-list 组件就基本注册创建好了，然后我在页面里就可以直接调用 <code>&lt;todo-list&gt;&lt;/todo-list&gt;</code> 就可以了，就像这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"text"</span> @<span class="attr">keyup.enter</span>=<span class="string">"add"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo-list</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>万事俱备，那就来运行下看看，运行后发现页面上并看不到组件，并且代码报错了：</p>
<p><img src="https://i.loli.net/2018/07/30/5b5ec758acf4c.png" alt=""></p>
<p>报错的信息大概意思是说 activeClass 和 lists 这两个属性或方法未定义，但我命名在实例里定义过这两个参数了啊，为什么组件里会提示这个错误呢？原因就是因为没有把数据传递到组件里。</p>
<h3 id="通过-props-向组件传值"><a class="header-anchor" href="#通过-props-向组件传值"></a>通过 props 向组件传值</h3>
<p>因为没有给组件传值，所以实例里定义的数据在组件里无法直接使用，需要用下面这个方法给组件传入数据，首先在组件调用的时候，可以设置传入的数据：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">todo-list</span> <span class="attr">:lists</span>=<span class="string">"lists"</span> <span class="attr">:active-class</span>=<span class="string">"activeClass"</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后在组件注册里定义 props ：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'todo-list'</span>, &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">    props: [<span class="string">'lists'</span>, <span class="string">'activeClass'</span>],</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<div class="note primary">
            <p>因为在 HTML 中的特性名是大小写不敏感的，所以浏览器会把所有大写字符解释为小写字符。所以在模板里使用时，要使用等价的 kebab-case 命名。</p>
          </div>
<h2 id="最终效果"><a class="header-anchor" href="#最终效果"></a>最终效果</h2>
<p>最终运行成功，也没有报错了，效果如下：</p>
<iframe height='300' scrolling='no' title='2.组件注册' src='//codepen.io/hooray/embed/rrpaKL/?height=300&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/hooray/pen/rrpaKL/' target="_blank" rel="noopener">2.组件注册</a> by 代码小睿 (<a href='https://codepen.io/hooray' target="_blank" rel="noopener">@hooray</a>) on <a href='https://codepen.io' target="_blank" rel="noopener">CodePen</a>.
</iframe>]]></content>
      <categories>
        <category>Vue 相关</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue组件</tag>
      </tags>
  </entry>
  <entry>
    <title>响应式设计通过 padding 实现固定比例展示图片</title>
    <url>/posts/72a9e44f/</url>
    <content><![CDATA[<p>上个月写过一篇《<a href="/posts/72a9e44f/" title="响应式设计通过 padding 实现固定比例展示图片">响应式设计通过 padding 实现固定比例展示图片</a>》的文章，使用占位图解决了当图片尺寸不同情况下，如何在响应式设计下做统一展示。</p>
<p>今天看到有网友在那篇文章下面留言说，通过 <code>padding</code> 也可以解决这问题，其实之前前同事也在朋友圈和我说过，我突然意识到我可能错过了什么，于是连忙查了相关资料，发现确实是个不错的思路，所以这篇文章就记录一下这个解决方法。</p>
<a id="more"></a>
<h2 id="解决思路"><a class="header-anchor" href="#解决思路"></a>解决思路</h2>
<p>首先我们要了解一个知识点，就是<strong>当任意方向的 <code>padding</code> 设为百分比时，都是相对于宽度计算的</strong>。</p>
<p>明白了这点，我们就可以通过设置 <code>padding-top</code> 或者 <code>padding-bottom</code> 来实现一个我们想要的高宽比，举个例子，比如我们想要一个 1:1 的正方形：</p>
<iframe height='400' scrolling='no' title='1.响应式设计通过padding实现固定比例展示图片' src='//codepen.io/hooray/embed/GBpKgN/?height=400&theme-id=0&default-tab=css,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/hooray/pen/GBpKgN/' target="_blank" rel="noopener">1.响应式设计通过padding实现固定比例展示图片</a> by 代码小睿 (<a href='https://codepen.io/hooray' target="_blank" rel="noopener">@hooray</a>) on <a href='https://codepen.io' target="_blank" rel="noopener">CodePen</a>.
</iframe>
<p>或者是高宽比为 1:2 的长方形：</p>
<iframe height='300' scrolling='no' title='2.响应式设计通过padding实现固定比例展示图片' src='//codepen.io/hooray/embed/PBPowB/?height=300&theme-id=0&default-tab=css,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/hooray/pen/PBPowB/' target="_blank" rel="noopener">2.响应式设计通过padding实现固定比例展示图片</a> by 代码小睿 (<a href='https://codepen.io/hooray' target="_blank" rel="noopener">@hooray</a>) on <a href='https://codepen.io' target="_blank" rel="noopener">CodePen</a>.
</iframe>
<p>可以看出，上面两个案例里的 <code>padding-top</code> 刚好为<strong>高/宽</strong>的值，那么接下来要做的就简单了，既然容器的宽高比能够定死，那么容器里面的图片，只要拉伸到和容器一样的宽和高就可以了，就像这样：</p>
<iframe height='300' scrolling='no' title='3.响应式设计通过padding实现固定比例展示图片' src='//codepen.io/hooray/embed/zLvYLz/?height=300&theme-id=0&default-tab=css,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/hooray/pen/zLvYLz/' target="_blank" rel="noopener">3.响应式设计通过padding实现固定比例展示图片</a> by 代码小睿 (<a href='https://codepen.io/hooray' target="_blank" rel="noopener">@hooray</a>) on <a href='https://codepen.io' target="_blank" rel="noopener">CodePen</a>.
</iframe>
<p>这里我将容器设为相对定位，图片设为决定定位，并且高度和宽度均为 100% ，这样图片和容器的高宽就一样了。</p>
<p>最后来看下在实际页面中的应用，这里我分别用三种尺寸的图片（200*200、200*220、180*200）来模拟图片尺寸比例不同时，如何在响应式设计下实现统一比例的展示效果：</p>
<iframe height='300' scrolling='no' title='4.响应式设计通过padding实现固定比例展示图片' src='//codepen.io/hooray/embed/YjXmXg/?height=300&theme-id=0&default-tab=css,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/hooray/pen/YjXmXg/' target="_blank" rel="noopener">4.响应式设计通过padding实现固定比例展示图片</a> by 代码小睿 (<a href='https://codepen.io/hooray' target="_blank" rel="noopener">@hooray</a>) on <a href='https://codepen.io' target="_blank" rel="noopener">CodePen</a>.
</iframe>
<h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2>
<p>这个方法比起占位图的方法好处自然不用说，省去了制作/修改占位图的时间。但也有一定缺陷，就是这方法实际会强制拉伸图片为我们设置的高宽比，假设我们设置的高宽比是 1:2，但如果实际数据源提供的图片是正方形的话，强制拉伸后，图片就变形了。比起 <code>占位图</code> + <code>background-image:cover;</code> 的方法，对图片进行裁切，牺牲了部分内容的展现，保证了图片不会变形。</p>
<p>这两种方法各有取舍，看业务需求可以自由选择。</p>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><a href="https://www.zhangxinxu.com/wordpress/2017/08/css-percent-padding-image-layout/" target="_blank" rel="noopener">CSS百分比padding实现比例固定图片自适应布局</a></li>
</ul>
]]></content>
      <categories>
        <category>Web 综合</category>
      </categories>
      <tags>
        <tag>响应式设计</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3 Flex 布局入门</title>
    <url>/posts/6d2f7931/</url>
    <content><![CDATA[<p>说来惭愧，对于 Flex 的了解都是碰到需求时，然后临时百度找现成的，一直没系统的学习过 Flex ，趁周末没什么事，抽了几小时学习并整理了这篇入门文档，方便自己以后快速查阅。</p>
<a id="more"></a>
<div class="note warning">
            <p>考虑移动端分辨率的情况，本文提供 CodePen 的演示，建议在 PC 端进行查看。</p>
          </div>
<h2 id="基本概念"><a class="header-anchor" href="#基本概念"></a>基本概念</h2>
<p>Flex 全称 Flexible Box ，意思就是“灵活的盒子”，也就是给盒模型提供最大的灵活性，我们也可以称它为“弹性布局”。</p>
<p>我们可以给任何一个容器指定为 Flex 布局，就像这样：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 行内元素也可以使用 Flex 布局 */</span></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info">
            <p>设为 Flex 布局以后，子元素的 <code>float</code> 、 <code>clear</code> 和 <code>vertical-align</code> 属性将失效。</p>
          </div>
<p>我们一般把采用 Flex 布局的元素称为 Flex 容器（Flex container），它的所有子元素成为 Flex 项目（Flex item）。容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做 main start ，结束位置叫做 main end ；交叉轴的开始位置叫做 cross start ，结束位置叫做 cross end 。项目默认沿主轴排列，单个项目占据的主轴空间叫做 main size ，占据的交叉轴空间叫做 cross size 。</p>
<p>上面一大堆基本概念描述的比较晦涩难懂，不如下面一张图来得清晰明了。</p>
<p><img src="https://i.loli.net/2018/07/02/5b3a1953d6df1.png" alt=""></p>
<h2 id="容器的属性"><a class="header-anchor" href="#容器的属性"></a>容器的属性</h2>
<p>容器一共有 6 个属性可以设置。</p>
<h3 id="1-flex-direction"><a class="header-anchor" href="#1-flex-direction"></a>1. flex-direction</h3>
<p>flex-direction 属性决定主轴的方向，也就是项目的排列方向，有 4 个可选值：</p>
<ul>
<li><strong>row</strong>（默认值）：主轴为水平方向，开始位置在左边（从左到右）</li>
<li><strong>row-reverse</strong>：主轴为水平方向，开始位置在右边（从右到左）</li>
<li><strong>column</strong>：主轴为垂直方向，开始位置在上边（从上到下）</li>
<li><strong>column-reverse</strong>：主轴为垂直方向，开始位置在下边（从下到上）</li>
</ul>
<p>具体可参考下面的演示：</p>
<iframe height='352' scrolling='no' title='flex-direction' src='//codepen.io/hooray/embed/XYOwjw/?height=352&theme-id=0&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/hooray/pen/XYOwjw/' target="_blank" rel="noopener">flex-direction</a> by 胡睿 (<a href='https://codepen.io/hooray' target="_blank" rel="noopener">@hooray</a>) on <a href='https://codepen.io' target="_blank" rel="noopener">CodePen</a>.
</iframe>
<h3 id="2-flex-wrap"><a class="header-anchor" href="#2-flex-wrap"></a>2. flex-wrap</h3>
<p>flex-wrap 属性决定是否换行，或者如何换行，有 3 个可选值：</p>
<ul>
<li><strong>nowrap</strong>（默认值）：不换行</li>
<li><strong>wrap</strong>：换行，第一行在最上方</li>
<li><strong>wrap-reverse</strong>：换行，第一行在最下方</li>
</ul>
<p>具体可参考下面的演示：</p>
<iframe height='352' scrolling='no' title='flex-wrap' src='//codepen.io/hooray/embed/oyVvNg/?height=352&theme-id=0&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/hooray/pen/oyVvNg/' target="_blank" rel="noopener">flex-wrap</a> by 胡睿 (<a href='https://codepen.io/hooray' target="_blank" rel="noopener">@hooray</a>) on <a href='https://codepen.io' target="_blank" rel="noopener">CodePen</a>.
</iframe>
<h3 id="3-align-items"><a class="header-anchor" href="#3-align-items"></a>3. align-items</h3>
<p>align-items 属性决定项目在交叉轴上如何对齐，有 5 个可选值：</p>
<ul>
<li><strong>flex-start</strong>：交叉轴的起点对齐</li>
<li><strong>flex-end</strong>：交叉轴的终点对齐</li>
<li><strong>center</strong>：交叉轴的中点对齐</li>
<li><strong>baseline</strong>：基准线对齐</li>
<li><strong>stretch</strong>（默认值）：如果项目未设置高度或设为 auto ，将撑满整个容器的高度</li>
</ul>
<p>具体可参考下面的演示：</p>
<iframe height='422' scrolling='no' title='align-items' src='//codepen.io/hooray/embed/xzBWGO/?height=422&theme-id=0&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/hooray/pen/xzBWGO/' target="_blank" rel="noopener">align-items</a> by 胡睿 (<a href='https://codepen.io/hooray' target="_blank" rel="noopener">@hooray</a>) on <a href='https://codepen.io' target="_blank" rel="noopener">CodePen</a>.
</iframe>
<h3 id="4-justify-content"><a class="header-anchor" href="#4-justify-content"></a>4. justify-content</h3>
<p>justify-content 属性决定项目在主轴上的对齐方式，有 5 个可选值：</p>
<ul>
<li><strong>flex-start</strong>（默认值）：左对齐</li>
<li><strong>flex-end</strong>：右对齐</li>
<li><strong>center</strong>：居中</li>
<li><strong>space-between</strong>：两端对齐，项目之间间隔相等</li>
<li><strong>space-around</strong>：项目两侧间隔相等，也就是项目之间间隔比项目与两侧间隔大一倍</li>
</ul>
<p>具体可参考下面的演示：</p>
<iframe height='352' scrolling='no' title='justify-content' src='//codepen.io/hooray/embed/jKJWqV/?height=352&theme-id=0&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/hooray/pen/jKJWqV/' target="_blank" rel="noopener">justify-content</a> by 胡睿 (<a href='https://codepen.io/hooray' target="_blank" rel="noopener">@hooray</a>) on <a href='https://codepen.io' target="_blank" rel="noopener">CodePen</a>.
</iframe>
<h3 id="5-align-content"><a class="header-anchor" href="#5-align-content"></a>5. align-content</h3>
<p>align-content 属性决定了当有多根轴线时如何对齐（如果只有一根轴线则不起作用），有 6 个可选值：</p>
<ul>
<li><strong>flex-start</strong>：与交叉轴的起点对齐</li>
<li><strong>flex-end</strong>：与交叉轴的终点对齐</li>
<li><strong>center</strong>：与交叉轴的中点对齐</li>
<li><strong>space-between</strong>：与交叉轴两端对齐，轴线之间的间隔平均分布</li>
<li><strong>space-around</strong>：每根轴线两侧间隔都相等，也就是轴线之间间隔比轴线与两侧间隔大一倍</li>
<li><strong>stretch</strong>（默认值）：轴线占满整个交叉轴</li>
</ul>
<p>具体可参考下面的演示：</p>
<iframe height='570' scrolling='no' title='align-content' src='//codepen.io/hooray/embed/rKRdJL/?height=570&theme-id=0&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/hooray/pen/rKRdJL/' target="_blank" rel="noopener">align-content</a> by 胡睿 (<a href='https://codepen.io/hooray' target="_blank" rel="noopener">@hooray</a>) on <a href='https://codepen.io' target="_blank" rel="noopener">CodePen</a>.
</iframe>
<h3 id="6-flex-flow"><a class="header-anchor" href="#6-flex-flow"></a>6. flex-flow</h3>
<p>flex-flow 属性是 flex-direction 属性和 flex-wrap 属性的简写形式，默认值分是 <code>row nowrap</code> ，语法如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="项目的属性"><a class="header-anchor" href="#项目的属性"></a>项目的属性</h2>
<p>项目也有 6 个属性可以设置。</p>
<h3 id="1-align-self"><a class="header-anchor" href="#1-align-self"></a>1. align-self</h3>
<p>align-self 属性可单独设置某个项目的对齐方式，有 6 个可选值：</p>
<ul>
<li><strong>auto</strong>（默认值）：继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch</li>
<li><strong>flex-start</strong>：交叉轴的起点对齐</li>
<li><strong>flex-end</strong>：交叉轴的终点对齐</li>
<li><strong>center</strong>：交叉轴的中点对齐</li>
<li><strong>baseline</strong>：基准线对齐</li>
<li><strong>stretch</strong>：如果项目未设置高度或设为 auto ，将撑满整个容器的高度</li>
</ul>
<p>具体可参考下面的演示：</p>
<iframe height='422' scrolling='no' title='align-self' src='//codepen.io/hooray/embed/WymJvQ/?height=422&theme-id=0&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/hooray/pen/WymJvQ/' target="_blank" rel="noopener">align-self</a> by 胡睿 (<a href='https://codepen.io/hooray' target="_blank" rel="noopener">@hooray</a>) on <a href='https://codepen.io' target="_blank" rel="noopener">CodePen</a>.
</iframe>
<h3 id="2-flex-grow"><a class="header-anchor" href="#2-flex-grow"></a>2. flex-grow</h3>
<p>flex-grow 属性定义了项目的放大比例，默认为 0 （负值对该属性无效），如果存在剩余空间，也不放大。</p>
<p>具体可参考下面的演示：</p>
<iframe height='365' scrolling='no' title='flex-grow' src='//codepen.io/hooray/embed/BVbxrj/?height=365&theme-id=0&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/hooray/pen/BVbxrj/' target="_blank" rel="noopener">flex-grow</a> by 胡睿 (<a href='https://codepen.io/hooray' target="_blank" rel="noopener">@hooray</a>) on <a href='https://codepen.io' target="_blank" rel="noopener">CodePen</a>.
</iframe>
<h3 id="3-flex-shrink"><a class="header-anchor" href="#3-flex-shrink"></a>3. flex-shrink</h3>
<p>flex-shrink 属性定义了项目的缩小比例，默认为 1 （负值对该属性无效），如果空间不足，该项目将缩小。</p>
<p>具体可参考下面的演示：</p>
<iframe height='365' scrolling='no' title='flex-shrink' src='//codepen.io/hooray/embed/WymKbL/?height=365&theme-id=0&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/hooray/pen/WymKbL/' target="_blank" rel="noopener">flex-shrink</a> by 胡睿 (<a href='https://codepen.io/hooray' target="_blank" rel="noopener">@hooray</a>) on <a href='https://codepen.io' target="_blank" rel="noopener">CodePen</a>.
</iframe>
<h3 id="4-flex-basis"><a class="header-anchor" href="#4-flex-basis"></a>4. flex-basis</h3>
<p>flex-basis 属性定义了在分配多余空间之前，项目占据主轴空间（main size）的大小。浏览器根据这个属性，计算主轴是否有多余空间。默认为 auto ，即项目的本来大小。</p>
<p>具体可参考下面的演示：</p>
<iframe height='365' scrolling='no' title='flex-basis' src='//codepen.io/hooray/embed/VdRBzy/?height=365&theme-id=0&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/hooray/pen/VdRBzy/' target="_blank" rel="noopener">flex-basis</a> by 胡睿 (<a href='https://codepen.io/hooray' target="_blank" rel="noopener">@hooray</a>) on <a href='https://codepen.io' target="_blank" rel="noopener">CodePen</a>.
</iframe>
<h3 id="5-order"><a class="header-anchor" href="#5-order"></a>5. order</h3>
<p>order 属性定义项目的排列顺序，数值越小，排越靠前，默认为 0 。</p>
<p>具体可参考下面的演示：</p>
<iframe height='365' scrolling='no' title='order' src='//codepen.io/hooray/embed/LraBrO/?height=365&theme-id=0&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/hooray/pen/LraBrO/' target="_blank" rel="noopener">order</a> by 胡睿 (<a href='https://codepen.io/hooray' target="_blank" rel="noopener">@hooray</a>) on <a href='https://codepen.io' target="_blank" rel="noopener">CodePen</a>.
</iframe>
<h3 id="6-flex"><a class="header-anchor" href="#6-flex"></a>6. flex</h3>
<p>flex属性是 flex-grow 属性， flex-shrink 属性和 flex-basis 属性的简写，默认为 <code>0 1 auto</code> ，后两个属性可选，语法如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">flex</span>: none | auto | [ &lt;flex-grow&gt; &lt;flex-shrink&gt;? || &lt;flex-basis&gt; ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="兼容性"><a class="header-anchor" href="#兼容性"></a>兼容性</h2>
<p>在 <a href="https://caniuse.com/" target="_blank" rel="noopener">Can I Use</a> 网站可以准确的查看到 Flex 的兼容性，如下图：</p>
<p><img src="https://i.loli.net/2018/07/03/5b3b13e5061c8.png" alt=""></p>
<p>可以看出各大浏览器对 Flex 的支持比较全面，是个可以放心使用的属性。</p>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><a href="https://www.toobler.com/css-flexbox-an-exploration/" target="_blank" rel="noopener">CSS Flexbox – An Exploration</a></li>
<li><a href="https://www.cnblogs.com/sxz2008/p/6635196.html" target="_blank" rel="noopener">CSS3 Flex布局（伸缩布局盒模型）学习</a></li>
</ul>
]]></content>
      <categories>
        <category>Web 综合</category>
      </categories>
      <tags>
        <tag>flex</tag>
        <tag>flex布局</tag>
        <tag>css3</tag>
      </tags>
  </entry>
  <entry>
    <title>响应式设计如何统一展示不同比例尺寸的图片</title>
    <url>/posts/92a3b5b7/</url>
    <content><![CDATA[<p>在做响应式页面的时候，有时候会遇到这样的情况，比如一个商品列表页，商品图的宽高比是 1:1 ，也就是正方形，但接口提供的数据里，图片的尺寸、比例均不统一，有的是 200*200 ，有的是 220*200 ，有的又是 180*200 ，面对这种情况，前端有什么样的应对方法呢？</p>
<a id="more"></a>
<h2 id="场景模拟"><a class="header-anchor" href="#场景模拟"></a>场景模拟</h2>
<p>针对上面的描述，我们先把真实场景模拟出来，看看如果不做任何处理，会是怎么样的展示效果？</p>
<div style="margin:0 auto;max-width:375px"><iframe height='600' scrolling='no' title='1-响应式设计统一展示不同比例尺寸的图片' src='//codepen.io/hooray/embed/pKQQVw/?height=600&theme-id=0&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/hooray/pen/pKQQVw/' target="_blank" rel="noopener">1-响应式设计统一展示不同比例尺寸的图片</a> by 胡睿 (<a href='https://codepen.io/hooray' target="_blank" rel="noopener">@hooray</a>) on <a href='https://codepen.io' target="_blank" rel="noopener">CodePen</a>.
</iframe></div>
<p>可以看到，我分别用了 3 种尺寸的图片代表商品图，因为是做响应式，图片尺寸无法写死，所以图片外层容器的宽度我设为 50% ，图片则宽度设为 100% ，高度不设置，这样图片可以根据不同分辨率等比缩放。</p>
<p>但最终呈现出来的效果，却因为图片比例尺寸不统一导致展示效果不整体。</p>
<h2 id="解决方案"><a class="header-anchor" href="#解决方案"></a>解决方案</h2>
<blockquote>
<p>前端展示的问题，当然优先还是考虑用 CSS 来解决。</p>
</blockquote>
<p>首先，我们先确定解决思路，想让展示的图片统一，有两种办法，一种就是把宽高写死，不管是把图片的宽高写死，或者把图片外层容器的宽高写死，都可以解决这个问题。</p>
<p>但这方法并不适用于响应式的页面，那我就考虑另一种办法，就是把图片宽高比例写死。一定有人有疑问了， CSS 还可以设置图片的宽高比例？</p>
<div class="note info">
            <p>下面的这个方法虽然不太优雅，但确实能解决这类问题。</p>
          </div>
<p>其实我们并不需要去设置图片的宽高比例，只需要准备一张一样宽高比例的 PNG 透明图即可，可以把这张图理解为“占位图”。比如这里我们的宽高比例是 1:1 ，那只需准备一张 1*1 的透明图，然后 img 标签引用这张透明图，真实的展示图通过设置 <code>background-image</code> 展示出来即可。我们来看看效果如何：</p>
<div style="margin:0 auto;max-width:375px"><iframe height='600' scrolling='no' title='2-响应式设计统一展示不同比例尺寸的图片' src='//codepen.io/hooray/embed/XYoWMe/?height=600&theme-id=0&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/hooray/pen/XYoWMe/' target="_blank" rel="noopener">2-响应式设计统一展示不同比例尺寸的图片</a> by 胡睿 (<a href='https://codepen.io/hooray' target="_blank" rel="noopener">@hooray</a>) on <a href='https://codepen.io' target="_blank" rel="noopener">CodePen</a>.
</iframe></div>
<p>如果有需要，可以给图片设置下 <code>background-size:cover;</code> 和 <code>background-position:center;</code> 样式，这样可以让背景图进行填充并且居中展示。</p>
<h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2>
<p>这个办法其实算是剑走偏锋了，在实际生产环境中，如果在数据源不可控的情况下，才会使用这种办法来处理。</p>
<p>但如果在数据源可控的情况下，建议去和接口或者后台开发人员沟通，最好在上传的时候就将图片裁切好前端所需要的尺寸，一劳永逸。</p>
]]></content>
      <categories>
        <category>Web 综合</category>
      </categories>
      <tags>
        <tag>响应式设计</tag>
      </tags>
  </entry>
  <entry>
    <title>Atom 备份神器 —— Sync-settings</title>
    <url>/posts/e7a857c2/</url>
    <content><![CDATA[<p>当 Atom 的扩展越装越多，配置也越来越偏离了系统默认设置时，一旦电脑重装后需要复原开发环境，这将是一件比较头疼的事。</p>
<p>今天就推荐一个扩展，可以解决这一问题，那就是 <a href="https://atom.io/packages/sync-settings" target="_blank" rel="noopener">Sync-settings</a> ，根据扩展介绍“ Synchronize settings, keymaps, user styles, init script, snippets and installed packages across Atom instances. ”，简言之就是可以同步 Atom 的设置文件、自定义快捷键、用户风格、初始化脚本及代码片段，还支持已安装的插件同步。</p>
<a id="more"></a>
<h2 id="安装"><a class="header-anchor" href="#安装"></a>安装</h2>
<p>在安装扩展里搜索“ sync-settings ”并安装，安装好后点击设置会看见下图：</p>
<p><img src="https://i.loli.net/2018/06/04/5b1415c677142.png" alt=""></p>
<h2 id="设置"><a class="header-anchor" href="#设置"></a>设置</h2>
<p>第一步，打开自己的 github 创建一个 <a href="https://github.com/settings/tokens/new" target="_blank" rel="noopener">personal access token</a>（记住要勾选 gist 权限，见下图），然后复制生成的 token 序列粘贴到插件的上图中标 1 的红框里。</p>
<p><img src="https://i.loli.net/2018/06/04/5b14160d26aaa.png" alt=""></p>
<p>第二步，打开 github 的 <a href="https://gist.github.com/" target="_blank" rel="noopener">gist</a> 服务，创建一个 gist，复制生成 gistID 粘贴到插件的上图中标 2 的红框里。</p>
<p><img src="https://i.loli.net/2018/06/04/5b141639a1061.png" alt=""></p>
<p><img src="https://i.loli.net/2018/06/04/5b14164447dd5.png" alt=""></p>
<h2 id="备份与复原"><a class="header-anchor" href="#备份与复原"></a>备份与复原</h2>
<p>以上就完成了所有配置，那如何进行备份呢？在文档编辑页面键入快捷键 <code>Ctrl + Shift + P</code> ，输入“ sync ”就能看到以下选项：</p>
<p><img src="https://i.loli.net/2018/06/04/5b1416670ffd1.png" alt=""></p>
<p>选择第二个 Backup 就会开始进行备份了，备份好后，右上角会出现备份成功的提示：</p>
<p><img src="https://i.loli.net/2018/06/04/5b14168178223.png" alt=""></p>
<p>复原的话，只需选择 Restore 就会自动进行复原，包括扩展也会同步安装，但有一点需要注意的是，扩展里的配置则不会备份，这个是需要手动去重新设置的，但即便如此，也已经节省了我们很大一部分时间了。</p>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><a href="https://blog.csdn.net/crper/article/details/47291063" target="_blank" rel="noopener">Atom编辑器折腾记_(12)Sync-setttings(插件-备份神器)</a></li>
</ul>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>Atom</tag>
        <tag>备份</tag>
        <tag>sync-settings</tag>
      </tags>
  </entry>
  <entry>
    <title>Vultr 搭建 SS</title>
    <url>/posts/ef443e45/</url>
    <content><![CDATA[<p>嘘 ~ 安静，开始了。</p>
<a id="more"></a>
<h2 id="注册-Vultr"><a class="header-anchor" href="#注册-Vultr"></a>注册 Vultr</h2>
<p>进入 <a href="https://www.vultr.com/?ref=7591338" target="_blank" rel="noopener">Vultr</a> 官网正常注册，然后通过邮箱激活账号。</p>
<p><s>这里特别说明一下，你可以上网上找一些优惠活动，比如下面这个：</s></p>
<p><s><a href="https://www.vultr.com/promo25b/?service=promo25b" target="_blank" rel="noopener">注册后充值 $10 送 $25 活动（不保证长期有效）</a></s></p>
<p>充值支持支付宝，所以购买还是很方便的。<s>不过通过上面那活动注册的，必须用 paypal 充值才能享受福利。</s></p>
<h2 id="购买服务器"><a class="header-anchor" href="#购买服务器"></a>购买服务器</h2>
<p>首先选择地区，默认是日本东京。</p>
<p><img src="https://i.loli.net/2018/05/26/5b097d1381ea2.png" alt=""></p>
<p>然后选择服务器的系统，这里就默认不用改动，选择 CentOS 7 x64 即可。</p>
<p><img src="https://i.loli.net/2018/05/26/5b097e048ab00.png" alt=""></p>
<p>接着选择服务器规格，这里会发现日本东京 $2.5 每月的服务器已经售罄了，只能选择 $5 每月的了。如果想省钱的话，可以返回第一步，多切换不同的地区看看，有哪些地区还有 $2.5 每月的服务器。</p>
<p><img src="https://i.loli.net/2018/05/26/5b097eca4965d.png" alt=""></p>
<div class="note info">
            <ul><li>Vultr 是按小时实时扣费的，并不是按月扣费的。</li><li>如果想创建多个服务器，需要提交申请，我的申请理由是：use to set up my server, like blog, bbs, etc.</li></ul>
          </div>
<p>最后点击“ Deploy Now ”创建服务器吧，创建好稍微等一会，等状态变成 Running 表示服务器已经启动好了。</p>
<p><img src="https://i.loli.net/2018/05/26/5b09830d2c868.png" alt=""></p>
<h2 id="连接服务器"><a class="header-anchor" href="#连接服务器"></a>连接服务器</h2>
<p>这里我使用的是 <a href="http://www.netsarang.com/products/xsh_overview.html" target="_blank" rel="noopener">XShell</a> 连接服务器。</p>
<p>首先点开刚才创建好的服务器，看到这个界面：</p>
<p><img src="https://i.loli.net/2018/05/26/5b09844e89dca.png" alt=""></p>
<div class="note info">
            <p>IP Address：服务器IP<br>Username：登录用户名<br>Password：登录密码</p>
          </div>
<p>接下来打开 XShell ，点击“文件 - 新建”，依次配置好服务器信息。</p>
<p><img src="https://i.loli.net/2018/05/27/5b0985f882f7a.png" alt=""></p>
<p><img src="https://i.loli.net/2018/05/27/5b098652979e2.png" alt=""></p>
<p>创建好后并连接，看到如下界面，则表示连接成功了。</p>
<p><img src="https://i.loli.net/2018/05/27/5b09870a28252.png" alt=""></p>
<h2 id="安装SS"><a class="header-anchor" href="#安装SS"></a>安装SS</h2>
<p>执行 <a href="https://teddysun.com/486.html" target="_blank" rel="noopener">shadowsocks 一键安装脚本</a></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">wget --<span class="keyword">no</span>-check-certificate -O shadowsocks-<span class="keyword">all</span>.<span class="keyword">sh</span> http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/teddysun/shadowsocks_install/master/shadowsocks-<span class="keyword">all</span>.<span class="keyword">sh</span></span><br><span class="line">chmod +<span class="keyword">x</span> shadowsocks-<span class="keyword">all</span>.<span class="keyword">sh</span></span><br><span class="line">./shadowsocks-<span class="keyword">all</span>.<span class="keyword">sh</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> | tee shadowsocks-<span class="keyword">all</span>.<span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<p>可以一路默认安装，当然建议是安装的时候就把密码、端口，以及加密方式选择好，省得之后还得修改。</p>
<p>安装成功后会看到如下提示：</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">Congratulations, your_shadowsocks_version install completed!</span><br><span class="line">Your Server IP        :your_server_ip</span><br><span class="line">Your Server Port      :your_server_port</span><br><span class="line">Your Password         :your_password</span><br><span class="line">Your Encryption <span class="function"><span class="keyword">Method</span>:</span>your_encryption_method</span><br><span class="line"></span><br><span class="line">Your QR Code: (<span class="keyword">For</span> Shadowsocks Windows, OSX, Android <span class="keyword">and</span> iOS clients)</span><br><span class="line"> ss:<span class="comment">//your_encryption_method:your_password@your_server_ip:your_server_port</span></span><br><span class="line">Your QR Code <span class="keyword">has</span> been saved <span class="keyword">as</span> a PNG file path:</span><br><span class="line"> your_path.png</span><br><span class="line"></span><br><span class="line">Welcome <span class="keyword">to</span> visit:https:<span class="comment">//teddysun.com/486.html</span></span><br><span class="line">Enjoy it!</span><br></pre></td></tr></table></figure>
<p>脚本默认创建是单用户的配置，如果要设置多用户，则需要到配置文件里修改配置，不同版本的配置文件路径也不同：</p>
<ul>
<li>Shadowsocks-Python 版：<code>/etc/shadowsocks-python/config.json</code></li>
<li>ShadowsocksR 版：<code>/etc/shadowsocks-r/config.json</code></li>
<li>Shadowsocks-Go 版：<code>/etc/shadowsocks-go/config.json</code></li>
<li>Shadowsocks-libev 版：<code>/etc/shadowsocks-libev/config.json</code></li>
</ul>
<div class="note info">
            <p>上面的配置文件路径保不准什么时候会变，就像网上大部分的教程都是说配置文件是 <code>/etc/shadowsocks.json</code> 这个路径一样。所以最简单的方法就是通过 <code>find / -name *.json</code> 查一下有哪些 json 文件。</p>
          </div>
<p>多端口多用户配置格式参考如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>:<span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="attr">"port_password"</span>:&#123;</span><br><span class="line">         <span class="attr">"8989"</span>:<span class="string">"password0"</span>,</span><br><span class="line">         <span class="attr">"9001"</span>:<span class="string">"password1"</span>,</span><br><span class="line">         <span class="attr">"9002"</span>:<span class="string">"password2"</span>,</span><br><span class="line">         <span class="attr">"9003"</span>:<span class="string">"password3"</span>,</span><br><span class="line">         <span class="attr">"9004"</span>:<span class="string">"password4"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line">    <span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置好后去开启对应的端口，修改 <code>/etc/sysconfig/iptables</code> 文件，增加如下一行（有几个端口就增加几行）：</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">-A RH-Firewall-<span class="number">1</span>-INPUT -m <span class="keyword">state</span> --state NEW -m tcp -p tcp --dport <span class="number">10000</span> -j ACCEPT</span><br></pre></td></tr></table></figure>
<p>修改完成后需要执行 <code>reboot</code> 重启服务器。</p>
<p>重启后无法无法使用新的端口，有可能是因为防火墙里没有允许该端口，则需要运行如下命令将端口添加到防火墙里：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">firewall-cmd <span class="attribute">--zone</span>=public <span class="attribute">--add-port</span>=80/tcp --permanent</span><br></pre></td></tr></table></figure>
<p>然后重新载入</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">firewall-<span class="keyword">cmd</span><span class="bash"> --reload</span></span><br></pre></td></tr></table></figure>
<div class="note info">
            <p>执行对应命令进入配置文件后，按 <code>i</code> 键进入编辑模式，左下角出现 <code>-- INSERT --</code> 字样后，表示可以开始编辑。<br>编辑完成后按 <code>ESC</code> 键退出编辑模式，左下角 <code>-- INSERT --</code> 字样消失，输入 <code>:wq</code> ，回车执行，这时候文件会保存并返回。</p>
          </div>
<h2 id="安装-TCP-加速软件"><a class="header-anchor" href="#安装-TCP-加速软件"></a>安装 TCP 加速软件</h2>
<p>因为服务器在国外，可能会不太稳定，这时候就很有必要安装 TCP 加速软件来提速，一般有锐速和 Google BBR 。</p>
<p>具体就不多介绍了，安装教程如下：</p>
<ul>
<li><a href="https://www.vultrcn.com/7.html" target="_blank" rel="noopener">Vultr 专用破解版锐速一键安装脚本</a>（推荐）</li>
<li><a href="https://www.vultrcn.com/5.html" target="_blank" rel="noopener">原版 &amp; 魔改版 Google BBR 拥塞控制算法一键安装脚本</a></li>
</ul>
<h2 id="最后"><a class="header-anchor" href="#最后"></a>最后</h2>
<p>最后下载对应的 <a href="https://www.shadowsocks.org/en/download/clients.html" target="_blank" rel="noopener">shadowsocks 客户端软件</a>，配置好，开始科学上网吧。</p>
<p>当然也可以配合我的上篇文章《<a href="/posts/b963d19b/" title="网件 R7000 开启科学上网">网件 R7000 开启科学上网</a>》，直接在路由器里配置好，也能科学上网。</p>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><a href="https://www.qcgzxw.cn/1640.html" target="_blank" rel="noopener">实战vultr搭建SSR+锐速——超速看youtube1080p</a></li>
<li><a href="http://vultr.aicnm.com/Vultr-VPS%E4%B8%BB%E6%9C%BA%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85Shadowsocks%EF%BC%88ss%EF%BC%89%E5%AE%8C%E6%95%B4%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">Vultr VPS主机快速安装Shadowsocks（ss）完整图文教程</a></li>
<li><a href="http://calonye.com/22419.html" target="_blank" rel="noopener">搬瓦工shadowsocks多用户配置教程</a></li>
<li><a href="https://www.vultrcn.com/6.html" target="_blank" rel="noopener">Vultr 一键搭建酸酸 Shad0ws0cks 图文教程（推荐）</a></li>
<li><a href="http://www.cnblogs.com/moxiaoan/p/5683743.html" target="_blank" rel="noopener">CentOS7使用firewalld打开关闭防火墙与端口</a></li>
<li><a href="https://www.vultrcn.com/9.html" target="_blank" rel="noopener">一键测试 Vultr 现有 15 个机房的 Ping 值延迟</a></li>
<li><a href="https://www.banwagongzw.com/76.html" target="_blank" rel="noopener">安装锐速时提示 Kernel not be matched 的解决办法</a></li>
</ul>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Vultr</tag>
        <tag>Shadowsocks</tag>
        <tag>科学上网</tag>
        <tag>翻墙</tag>
      </tags>
  </entry>
  <entry>
    <title>网件 R7000 开启科学上网</title>
    <url>/posts/b963d19b/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2018/05/20/5b0098fb5979d.png" alt=""></p>
<p>为了充分享受到 100M 带宽的效果，准备给家里换台路由器，在做了充足的功课后，决定购买网件的 R7000 ，而且也是看中了可以刷梅林改版固件，可以让路由器的可玩性更高。那是怎么样的可玩呢？今天我就通过 R7000 成功开启了科学上网(翻墙)。</p>
<p>因为网上的教程和我实际操作中有一点点差异，所以下面的内容主要是记录下我个人的配置流程。</p>
<a id="more"></a>
<h2 id="准备工作"><a class="header-anchor" href="#准备工作"></a>准备工作</h2>
<p>一台已经刷好梅林改版固件的 R7000 路由器。</p>
<p>实际上路由器并不是重点，梅林改版固件才是重点，有很多路由器都可以刷梅林固件，即便是网件的路由器，其它型号的也可以。</p>
<p>至于怎么刷梅林改版固件，我就不单独介绍了，网上有很多教程已经写得很详细了。像我比较偷懒，我买路由器的时候，就直接找了家可以帮忙刷固件的店铺，让店家帮我刷好。</p>
<p>固件下载地址： <a href="http://koolshare.cn/forum-96-1.html" target="_blank" rel="noopener">Koolshare 论坛</a></p>
<h2 id="安装-Shadowsocks"><a class="header-anchor" href="#安装-Shadowsocks"></a>安装 Shadowsocks</h2>
<p>Shadowsocks 也就是我们科学上网的工具，在安装 Shadowsocks 之前，我们需要先去“系统管理 - 系统设置”里设置一下，如下图所示：</p>
<p><img src="https://i.loli.net/2018/05/20/5b008d34553c9.png" alt=""></p>
<p>分别将：</p>
<p><code>Format JFFS partition at next boot</code> 设置为<strong>否</strong></p>
<p><code>Enable JFFS custom scrips and configs</code> 设置为<strong>是</strong></p>
<p>然后我们去“软件中心”安装“科学上网”，如果你能在“未安装”里找到“科学上网”，那就直接安装，如果找不到，那说明<s>有一股神秘的力量将</s>“科学上网”下架了，这个时候就需要进行离线安装了。</p>
<p>找到“<a href="https://github.com/koolshare/koolshare.github.io" target="_blank" rel="noopener">软件中心GitHub项目</a>”按钮，点击它。</p>
<p><img src="https://i.loli.net/2018/05/20/5b008f6e6d3cc.png" alt=""></p>
<p>在打开的 Github 页面里进入“shadowsocks”目录下，下载“shadowsocks.tar.gz”文件到本地。</p>
<p><img src="https://i.loli.net/2018/05/20/5b00900a8a504.png" alt=""></p>
<p>然后回到路由器界面，进入“离线安装”，选择并上传安装刚才下载的“shadowsocks.tar.gz”文件，等到提示安装完成，再回到“软件中心”界面，就能看到“科学上网”的图标了。</p>
<p><img src="https://i.loli.net/2018/05/20/5b0091316cd97.png" alt=""></p>
<blockquote>
<p>2019/2/20 更新<br>
软件中心GitHub项目也没有了，到<a href="https://github.com/hq450/fancyss_history_package/tree/master/fancyss_arm" target="_blank" rel="noopener">这里</a>下载离线安装包</p>
</blockquote>
<h2 id="配置-Shadowsocks"><a class="header-anchor" href="#配置-Shadowsocks"></a>配置 Shadowsocks</h2>
<p>安装好后，点击“科学上网”，首次进入会提示你去配置节点，如果没有提示，那就手动点击“节点管理 - 添加节点”。</p>
<p><img src="https://i.loli.net/2018/05/20/5b0092a2cf5fe.png" alt=""></p>
<p>然后就是在“编辑ss账号”里写入账号信息，因为我用的是<a href="https://duotai.love/" target="_blank" rel="noopener">多态</a>，它直接有提供 Shadow Suite 的配置信息，一模一样填入进去即可。</p>
<p><img src="https://i.loli.net/2018/05/20/5b0093c02d80f.png" alt=""></p>
<div class="note info">
            <p>使用模式：【1】gfwlist模式<br>节点别名：任意填写<br>服务器地址：域名<br>服务器端口：端口<br>密码：密码<br>加密方式：加密方式</p>
          </div>
<p>添加好后点击“应用”即可。</p>
<p>最后我们打开“科学上网开关”，接着软件会开始检测运行状态，出现两个 <strong>✓</strong> 则表示能科学上网啦~</p>
<p><img src="https://i.loli.net/2018/05/20/5b00958f16cfc.png" alt=""></p>
<h2 id="最后"><a class="header-anchor" href="#最后"></a>最后</h2>
<p>最后当然是先测试一下，先用浏览器打开看看是否正常：</p>
<p><img src="https://i.loli.net/2018/05/20/5b0096308f567.png" alt=""></p>
<p><img src="https://i.loli.net/2018/05/20/5b00964bd0e2a.png" alt=""></p>
<p>然后再用手机看看是否正常：</p>
<p><img src="https://i.loli.net/2018/05/20/5b009684b24e3.png" alt=""></p>
<p>可以看到，我手机并没有开启 VPN 也可以正常科学上网，这就是路由器配置 Shadowsocks 的好处，只要连到路由器，任何终端都无需配置，默认开启科学上网。</p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Shadowsocks</tag>
        <tag>科学上网</tag>
        <tag>翻墙</tag>
        <tag>路由器</tag>
        <tag>网件</tag>
        <tag>多态</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端使用 sessionStorage 实现返回上一页浏览的历史位置</title>
    <url>/posts/7765b5eb/</url>
    <content><![CDATA[<p>移动端列表页一般会采用滚动加载的方式，也就是滚动到靠近页面底部，自从触发加载下一页数据，整个过程通过 ajax 实现。但这也就出现了一个问题，比如当用户滚动到第三页，点击列表某一项进入详情页，这时候再返回列表页，会发现列表也数据被重置回第一页了，用户又得继续滑动才能回到之前浏览的历史位置。</p>
<p>这样的用户体验肯定是很糟糕的，那是否有合适的解决方案呢？</p>
<a id="more"></a>
<h2 id="PC-端是如何解决的"><a class="header-anchor" href="#PC-端是如何解决的"></a>PC 端是如何解决的</h2>
<p>碰到这个问题，我的第一反应是看看 PC 端是如何解决这问题的，然后发现 PC 端完美避开了这一问题， PC 端通过可以打开新页面这一特性，完全不会存在这一问题。</p>
<p>即使列表页不是通过打开新页面的方式，但 PC 端还有一个特性就是， PC 端的列表是分页的形式，也就是翻页的同时会刷新页面，页码会带在 URL 链接上，这样在返回的时候，可以精确的返回到指定的页面。</p>
<h2 id="移动端要如何解决"><a class="header-anchor" href="#移动端要如何解决"></a>移动端要如何解决</h2>
<p>PC 端的解决方案似乎无法移植到移动端，首先移动端没有打开新页面这功能（微信内置浏览器不支持）。其次，如果采用分页的方式，那用户体验又下降了，用户不仅需要手动去点击翻下一页，而且因为是跳转页面，用户也无法体验到 ajax 无缝刷新的特性。难道就没有合适的解决方案了么？</p>
<p>当然不是的！</p>
<p>通过查了些资料，并且手动写了个 demo ，发现通过使用 sessionStorage 可以完美解决这一问题。</p>
<h2 id="实现思路"><a class="header-anchor" href="#实现思路"></a>实现思路</h2>
<p>思路其实很简单，就是在用户每次加载页面数据的时候，将本次加载的列表 json 数据、当前页码保存到 sessionStorage 里（需要注意的是，列表 json 数据是需要累加的，假设用户滚动加载到第三页，则 sessionStorage 里要存放三页的列表数据）。</p>
<p>然后在用户点击列表某一项的时候，将当前列表距离页面顶部的距离记录下来，也存放到 sessionStorage 里即可（也可以给列表页增加一个滚动监听的事件，实时监听位置）。</p>
<p>当用户从其它页面返回到列表的时候，先判断 sessionStorage 里是否有数据，如果有，则直接将 sessionStorage 里的列表数据复原到页面上，当前页码也更新成 sessionStorage 里存放的页码，这样做的目的是实现用户滚动页面可以继续往后加载数据。最后通过 sessionStorage 里存放的页面位置，定位到之前的位置即可。</p>
<p>如果返回到列表页，没有 sessionStorage 数据，那就什么都不做，还是按原有功能实现即可。</p>
<div class="note info">
            <p>为什么不用 cookie 或者 localStorage 来实现？因为 sessionStorage 的特性最适合，关闭页面后自动失效。这样就不会出现用户下次打开列表页，还是显示之前的内容。</p>
          </div>
<h2 id="演示"><a class="header-anchor" href="#演示"></a>演示</h2>
<p><img src="https://i.loli.net/2018/05/11/5af5692d2b088.png" alt=""></p>
<p><img src="https://wx1.sinaimg.cn/mw690/60c18c1cgy1fr8b11n6ycg20a00k0qv8.gif" alt=""></p>
<script src='//gitee.com/hooray/mescroll-sessionStorage/widget_preview'></script>
<p> </p>
<div style="text-align: center">
  <div class="github-card"
    data-user="hooray"
    data-repo="mescroll-sessionStorage"
    data-height="200"
    data-width="100%"
    data-theme="default"
    data-target="undefined"
    data-client-id=""
    data-client-secret=""
  ></div>
</div>
<script src="/github-card-lib/githubcard.js"></script>
<h2 id="难点"><a class="header-anchor" href="#难点"></a>难点</h2>
<p>实现思路清晰后，核心部分反而没有什么难点，倒是在配合 <a href="http://www.mescroll.com" target="_blank" rel="noopener">MeScroll</a> 使用上，发现了几个需要注意的地方。</p>
<div class="note info">
            <p>不同的滚动加载控件需要根据控件本身一些功能设置实现我们想达到的效果</p>
          </div>
<h3 id="设置当前页码"><a class="header-anchor" href="#设置当前页码"></a>设置当前页码</h3>
<p>通过 <code>mescroll.setPageNum(num);</code> 可以设置当前 page.num 的值，但通过阅读源码发现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*设置page.num的值*/</span></span><br><span class="line">MeScroll.prototype.setPageNum = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.optUp.page.num = num - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>设置的页面会减 1 ，所以在触发 sessionStorage 进行设置页码的时候，需要手动加 1 。</p>
<h3 id="隐藏上拉加载状态"><a class="header-anchor" href="#隐藏上拉加载状态"></a>隐藏上拉加载状态</h3>
<p>在 demo 中我是使用 <code>mescroll.endBySize(dataSize, totalSize, systime);</code> 进行隐藏上拉加载的状态，通过阅读源码发现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*联网回调成功,结束下拉刷新和上拉加载</span></span><br><span class="line"><span class="comment"> * dataSize: 当前页的数据量(必传)</span></span><br><span class="line"><span class="comment"> * totalSize: 列表所有数据总数量(必传)</span></span><br><span class="line"><span class="comment"> * systime: 服务器时间 (可空)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MeScroll.prototype.endBySize = <span class="function"><span class="keyword">function</span>(<span class="params">dataSize, totalSize, systime</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hasNext;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.optUp.use &amp;&amp; totalSize != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> loadSize = (<span class="keyword">this</span>.optUp.page.num - <span class="number">1</span>) * <span class="keyword">this</span>.optUp.page.size + dataSize; <span class="comment">//已加载的数据总数</span></span><br><span class="line">        <span class="built_in">console</span>.log(loadSize, totalSize);</span><br><span class="line">        hasNext = loadSize &lt; totalSize; <span class="comment">//是否还有下一页</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.endSuccess(dataSize, hasNext, systime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方法实际上是通过 <code>( 当前页码 - 1 ) * 每页数量 + 当前页数量</code> 计算出已加载数据总数，然后去对比列表数据总数，判断出是否还有下一页。</p>
<p>既然理解了这个方法，那只要在复原 sessionStorage 里的列表数据后，模拟触发一次即可。</p>
<p>但这个方法里第一个参数 dataSize 并不好模拟，因为 sessionStorage 里只存放了列表数据合集。我的做法是通过 <code>数据合集数量 % 每页数量</code> 取出余数，这个余数其实就是我最后一次加载的列表数量，但需要注意的是，这个余数可能是 0 ，余数是 0 则代表最后一次加载的列表数量和每页数量一样，所以如果余数是 0 的时候，每页数量就是最后一次加载的列表数量。</p>
<div class="note info">
            <p>每页数量就是 page.size 的值，默认是 10</p>
          </div>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><a href="https://www.cnblogs.com/gaofengming/p/6149407.html" target="_blank" rel="noopener">h5页面使用sessionStorage滚动到上次浏览器位置</a></li>
<li><a href="http://www.mamicode.com/info-detail-2235267.html" target="_blank" rel="noopener">H5 本地存储localStorage的使用（返回前一页浏览的历史位置）</a></li>
</ul>
]]></content>
      <categories>
        <category>Web 综合</category>
      </categories>
      <tags>
        <tag>sessionStorage</tag>
        <tag>分页</tag>
      </tags>
  </entry>
  <entry>
    <title>Web APP 在线升级更新</title>
    <url>/posts/d8a12da8/</url>
    <content><![CDATA[<div class="note info">
            <p>本文提及的 webapp 指的是通过 HBuilder 打包出来的 APP</p>
          </div>
<p>APP 离不开一个功能，那就是更新，一般我们会选择去应用市场里统一更新，但 APP 如果本身带有检查更新并升级的功能，那就再好不过了。接下来我就拿一个实际的例子介绍下，我是如何做更新功能的。</p>
<a id="more"></a>
<h2 id="制作升级包"><a class="header-anchor" href="#制作升级包"></a>制作升级包</h2>
<p>在 HBuilder 中生成升级包文件，这里需要注意，生成升级包前记得把版本号先修改</p>
<p><img src="https://i.loli.net/2018/04/23/5adda1bfc8d6c.png" alt=""></p>
<p>选择好保存的路径，点确定即可，最终生成出来的升级包文件后缀是 .wgt 文件</p>
<p><img src="https://i.loli.net/2018/04/23/5adda297ad08d.png" alt=""></p>
<p>然后我们需要将升级包放到一个通过网址可以访问到的地址，比如：<a href="http://www.demo.com/H55D8AE4A.wgt" target="_blank" rel="noopener">http://www.demo.com/H55D8AE4A.wgt</a></p>
<h2 id="检查更新"><a class="header-anchor" href="#检查更新"></a>检查更新</h2>
<p>发起 ajax 请求检测是否有新版本</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'[这里替换连接地址，该连接地址返回版本号和升级包下载地址]'</span></span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">cb</span>)</span>&#123;</span><br><span class="line">    plus.runtime.getProperty(plus.runtime.appid, <span class="function"><span class="keyword">function</span>(<span class="params">inf</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cb.version != inf.version)&#123;</span><br><span class="line">            downloadWgt(cb.url);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            alert(<span class="string">'已经是最新版本'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>ajax 请求返回 json 数据如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="number">0.8</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"http://www.demo.com/H55D8AE4A.wgt"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="下载升级包"><a class="header-anchor" href="#下载升级包"></a>下载升级包</h2>
<p>从服务器上下载 wgt 升级包</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadWgt</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">    plus.nativeUI.showWaiting(<span class="string">'下载中...'</span>);</span><br><span class="line">    plus.downloader.createDownload(url, &#123;<span class="attr">filename</span>: <span class="string">'_doc/update/'</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">d, status</span>)</span>&#123;</span><br><span class="line">        plus.nativeUI.closeWaiting();</span><br><span class="line">        <span class="keyword">if</span>(status == <span class="number">200</span>)&#123;</span><br><span class="line">            installWgt(d.filename);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            plus.nativeUI.alert(<span class="string">'下载失败！'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="安装更新"><a class="header-anchor" href="#安装更新"></a>安装更新</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">installWgt</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">    plus.nativeUI.showWaiting(<span class="string">'安装中...'</span>);</span><br><span class="line">    plus.runtime.install(path, &#123;<span class="attr">force</span>: <span class="literal">true</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        plus.nativeUI.closeWaiting();</span><br><span class="line">        plus.nativeUI.alert(<span class="string">'更新完成，即将重启应用！'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            plus.runtime.restart();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        plus.nativeUI.closeWaiting();</span><br><span class="line">        plus.nativeUI.alert(<span class="string">'安装失败['</span> + e.code + <span class="string">']：'</span> + e.message);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2>
<p>基本是照着官方提供的 demo 做的，不太一样的地方是，官方 demo 里的升级包下载地址是写死的，我修改成通过接口将版本号和下载地址一起返回回来。</p>
<p>其次还有一些更好的优化体验，比如静默安装，每次启动 APP 先检查一次是否有更新，如果有则后台静默开始下载安装，安装完成后无需做提示，用户下次启动 APP 就是最新版。</p>
<p>最后就是，应用资源更新是违反 apple 的 appstore 政策的，我没尝试去上架，如果无法上架，有个解决办法，就是通过接口动态开启检查更新的界面，审核的时候关闭，审核通过就开启，当然还是不建议这样操作。本文更适用于 Android 版本。</p>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><a href="http://ask.dcloud.net.cn/article/182" target="_blank" rel="noopener">App资源在线升级更新</a></li>
</ul>
]]></content>
      <categories>
        <category>Web 综合</category>
      </categories>
      <tags>
        <tag>hbuilder</tag>
        <tag>webapp</tag>
      </tags>
  </entry>
  <entry>
    <title>gitignore如何忽略之前已提交的文件</title>
    <url>/posts/7d8efe4e/</url>
    <content><![CDATA[<p>做开发时，有些编译生成的代码我们希望不提交到 git 上，这时候就要使用 .gitignore 对文件/文件夹进行忽略，但有时候会碰到个棘手的问题，就是之前已经正常提交到 git 上的文件，即使在 .gitignore 进行了忽略，但代码仓库里依旧还是存在。</p>
<a id="more"></a>
<p>其实通过几行简单的命令就可以轻松解决这个问题</p>
<p><strong>首先删除本地缓存</strong></p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">$ git rm -r <span class="comment">--cached .</span></span><br></pre></td></tr></table></figure>
<p><strong>新建/修改 .gitignore 文件</strong></p>
<p>将需要忽略的文件/文件夹路径写到 .gitignore 里</p>
<p><strong>commit 本次变更</strong></p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>git commit -m <span class="string">"本次提交说明"</span></span><br></pre></td></tr></table></figure>
<p><strong>推送到代码仓库</strong></p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">$ git <span class="keyword">push</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Git 相关</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端 H5 页面前进后退经验汇总</title>
    <url>/posts/20a4f60/</url>
    <content><![CDATA[<p>在 PC 端，因为有电脑屏幕或者显示器，展示区域足够大，可以在页面顶部或者左侧放一个导航列表，导航可以是一个复杂的多层级导航。但移动端受限于手机屏幕，无法把如此复杂的导航始终放在手机屏幕上的某个位置，更多时候我们需要通过前进后退去进入不同的模块页面。</p>
<p>在这样场景前提下，开发过场中，我发现了几个移动端页面前进后退的问题，当然也可以算是小技巧，特此记录一下。</p>
<a id="more"></a>
<h2 id="返回上一页不刷新"><a class="header-anchor" href="#返回上一页不刷新"></a>返回上一页不刷新</h2>
<p>打个比方，现在有一个商品列表页，点击新增商品进入新增页面，填写完表单后，使用 <code>history.back()</code> 或者 <code>history.go(-1)</code> 返回到列表页，这个时候我们是希望页面上能显示出刚新增的商品，但实际上是没有显示。</p>
<p>直接上解决办法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    pushHistory();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pushHistory</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="built_in">window</span>).on(<span class="string">'popstate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        location.reload();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> state = &#123;</span><br><span class="line">        title : <span class="string">''</span>,</span><br><span class="line">        url : <span class="string">''</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">window</span>.history.replaceState(state, <span class="string">''</span>, <span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码我会放到公用的模块里，然后全局调用，至于某些页面如果不想返回刷新的，可以单独在页面上手动解绑 <code>popstate</code> 事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="built_in">window</span>).off(<span class="string">'popstate'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>有人可能会说，新增成功后，通过 <code>location.href</code> 跳转到列表页就好了，这样就避免了返回不刷新的问题。</p>
<p>这的确是一个解决办法，并且在 PC 端常用这样来处理。那为什么在移动端不推荐呢？其实文章开头说的就已经告诉答案了，移动端很多时候是通过不停的返回回到某个入口页，再去进入其它模块。如果通过暴力的 <code>location.href</code> 跳转到列表页，那我想退出列表页的时候，按返回按钮，首先会回到新增页，再点返回再次回到列表页，再点返回才会退出列表页。</p>
<h2 id="禁止用户返回到某个页面"><a class="header-anchor" href="#禁止用户返回到某个页面"></a>禁止用户返回到某个页面</h2>
<p>打个比方，现在在购物车页面，选择了部分商品，点击“购买”进入订单确认页面，点击“提交”进入支付页面。这时，如果不进行支付，点“返回”会回到订单确认页面，但由于购物车的商品已经提交生成订单了，所以回到这个页面会提示类似于“购物车商品不存在”之类的提示，对用户体验不好，最好点“返回”的时候，能直接回到购物车页面。</p>
<p>简单的说，就是 A 页面跳转到 B 页面， B 页面再跳转到 C 页面， C 页面点返回，希望跳过 B 页面直接回到 A 页面。</p>
<p>解决办法其实很简单，就是使用 <code>location.replace</code> 进行跳转</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">location.replace(<span class="string">'c.html'</span>);</span><br></pre></td></tr></table></figure>
<p>在 B 页面通过 <code>location.replace</code> 跳转到 C 页面，返回的时候，就会跳过 B 页面直接回到 A 页面。</p>
<h2 id="ajax-页面记录返回地址"><a class="header-anchor" href="#ajax-页面记录返回地址"></a>ajax 页面记录返回地址</h2>
<p>这个问题常出现在 tab 导航页，比如订单列表：</p>
<p><img src="https://i.loli.net/2018/04/07/5ac838c66437a.png" alt=""></p>
<p>点击页面上方的 tab 导航，会触发 ajax 请求对应的列表数据，但因为是 ajax 操作，现在我在“待付款”导航下，进入某个订单详情页再返回的时候，可能就会直接回到“全部”导航下了。</p>
<p>解决办法就是使用 HTML5 history 的 pushState/replaceState 方法，在点击 tab 进行 ajax 操作的时候，执行一句：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">history.replaceState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">'?tab=1'</span>);</span><br></pre></td></tr></table></figure>
<p>这时候再点击 tab 导航，会发现页面还是进行了 ajax 操作，但地址栏已经有变化了，这时候进入详情页再返回，我们就能通过 url 获取需要的参数，来控制显示哪个 tab 导航下的数据了。</p>
<p>其实用 pushState 也是可以的，如果希望每次切换 tab 导航都希望被 history 记录下来，那就可以使用 pushState ，在返回的时候，则会依次返回。</p>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><a href="https://blog.csdn.net/achenyuan/article/details/77769992" target="_blank" rel="noopener">微信里iphone后退不刷新问题解决方案</a></li>
<li><a href="http://www.zhangxinxu.com/wordpress/2013/06/html5-history-api-pushstate-replacestate-ajax/" target="_blank" rel="noopener">ajax与HTML5 history pushState/replaceState实例</a></li>
</ul>
]]></content>
      <categories>
        <category>Web 综合</category>
      </categories>
      <tags>
        <tag>移动端</tag>
        <tag>H5</tag>
        <tag>页面跳转</tag>
        <tag>history</tag>
      </tags>
  </entry>
  <entry>
    <title>桌面大升级</title>
    <url>/posts/23a4d1d5/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2018/03/18/5aad3ee8cbeb1.png" alt=""></p>
<p>还记得上次桌面大升级是因为搬了新住处，租了个大房间，所以就买了新桌子，新椅子，给显示器也弄了个支架。</p>
<p>但这一次桌面升级并不是一开始就计划好的，最初的想法只是想在公司里给笔记本外接台显示器，方便开发和调试，但结果这个淘宝一打开啊，人就不受控制了，什么都想更新，再加上一直被「遇见喜欢的人已经很难了，遇见喜欢的东西就买吧」「早买早享受，晚买享折扣」这样的鸡汤洗脑，不买真的有点对不起自己，于是一场无预谋无计划的买买买一触即发。</p>
<a id="more"></a>
<blockquote>
<p>下面的外设有的是以前沿用到现在的，但一直都没好好介绍过，所以趁这篇博客，一起介绍了。<br>
而且每一样外设我都会写出购买的心路历程，并且附上淘宝链接。OK，那我就开始了~</p>
</blockquote>
<h2 id="笔记本"><a class="header-anchor" href="#笔记本"></a>笔记本</h2>
<p><strong>Surface Book 增强版</strong><br>
购买链接：<a href="https://www.microsoftstore.com.cn/" target="_blank" rel="noopener">https://www.microsoftstore.com.cn/</a> <code>微软官网</code><br>
消费金额：18799.00</p>
<p><img src="https://i.loli.net/2018/03/18/5aad5a3baed90.png" alt=""></p>
<p>笔记本严格来说不算外设，但既然是分享自己的桌面，那电脑才是最主要的。</p>
<p>我的上一台电脑是戴尔的 XPS 15 2012款，在服役了 5 年后，做开发依旧坚挺，当然主要得益于那块三星的 SSD 硬盘，记得 12 年那会，同款三星 512G 的 SSD 硬盘，淘宝上卖到 5k+ ，那时候我这台笔记本的价格也就 2w 不到。</p>
<p>那为什么会换成现在的 Surface Book 呢？腻了嘛，那会的轻薄本，过了 5 年再看，也不轻薄了，加上中间送修了几次，D 面的后盖都已经被拆得严重破损了，再加上好巧不巧，那会微软发布了 Surface Book 增强版，之前就很好奇微软所谓的<strong>笔记本的终极形态</strong>是什么样的，既然发布新款了，干脆趁此机会，把电脑就换了。</p>
<p>配置上我买的是次顶配，配置和顶配几乎一样，只是硬盘是 512G ，顶配是 1T 。根据上台电脑的使用情况来选择， 512G 足够我用了。至于为什么要买顶配，没想太多，就想一步到位了，希望能继续用 5 年。</p>
<div class="note info">
            <p>这里我有一个购买微软产品的小技巧，你可以上淘宝购买一个教育邮箱，大概 5 块钱左右，然后去微软的<a href="https://www.microsoftstore.com.cn/student?Icid=StoreNavi_EDU" target="_blank" rel="noopener">教育优惠</a>里用刚买的邮箱认证一下你的账号，成功以后就可以享受 9 折优惠了。像我买 Surface Book 的时候，就省了 2k 多。</p>
          </div>
<h2 id="显示器"><a class="header-anchor" href="#显示器"></a>显示器</h2>
<p><strong>戴尔 U2718Q</strong><br>
购买链接：<a href="https://s.click.taobao.com/yfNk7Tw" target="_blank" rel="noopener">https://s.click.taobao.com/yfNk7Tw</a> <code>可领30元优惠券</code><br>
消费金额：4369.00</p>
<p><img src="https://i.loli.net/2018/03/15/5aa963e0dff31.png" alt=""></p>
<p>显示器一开始想的是，公司里放一台 24 寸，显示效果一般般就可以了， TN 屏都行。但转念一想，这消费体验太不痛快，档次越来越低了。于是开始思考，不如给家里的显示器进行升级，然后把现在用的拿到公司去用，一举两得。</p>
<p>显示器选择第一步就是确定屏幕的分辨率，因为 Surface Book 最高支持 4K 显示器，所以这次更新也就从 4K 入手了。</p>
<p>于是打开京东，进入显示器分类，先把分辨率选项下的 <code>3840*2160（4K）</code> 勾选上，然后依次勾选一些硬性指标，比如面板 <code>IPS</code> （毕竟在家还是要看电影享受的， TN 屏是肯定不考虑的），接口 <code>DP</code> （想上 4K 必须用 DP 口），尺寸 <code>27英寸</code> （为什么没有选更高的 30-32英寸选项？因为选了发现价格承受不了啊），特征 <code>可壁挂</code> （用过支架就知道好处了，能节省一部分桌面空间）</p>
<p><img src="https://i.loli.net/2018/03/12/5aa5713c0b6ff.png" alt=""></p>
<p>到这一步以后，可选的型号已经屈指可数了，我大概看了下，基本上就是 LG 和戴尔的天下了，我初步选了 4 款，分别是：</p>
<table>
<thead>
<tr>
<th>型号</th>
<th>预览图</th>
</tr>
</thead>
<tbody>
<tr>
<td>戴尔 U2718Q</td>
<td><img src="https://i.loli.net/2018/03/12/5aa572953eb53.png" alt=""></td>
</tr>
<tr>
<td>戴尔 P2715Q</td>
<td><img src="https://i.loli.net/2018/03/12/5aa5736a76a43.png" alt=""></td>
</tr>
<tr>
<td>LG 27UD69-W</td>
<td><img src="https://i.loli.net/2018/03/12/5aa5738af107a.png" alt=""></td>
</tr>
<tr>
<td>AOC LV273HUPX</td>
<td><img src="https://i.loli.net/2018/03/12/5aa573a026d86.png" alt=""></td>
</tr>
</tbody>
</table>
<p>优先淘汰的是 LG ，因为背部的接口实在太少了，其次淘汰的是 AOC ，虽然我现在用的就是 AOC ，但 AOC 的正面观感很奇怪，三边窄边框，底部大边框，哎呀，其实我就是想选戴尔啦。</p>
<p>不过在这两款戴尔显示器里，我还是纠结了很久，两款型号可以说是一模一样， U 款的边框比 P 款细，但 P 款可以买一个戴尔的音箱棒挂在显示器底部，就像这样：</p>
<p><img src="https://i.loli.net/2018/03/12/5aa579922889f.png" alt=""></p>
<p>可以省去我再买一个音箱的钱，但查了很多资料，也问了一些人的建议，最后还是选择了 U2718Q 这款，毕竟还是颜值高，价格也相差不多。</p>
<p><img src="https://i.loli.net/2018/03/15/5aa9641f86361.png" alt=""></p>
<div class="note info">
            <p>如果你想买一款外设，有明确的硬性参数指标的情况下，我强烈推荐上京东进行选款，虽然京东有着「二手东」的名号，但它的商品属性分类还是极其清晰准确的，淘宝虽然也有，但准确度不高。当然，最后选好买哪款显示器，我还是选择回淘宝上买，因为比价比下来，淘宝还是比京东便宜一些。</p>
          </div>
<h2 id="键盘"><a class="header-anchor" href="#键盘"></a>键盘</h2>
<p><strong>普拉姆 84 蓝牙双模 静电容键盘</strong><br>
购买链接：<a href="https://s.click.taobao.com/pMGkETw" target="_blank" rel="noopener">https://s.click.taobao.com/pMGkETw</a> <code>可领20元优惠券</code><br>
消费金额：625.00</p>
<p><img src="https://i.loli.net/2018/03/18/5aae1b22ad241.png" alt=""></p>
<p>几年前入过机械键盘的坑，加上清楚自己的需求，所以在买键盘上并没有费太大力。</p>
<p>我的几条刚需：</p>
<ul>
<li>不要背光，拒绝光污染</li>
<li>不要标准键盘， 108/104/87 键都不考虑</li>
<li>需要有独立方向键</li>
<li>Caps Lock 可与 Ctrl 对调</li>
</ul>
<p>于是就定了两款</p>
<table>
<thead>
<tr>
<th>型号</th>
<th>预览图</th>
</tr>
</thead>
<tbody>
<tr>
<td>Filco Minila AIR 67</td>
<td><img src="https://i.loli.net/2018/03/12/5aa57e0bc178f.png" alt=""></td>
</tr>
<tr>
<td>普拉姆 84 蓝牙双模 静电容键盘</td>
<td><img src="https://i.loli.net/2018/03/12/5aa57e8f387e4.png" alt=""></td>
</tr>
</tbody>
</table>
<p>Filco Minila 是我曾经几款机械键盘使用下来，最喜欢的一款。首先它足够小巧，并且满足我的刚需，搭配小空格以及左右两侧的 Fn 键，各种快捷键按起来，感觉自己就是个钢琴家。</p>
<p>至于普拉姆这款静电容键盘，是因为以前用过 HHKB 和 RealForce 键盘，对静电容的手感有好感，但由于 HHKB 的键位实在无法适应， RealForce 又太大了，所以没继续使用。但这次看到国产品牌普拉姆出了静电容，而且正好对上我的刚需，所以也列入了备选列表里。</p>
<p>两款键盘其实都很喜欢，我甚至一度有想法干脆买都买了，一个放公司，一个放家里，但最终选择了静电容这款，原因是 Minila 的蓝牙切换操作比较反人类（虽然我基本也就连接电脑一台设备），必须要关闭上一个蓝牙接收，才能链接第二个，想到我的电脑以后肯定是连接着蓝牙鼠标，蓝牙音箱，蓝牙……</p>
<p>而普拉姆的蓝牙切换就超级方便，直接通过 Fn 快捷键就可以方便切换，而且最重要的是，价格便宜啊。</p>
<div class="note info">
            <p>通过买显示器和键盘，我大概得出两个适用于我自己的结论——当选不出哪个更好的时候，买贵的；当都想要的时候，买便宜的。</p>
          </div>
<h2 id="鼠标"><a class="header-anchor" href="#鼠标"></a>鼠标</h2>
<p><strong>罗技 MX Master 2s</strong><br>
购买链接：<a href="https://s.click.taobao.com/b0mgETw" target="_blank" rel="noopener">https://s.click.taobao.com/b0mgETw</a> <code>可领30元优惠券</code><br>
消费金额：569.00</p>
<p><img src="https://i.loli.net/2018/03/15/5aa974292e81c.png" alt=""></p>
<p>我之前很长一段时间，不管家里还是公司，都在使用雷蛇的炼狱蝰蛇鼠标，因为大小刚好贴合手，而且侧边有 2 个按键，网页浏览的时候方便快速前进和后退，这次升级也是优先去看了雷蛇的蓝牙鼠标。</p>
<p>寻找之后，发现也就曼巴眼镜蛇最适合了，因为整体造型和我之前用的炼狱蝰蛇几乎是同一个模具做出来的，当然雷蛇也还有其它的蓝牙鼠标，可都是左右对称的。</p>
<p>说起来也奇怪，我这个人对左右对称的东西应该是有好感的，比如键盘，我就喜欢相对左右对称的键盘，买笔记本电脑也是从来不考虑带小键盘的，可偏偏鼠标这块，我就不乐意用左右对称的鼠标。</p>
<p>差不多准备买曼巴眼镜蛇的时候，我突然看到它的一个参数「充满电的情况下，开启灯光可使用约 20 小时」，差不多每三天就要把鼠标放回充电底座上进行充电。对于我这种懒人，前期可能还能做到，后期可能会嫌麻烦就干脆插上线当有线用了，到时候桌面又散落着各种线材了，不好不好。</p>
<p>否定掉这个鼠标后，我突然想到以前看过一个视频，里面有推荐罗技的 MX Master ，而且是白色的，和我的键盘很搭，去搜了一下发现已经出 2 代了。为了进一步了解这个鼠标，我也上知乎看了几条评价，让我惊讶的是，居然没看到有一条是说不好的。</p>
<p>当然真正让我下定决定购买主要还是它的「无极滚轮」模式，以前听都没听过，根据知友的描述是，滚轮居然可以滚动 20 多秒，简直不可思议。其次还有侧边的横向滚轮也是我以前没体验过的，虽然应用场景比较少，我能想到的就是在看 Excel 的时候会派上用场。最后加上蓝牙可以快速切换，买！</p>
<h2 id="音箱"><a class="header-anchor" href="#音箱"></a>音箱</h2>
<p><strong>JBL Charge 3</strong><br>
购买链接：<a href="https://s.click.taobao.com/qBb18Tw" target="_blank" rel="noopener">https://s.click.taobao.com/qBb18Tw</a><br>
消费金额：839.00</p>
<p>俗话说“万元以下听个响”，在买音箱这点上，我是完全奔着颜值去买的，一点没看中内在，只要能出声就行。于是上淘宝搜罗了一圈，加上收藏夹里存着的，大概罗列了一下几个参考：</p>
<table>
<thead>
<tr>
<th>型号</th>
<th>预览图</th>
</tr>
</thead>
<tbody>
<tr>
<td>声擎 A2+</td>
<td><img src="https://i.loli.net/2018/03/14/5aa938ad663e7.png" alt=""></td>
</tr>
<tr>
<td>Bose Soundlink Mini II</td>
<td><img src="https://i.loli.net/2018/03/14/5aa9390e4ac35.png" alt=""></td>
</tr>
<tr>
<td>Beats pill 2.0</td>
<td><img src="https://i.loli.net/2018/03/14/5aa9394ce4d76.png" alt=""></td>
</tr>
<tr>
<td>Beats pill+</td>
<td><img src="https://i.loli.net/2018/03/14/5aa939d29ee51.png" alt=""></td>
</tr>
<tr>
<td>JBL Pulse 3</td>
<td><img src="https://i.loli.net/2018/03/14/5aa93a13165fc.png" alt=""></td>
</tr>
<tr>
<td>JBL Charge 3</td>
<td><img src="https://i.loli.net/2018/03/14/5aa93a4935edc.png" alt=""></td>
</tr>
</tbody>
</table>
<p>声擎 A2+ 和 Bose Soundlink Mini II 是很早就收藏的两个音箱。喜欢声擎的原因是，足够简约，正面没有任何 LOGO ，并且还支持 USB 解码。</p>
<p>至于 Bose Soundlink Mini II ，则是被太多人安利了，造型一般，但足够小巧，并且音质解析力很不错（我也不懂，反正别人说的）。</p>
<p>Beats pill 的两款是我这次优先选定的，因为 Beats 的东西造型都还蛮不错的，但为什么会定两款， pill+ 因为最新款，没得说（我买东西从来不买旧款）， pill 2.0 则是有个附加属性，就是可以买个人偶，组合起来就能变成了一个装饰品，很适合放在桌面上。</p>
<p>JBL Pulse 3 最初是在抖音上看到的，吸引我的也是它 360 度炫彩灯光和防水属性，至于 Charge 3 则是在搜 Pulse 3 偶尔看到的，觉得造型也还不错。</p>
<p>接下来就是进行淘汰了，首先淘汰的是声擎 A2+ ，原因是这次规划的桌面摆放已经放不下这么大的两个音箱了（具体可以看文章最后的图集），其次淘汰的是 JBL Pulse 3 ，虽然很酷炫，但不适合放桌面使用，太枪眼了，并且我希望音箱放置位置是对称或者居中的，而 Pulse 3 这种站立式摆放的，注定只能放在边角上。接着淘汰的是 Beats pill 2.0 ，因为刚好公司里就有一台，我大概测量了下体积，觉得加上玩偶后尺寸有点过大，担心桌子放不下，所以不考虑了。</p>
<p>剩下的三款考虑了很久，也看了一些对比评测，大概总结一下就是：</p>
<table>
<thead>
<tr>
<th>音箱</th>
<th>音质</th>
<th>外观</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bose Soundlink Mini II</td>
<td>优</td>
<td>良</td>
</tr>
<tr>
<td>Beats pill+</td>
<td>良-</td>
<td>优</td>
</tr>
<tr>
<td>JBL Charge 3</td>
<td>优-</td>
<td>优-</td>
</tr>
</tbody>
</table>
<p>最终选择 JBL Charge 3 的原因是一瞬间我突然冒出一个干脆都买的念头，于是，趁在天猫国际海淘买了一个最便宜的，知道买来才发现有一个因素没关注，就是大小，稍微比我想象中大了点。</p>
<p><img src="https://i.loli.net/2018/03/15/5aaa75fdc5599.png" alt=""></p>
<h2 id="笔记本支架"><a class="header-anchor" href="#笔记本支架"></a>笔记本支架</h2>
<p><strong>苹果笔记本支架</strong><br>
购买链接：<a href="https://s.click.taobao.com/NyD10Tw" target="_blank" rel="noopener">https://s.click.taobao.com/NyD10Tw</a><br>
消费金额：119.00</p>
<p><img src="https://i.loli.net/2018/03/18/5aad457a4ccc3.png" alt=""></p>
<p>在选购笔记本支架上，我可以说是最舍得“花钱”的了，因为别的都是网上看，网上对比，而这个我直接买了三款相对入眼的产品，实际上手体验了一番。</p>
<p>最初购买的是两款贴地的，实际使用发现比较占空间，而且有时候在电脑前吃饭，那键盘就没地方放了。</p>
<p>所以最终选了一款把笔记本电脑架高的支架，下面留空就可以在吃饭的时候把键盘放到下面，桌面就有一块很大的位置了，并且还能保证了笔记本电脑和外接显示器视觉上相对平行。</p>
<p><img src="https://i.loli.net/2018/03/18/5aad4a3d9016f.png" alt=""></p>
<h2 id="显示器支架"><a class="header-anchor" href="#显示器支架"></a>显示器支架</h2>
<p><strong>乐歌 D5 显示器支架</strong><br>
购买链接：<a href="https://s.click.taobao.com/hpqx7Tw" target="_blank" rel="noopener">https://s.click.taobao.com/hpqx7Tw</a> <code>可领5元优惠券</code><br>
消费金额：194.00</p>
<p><img src="https://i.loli.net/2018/03/18/5aad5b8e46073.png" alt=""></p>
<p>显示器支架绝对是个好东西，如果你有两台甚至更多显示器，简直是大幅减轻桌面空间的压力，让桌面可以摆放下更多的东西。</p>
<p><img src="https://i.loli.net/2018/03/15/5aa94f28eeca8.png" alt=""></p>
<p>这是一张我桌面升级前的老图，当时是因为想能把显示器放置在电脑上方，靠显示器自带的臂架显然不行，所以就只能买一个支架来实现，买了之后觉得买值了。</p>
<h2 id="手机支架"><a class="header-anchor" href="#手机支架"></a>手机支架</h2>
<p>iQunix Hima 铝合金手机充电底座支架<br>
购买链接：<a href="https://s.click.taobao.com/XsD18Tw" target="_blank" rel="noopener">https://s.click.taobao.com/XsD18Tw</a> <code>可领5元优惠券</code><br>
消费金额：163.00</p>
<p>这个宝贝无需介绍太多，第一眼看到的时候，我就喜欢上了，我希望你们第一眼看到也能喜欢上，如果不能，那就多看几眼吧。它有两种颜色，银色和黑色，为了和手机更搭，我买的是黑色的。</p>
<p><img src="https://i.loli.net/2018/03/14/5aa9457a03b63.png" alt=""></p>
<p><img src="https://i.loli.net/2018/03/15/5aa9743d7eb70.png" alt=""></p>
<h2 id="电脑桌"><a class="header-anchor" href="#电脑桌"></a>电脑桌</h2>
<p><strong>宜家贝肯特底架</strong><br>
购买链接：<a href="https://s.click.taobao.com/M9a08Tw" target="_blank" rel="noopener">https://s.click.taobao.com/M9a08Tw</a><br>
消费金额：430.00</p>
<p><strong>老榆木桌板定制</strong><br>
消费金额：580.00</p>
<p><img src="https://i.loli.net/2018/03/15/5aa96f76c7db1.png" alt=""></p>
<p>为什么电脑桌没有买贝肯特一整套呢，下面我会细说。这里我只买了贝肯特的底架，然后在淘宝上找了个老榆木桌板定制的店铺，定制了一块和买贝肯桌板尺寸一样（140cm * 60cm），且厚度为 3cm 的桌板。</p>
<p><img src="https://i.loli.net/2018/03/15/5aa95a034ff74.png" alt=""></p>
<p>贝肯特底架会附赠固定桌板的插销，如上图（因为长的都用完了，只能拍短的做参考），但由于我的桌板是定制的，桌板上没有那几个插销孔，所以我在淘宝上买了电钻，开孔钻头，还买了一些木块做练习，但尝试后发现效果并不理想，最终我还是麻烦了老爸出手来解决了底架和桌板固定的问题。</p>
<p>其实一开始是想买升降桌的，感觉很酷，而且可以站立办公，不过考虑到使用环境还是在家里，没事也不会经常折腾桌子，而且感觉升降桌会很重，万一搬家将会是个麻烦事。最终事实也证明我的顾虑是正确的，光这老榆木的桌板从一楼背上四楼我都累成狗了，升降桌，呵呵，还好没买。</p>
<h2 id="电脑椅"><a class="header-anchor" href="#电脑椅"></a>电脑椅</h2>
<p><strong>AutoFull傲风 电竞椅</strong><br>
购买链接：<a href="https://s.click.taobao.com/8YbxzSw" target="_blank" rel="noopener">https://s.click.taobao.com/8YbxzSw</a> <code>可领50元优惠券</code><br>
消费金额：799.00</p>
<p><img src="https://i.loli.net/2018/03/18/5aad5e351bba6.jpg" alt=""></p>
<p>买椅子的时候其实就只有一个要求，就是底部带滑轮，颜值尚可就行就（因为颜值心仪的价格上 5 位数了），所以这款椅子差不多就是在淘宝按销量排序随便搜的一款，整体感受只能说一般。</p>
<h2 id="其它"><a class="header-anchor" href="#其它"></a>其它</h2>
<p><strong>公牛机柜插座 PDU 专用电源</strong><br>
购买链接：<a href="https://s.click.taobao.com/ZPuv7Tw" target="_blank" rel="noopener">https://s.click.taobao.com/ZPuv7Tw</a><br>
消费金额：134.00</p>
<p><strong>12 档 24 口机柜理线架 2 个</strong><br>
购买链接：<a href="https://s.click.taobao.com/VEav7Tw" target="_blank" rel="noopener">https://s.click.taobao.com/VEav7Tw</a><br>
消费金额：40.00</p>
<p>想要桌面看上去清爽干净，除了更换蓝牙设备外，理线/埋线也是一门学问，而我之所以在购买桌子的时候选择定制一块木板，目的就是准备把电源和大部分数据/电源线都隐藏在桌底，桌面上看不到，自然就显得干净了。</p>
<p><img src="https://i.loli.net/2018/03/15/5aa95383521cf.png" alt=""></p>
<p>机柜电源原本是用于固定在机房机柜上的，我买它的原因就是因为它能轻松固定在我桌板底部，就像这样：</p>
<p><img src="https://i.loli.net/2018/03/15/5aa9580fb1838.png" alt=""></p>
<p>另外左右两边各固定了一个理线架，这样长出来的线，都可以塞进去，不会影响桌下的空间。</p>
<p><img src="https://i.loli.net/2018/03/15/5aa957a87e7dd.png" alt=""></p>
<p><img src="https://i.loli.net/2018/03/15/5aa957be5f474.png" alt=""></p>
<p>整体效果如下：</p>
<p><img src="https://i.loli.net/2018/03/15/5aa9587b308e5.png" alt=""></p>
<p><strong>扎带</strong><br>
消费金额：10.00</p>
<p><img src="https://i.loli.net/2018/03/15/5aa95c55d3113.png" alt=""></p>
<p>为什么没有买专用的束线管或者理线带这类东西？因为便宜啊，我买的了 200 条才 10 块钱，当然扎带也有弊端，就是一次性，拆不了，只能剪断。但是，那又怎样！便宜啊！随便剪！</p>
<p>来看看效果如何：</p>
<p><img src="https://i.loli.net/2018/03/15/5aa95ecbb5803.jpg" alt=""></p>
<p><img src="https://i.loli.net/2018/03/15/5aa95eccb7e10.jpg" alt=""></p>
<p><strong>几度灰 清水混凝土笔筒</strong><br>
购买链接：<a href="https://s.click.taobao.com/2xnq7Tw" target="_blank" rel="noopener">https://s.click.taobao.com/2xnq7Tw</a><br>
消费金额：75.00</p>
<p><img src="https://i.loli.net/2018/03/15/5aa9607f931dc.png" alt=""></p>
<p>因为 Surface Pen 的使用率极低，所以专门买了个笔筒放它。</p>
<p><strong>桌面收纳盒</strong><br>
购买链接：<a href="https://s.click.taobao.com/ULOq7Tw" target="_blank" rel="noopener">https://s.click.taobao.com/ULOq7Tw</a><br>
消费金额：47.00</p>
<p><img src="https://i.loli.net/2018/03/15/5aa9616b95a90.png" alt=""></p>
<p>没有找到特别心仪的，这款也只是在淘宝众多丑陋的收纳盒里相对颜值勉强在线的，先买来用着起，毕竟桌面乱七八糟的东西太多了，急需一个收纳盒进行统一管理。</p>
<h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2>
<p>改造升级的过程让我感到愉悦，尤其是自己脑海中的想法一步步搭建出来，颇有成就感。当然也有遗憾，就是钱不够多，很多更好的外设，看到价格就过滤掉了，所以，努力赚钱吧，为了有一天能努力的花。</p>
<hr>
<p>最后放几张以前的老图，仅作留念。</p>
<p>2012年10月，买了第一把机械键盘</p>
<p><img src="https://i.loli.net/2018/03/15/5aa968009f30e.png" alt=""></p>
<p>2013年1月，买了第二把机械键盘</p>
<p><img src="https://i.loli.net/2018/03/15/5aa96882bee47.png" alt=""></p>
<p>2013年2月，买了一个笔记本支架</p>
<p><img src="https://i.loli.net/2018/03/15/5aa968ef1bafe.png" alt=""></p>
<p>2013年5月，买了第三把机械键盘</p>
<p><img src="https://i.loli.net/2018/03/15/5aa9693bc5267.png" alt=""></p>
<p>2013年8月，买了张电脑桌</p>
<p><img src="https://i.loli.net/2018/03/15/5aa969c351155.png" alt=""></p>
<p>2013年10月，买了第一台显示器</p>
<p><img src="https://i.loli.net/2018/03/15/5aa969fea44de.png" alt=""></p>
<p>2015年?月，二手出掉了第一台 24 寸的显示器，另外买了台 27 寸的</p>
<p><img src="https://i.loli.net/2018/03/15/5aa96af9e4144.png" alt=""></p>
<p>2017年8月，搬家后买的第二张电脑桌</p>
<p><img src="https://i.loli.net/2018/03/15/5aa94f28eeca8.png" alt=""></p>
<p>2017年3月，败完显示器、鼠标、键盘、音箱……后，写下这篇博客。</p>
<p><img src="https://i.loli.net/2018/03/18/5aad4222a5552.png" alt=""></p>
<p><img src="https://i.loli.net/2018/03/18/5aad42b63ca20.png" alt=""></p>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><a href="https://www.bilibili.com/video/av7883199/" target="_blank" rel="noopener">Type-C 主题桌面:「小辛的未来桌面」</a></li>
<li><a href="https://www.bilibili.com/video/av6870080/" target="_blank" rel="noopener">「ZEALER|LIVE」王自如桌面 2.0</a></li>
<li><a href="https://test.smzdm.com/pingce/p/38436/" target="_blank" rel="noopener">价格略高，但堪称完美的办公鼠标 罗技 MX master 2S</a></li>
<li><a href="https://wenku.baidu.com/view/290b016284868762cbaed559.html" target="_blank" rel="noopener">Filco Minila air 蓝牙无线机械键盘说明书</a></li>
</ul>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>显示器</tag>
        <tag>键盘</tag>
        <tag>鼠标</tag>
        <tag>音箱</tag>
        <tag>电脑桌</tag>
      </tags>
  </entry>
  <entry>
    <title>gulp-file-include 踩坑</title>
    <url>/posts/5f8cb75e/</url>
    <content><![CDATA[<p>在之前的这篇  文章里，我主要提到了一个 gulp 插件，就是 <a href="https://www.npmjs.com/package/gulp-file-include" target="_blank" rel="noopener">gulp-file-include</a> 。在使用了一段时间后，也踩了不少坑，特此开一篇文章记录一下。</p>
<a id="more"></a>
<h2 id="不支持-else-语法"><a class="header-anchor" href="#不支持-else-语法"></a>不支持 else 语法</h2>
<p>查阅官方文档，发现是支持 if 语法的：</p>
<p><img src="https://i.loli.net/2018/03/07/5a9eda9fd10a1.png" alt=""></p>
<p>在实际使用中，自然而然的就用上了 if/else：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">@<span class="meta">@include(<span class="meta-string">'test.html'</span>, &#123;</span></span><br><span class="line"><span class="meta">    <span class="meta-string">"age"</span>: 16</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">@<span class="meta">@if(age</span> &gt;= 18)&#123;</span><br><span class="line">    <span class="variable">&lt;b&gt;</span>允许进入<span class="variable">&lt;/b&gt;</span></span><br><span class="line">&#125;else&#123;</span><br><span class="line">    <span class="variable">&lt;b&gt;</span>禁止进入<span class="variable">&lt;/b&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但输出的结果是：</p>
<p><img src="https://i.loli.net/2018/03/07/5a9edf0c340a0.png" alt=""></p>
<p>所以这里只能写两个 if 来实现：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">@<span class="meta">@if(age</span> &gt;= 18)&#123;</span><br><span class="line">    <span class="variable">&lt;b&gt;</span>允许进入<span class="variable">&lt;/b&gt;</span></span><br><span class="line">&#125;</span><br><span class="line">@<span class="meta">@if(age</span> <span class="variable">&lt; 18)&#123;</span></span><br><span class="line"><span class="variable">    &lt;b&gt;</span>禁止进入<span class="variable">&lt;/b&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果有更多条件判断，则继续增加 if 语句即可。</p>
<h2 id="临时变量无法在-if-for-loop-嵌套中使用"><a class="header-anchor" href="#临时变量无法在-if-for-loop-嵌套中使用"></a>临时变量无法在 if/for/loop 嵌套中使用</h2>
<p>这个描述可能不太好理解，具体看下这段代码：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">@@<span class="keyword">for</span>(var <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; arr.<span class="built_in">length</span>; <span class="built_in">i</span>++)&#123;</span><br><span class="line">    @@<span class="keyword">if</span>(<span class="built_in">i</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        &lt;b&gt;这是第一条&lt;/b&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我希望循环 arr 数组的时候，第一条输出“这是第一条”文字，但执行会提示 <code>i is not defined: (i == 0)</code> ，试了好多写法都不行，最后发现用反单引号（<code>`</code>）加三元运算符可以解决这个问题：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">@@<span class="keyword">for</span>(var <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; arr.<span class="built_in">length</span>; <span class="built_in">i</span>++)&#123;</span><br><span class="line">    `+(<span class="built_in">i</span> == <span class="number">0</span> ? <span class="string">'&lt;b&gt;这是第一条&lt;/b&gt;'</span> : <span class="string">''</span>)+`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Web 综合</category>
      </categories>
      <tags>
        <tag>Gulp</tag>
        <tag>自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>我的个人前端开发工具整理</title>
    <url>/posts/8b40f68a/</url>
    <content><![CDATA[<p>首先申明，我是极其反对那种“牛逼的大神用记事本也能写代码”的论调。我们写代码是为了创造有价值的东西，而不是单纯为了炫技。</p>
<p>那在开发的过程中，如何提高我们的编码效率和能力才是最主要的，我经常会看到一些新人即便用了很好的工具，但效率还是很慢，不会装插件，不熟悉快捷键。</p>
<p>俗话说 <em>工欲善其事，必先利其器</em> ，今天就趁春节假期最后一天，整理了一下我的开发工具以及一些使用心得，希望能对大家有所帮助。</p>
<a id="more"></a>
<h2 id="编辑器"><a class="header-anchor" href="#编辑器"></a>编辑器</h2>
<h3 id="Atom"><a class="header-anchor" href="#Atom"></a><a href="https://atom.io/" target="_blank" rel="noopener">Atom</a></h3>
<p>我的最爱，我最早是使用 DreamWeaver 的，后来脱离 PHP 专职做前端开发后，也就告别了 DW ，中途使用过 <a href="http://www.sublimetext.com/" target="_blank" rel="noopener">Sublime Text</a> ，但其安装扩展的方式太不友好，就放弃了，后面也用过 <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VS code</a> ，感觉和 Atom 不相上下，优势在于打开大文件极快，但插件感觉没 Atom 完善，所以目前还是以 Atom 为主。</p>
<p>既然用了 Atom ，一定要了解两方面：<strong>快捷键</strong>和<strong>扩展</strong>。</p>
<p>前者不用说了，任何工具我认为都应该去了解它的快捷键，关于 Atom 的快捷键可以看这篇文章《<a href="https://www.iplaysoft.com/item/atom-shortcuts" target="_blank" rel="noopener">Atom 编辑器快捷键列表汇总整理</a>》，并不用牢记所有快捷键，我会先大致浏览并实际操作一遍，然后回忆下开发中可能会遇到的情况，争对性的记住部分快捷键。</p>
<p>扩展，这个才是 Atom 的灵魂，如果没有这些开发者贡献的插件，Atom 也就算个高级记事本。</p>
<p>以下是我用到的扩展汇总：</p>
<ul>
<li>通用
<ul>
<li><a href="https://atom.io/packages/simplified-chinese-menu" target="_blank" rel="noopener">simplified-chinese-menu</a> 中文语言包</li>
<li><a href="https://atom.io/packages/sync-settings" target="_blank" rel="noopener">sync-settings</a> 备份利器，重装电脑后最头疼的就是软件的配置，这个扩展能帮助你轻松还原开发环境，我特地整理过一篇使用教程《<a href="http://www.cnblogs.com/hooray/p/5885211.html" target="_blank" rel="noopener">Atom 备份神器 —— Sync Settings</a>》</li>
<li><a href="https://atom.io/packages/platformio-ide-terminal" target="_blank" rel="noopener">platformio-ide-terminal</a> 终端工具</li>
<li><a href="https://atom.io/packages/file-icons" target="_blank" rel="noopener">file-icons</a> 文件图标</li>
<li><a href="https://atom.io/packages/project-manager" target="_blank" rel="noopener">project-manager</a> 项目管理工具，Atom 本身不具备项目的概念，所以这个插件超级实用，开发过程中可以方便切换项目</li>
<li><a href="https://atom.io/packages/minimap" target="_blank" rel="noopener">minimap</a> 代码全局预览，可代替滚动条，以下是相关的一些插件，比如在
<ul>
<li><a href="https://atom.io/packages/minimap-cursorline" target="_blank" rel="noopener">minimap-cursorline</a></li>
<li><a href="https://atom.io/packages/minimap-find-and-replace" target="_blank" rel="noopener">minimap-find-and-replace</a></li>
<li><a href="https://atom.io/packages/minimap-highlight-selected" target="_blank" rel="noopener">minimap-highlight-selected</a></li>
<li><a href="https://atom.io/packages/minimap-linter" target="_blank" rel="noopener">minimap-linter</a></li>
<li><a href="https://atom.io/packages/minimap-pigments" target="_blank" rel="noopener">minimap-pigments</a></li>
</ul>
</li>
<li><a href="https://atom.io/packages/docblockr" target="_blank" rel="noopener">docblockr</a> 写注释用</li>
<li><a href="https://atom.io/packages/highlight-column" target="_blank" rel="noopener">highlight-column</a> 高亮当前列</li>
<li><a href="https://atom.io/packages/highlight-selected" target="_blank" rel="noopener">highlight-selected</a> 高亮选中</li>
<li><a href="https://atom.io/packages/pigments" target="_blank" rel="noopener">pigments</a> 在代码中显示颜色</li>
<li><a href="https://atom.io/packages/pdf-view" target="_blank" rel="noopener">pdf-view</a> PDF 文件预览</li>
<li>markdown 相关
<ul>
<li><a href="https://atom.io/packages/markdown-writer" target="_blank" rel="noopener">markdown-writer</a></li>
<li><a href="https://atom.io/packages/markdown-preview-enhanced" target="_blank" rel="noopener">markdown-preview-enhanced</a> markdown 多功能组件，可同步预览，可导出 PDF 、HTML、图片，自带图片上传</li>
<li><a href="https://atom.io/packages/markdown-toc" target="_blank" rel="noopener">markdown-toc</a> 生成目录</li>
</ul>
</li>
<li><a href="https://atom.io/packages/tool-bar" target="_blank" rel="noopener">tool-bar</a> 自定义工具栏
<ul>
<li><a href="https://atom.io/packages/tool-bar-markdown-writer" target="_blank" rel="noopener">tool-bar-markdown-writer</a> 配合 markdown-writer 使用</li>
</ul>
</li>
<li><a href="https://atom.io/packages/tree-view-autoresize" target="_blank" rel="noopener">tree-view-autoresize</a></li>
<li><a href="https://atom.io/packages/multi-cursor" target="_blank" rel="noopener">multi-cursor</a></li>
</ul>
</li>
<li>前端
<ul>
<li><a href="https://atom.io/packages/emmet" target="_blank" rel="noopener">emmet</a> 快速编写 HTML 、CSS，这个插件 Atom 现在已经内置了，建议大家好好去了解下语法</li>
<li><a href="https://atom.io/packages/color-picker" target="_blank" rel="noopener">color-picker</a> 取色器</li>
<li><a href="https://atom.io/packages/linter" target="_blank" rel="noopener">linter</a> 代码错误检查
<ul>
<li><a href="https://atom.io/packages/linter-htmlhint" target="_blank" rel="noopener">linter-htmlhint</a></li>
<li><a href="https://atom.io/packages/linter-jshint" target="_blank" rel="noopener">linter-jshint</a></li>
<li><a href="https://atom.io/packages/linter-ui-default" target="_blank" rel="noopener">linter-ui-default</a></li>
</ul>
</li>
<li>autocomplete
<ul>
<li><a href="https://atom.io/packages/autoclose-html" target="_blank" rel="noopener">autoclose-html</a> 补全 HTML 闭合标签</li>
<li><a href="https://atom.io/packages/autocomplete-paths" target="_blank" rel="noopener">autocomplete-paths</a> 补全路径</li>
</ul>
</li>
</ul>
</li>
<li>GIT
<ul>
<li><a href="https://atom.io/packages/merge-conflicts" target="_blank" rel="noopener">merge-conflicts</a> 代码冲突需要合并的时候会用到</li>
<li><a href="https://atom.io/packages/tree-view-git-status" target="_blank" rel="noopener">tree-view-git-status</a></li>
</ul>
</li>
</ul>
<h3 id="HBuilder"><a class="header-anchor" href="#HBuilder"></a><a href="http://www.dcloud.io/" target="_blank" rel="noopener">HBuilder</a></h3>
<p>我并不用 HBuilder 写代码，主要还是用它来打包 H5 APP 用，因为对这块研究不深，加上 HBuilder 傻瓜式的操作，所以目前还保留在电脑上。</p>
<h2 id="GIT-管理"><a class="header-anchor" href="#GIT-管理"></a>GIT 管理</h2>
<h3 id="Sourcetree"><a class="header-anchor" href="#Sourcetree"></a><a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">Sourcetree</a></h3>
<p>我基本很少在终端里敲 git 命令，一直以来都是用可视化界面的软件，早期是使用 TortoiseGit ，后来是因为 Sourcetree 界面更直观，并且内置了 git-flow 工作流，所以就义无反顾的丢弃了 TortoiseGit 了。</p>
<h2 id="Chrome"><a class="header-anchor" href="#Chrome"></a>Chrome</h2>
<p>前端开发用 Chrome 可以说是必须的，不要和我提 Firefox ，我只在测试兼容性的时候才会想起它。</p>
<p>用 Chrome 有一部分原因是因为它的扩展，不过在介绍我的常用扩展前，先介绍一款 Chrome 的增强插件：<a href="https://shuax.com/portfolio/greenchrome/" target="_blank" rel="noopener">GreenChrome</a> ，我主要是看中它实现了双击关闭标签页的功能。</p>
<p>以下是我的常用扩展：</p>
<ul>
<li><a href="https://chrome.google.com/webstore/detail/adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb" target="_blank" rel="noopener">Adblock Plus</a></li>
<li><a href="https://chrome.google.com/webstore/detail/anything-to-qrcode/calkaljlpglgogjfcidhlmmlgjnpmnmf" target="_blank" rel="noopener">Anything to QRcode</a> 把网址转为二维码</li>
<li><a href="https://chrome.google.com/webstore/detail/cato/icphdcfpompgbdikholnedfeidemgobg" target="_blank" rel="noopener">Cato</a> 我主要是用来搜索收藏夹，但它的功能很强大，可以看这篇文章《<a href="https://www.appinn.com/cato-cliffordfajardo/" target="_blank" rel="noopener">Cato – 开源「命令行式」浏览器启动器</a>》</li>
<li><a href="https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg" target="_blank" rel="noopener">EditThisCookie</a> cookie 管理器</li>
<li><a href="https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?hl=en-US" target="_blank" rel="noopener">Octotree</a> 用于 Github 的文档树插件</li>
<li><a href="https://chrome.google.com/webstore/detail/gitcodetree/inaaldjpdbkaodlmdcplgpoibohcmmlj" target="_blank" rel="noopener">GitCodeTree</a> 用于码云的文档树插件</li>
<li><a href="https://chrome.google.com/webstore/detail/github-helper/bnpgnjajoaimdcjjmfjegpjmbmbplobm" target="_blank" rel="noopener">GitHub Helper</a></li>
<li><a href="https://chrome.google.com/webstore/detail/github-hovercard/mmoahbbnojgkclgceahhakhnccimnplk" target="_blank" rel="noopener">GitHub Hovercard</a></li>
<li><a href="https://chrome.google.com/webstore/detail/google-translate/aapbdbdomjkkjkaonfhkkikfgjllcleb" target="_blank" rel="noopener">Google 翻译</a></li>
<li><a href="https://chrome.google.com/webstore/detail/html5-storage-manager-all/giompennnhheakjcnobejbnjgbbkmdnd" target="_blank" rel="noopener">HTML5存储管理器多合一</a></li>
<li><a href="https://chrome.google.com/webstore/detail/jquery-audit/dhhnpbajdcgdmbbcoakfhmfgmemlncjg/" target="_blank" rel="noopener">jQuery Audit</a> 用于插件某个 DOM 上的事件和 data 信息</li>
<li><a href="https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh" target="_blank" rel="noopener">JSON Viewer</a></li>
<li><a href="https://chrome.google.com/webstore/detail/last-tab/nggjcpipkefkgldicofgmealjndjnhba" target="_blank" rel="noopener">Last Tab</a> chrome 在关闭最后一个标签后会自动关闭 chrome ，这个插件就是保证始终有一个锁定的空白标签，拯救了 <code>Ctrl + W</code> 党</li>
<li><a href="https://chrome.google.com/webstore/detail/user-agent-switcher-for-c/djflhoibgkdhkhhcedjiklpkjnoahfmg" target="_blank" rel="noopener">User-Agent Switcher for Chrome</a> 模拟 UA 用</li>
<li><a href="https://chrome.google.com/webstore/detail/take-webpage-screenshots/mcbpblocgmgfnpjjppndjkmgjaogfceg" target="_blank" rel="noopener">捕捉网页截图</a> 在需要截取整个页面的时候会用到</li>
<li><a href="https://chrome.google.com/webstore/detail/recover-closed-tab/kmnmkpgmneeokldcmfcgjppgpcfecoed" target="_blank" rel="noopener">恢复关闭的标签页</a></li>
</ul>
<h2 id="其它"><a class="header-anchor" href="#其它"></a>其它</h2>
<h3 id="Postman"><a class="header-anchor" href="#Postman"></a><a href="https://www.getpostman.com/" target="_blank" rel="noopener">Postman</a></h3>
<p>接口调试工具。</p>
<h3 id="Snipaste"><a class="header-anchor" href="#Snipaste"></a><a href="https://zh.snipaste.com/" target="_blank" rel="noopener">Snipaste</a></h3>
<p>一款很出色的截图软件，而且是国人开发的，我用了之后就把 QQ 、微信自带的截图快捷键给屏蔽掉了。</p>
<h3 id="BootCDN"><a class="header-anchor" href="#BootCDN"></a><a href="http://www.bootcdn.cn/" target="_blank" rel="noopener">BootCDN</a></h3>
<p>稳定、快速、免费的前端开源项目 CDN 加速服务。</p>
<h3 id="Iconfont-阿里巴巴矢量图标库"><a class="header-anchor" href="#Iconfont-阿里巴巴矢量图标库"></a><a href="http://www.iconfont.cn/" target="_blank" rel="noopener">Iconfont - 阿里巴巴矢量图标库</a></h3>
<p>据我了解，我司设计师找图标也是在 Iconfont 上找的，所以干脆就和设计师商量，设计师找的图标都添加到一个仓库里，前端开发直接生成 css 就行，减轻切图的工作。</p>
<h3 id="Slides"><a class="header-anchor" href="#Slides"></a><a href="https://slides.com/" target="_blank" rel="noopener">Slides</a></h3>
<p>适合技术人员做分享的在线幻灯片，够简单，没有太多复杂的功能。</p>
<h2 id="最后"><a class="header-anchor" href="#最后"></a>最后</h2>
<p>因为总有新工具出来，所以此文会不定期更新，当然文章里推荐的工具都很主观，都是我的个人使用感受，如果有更好的也欢迎交流。</p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
  </entry>
  <entry>
    <title>电商平台商品 SKU 组合查询算法实现</title>
    <url>/posts/8b2bd6f8/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2018/02/07/5a7b22273608b.png" alt=""></p>
<p>在大部分前端开发同学的日常工作中，很少会遇到算法问题，不得不说是种遗憾。但随着前端能处理的事务越来越多，多多少少也会遇到一些算法问题，就比如今天我打算讨论的这个问题——SKU组合查询。</p>
<a id="more"></a>
<h2 id="什么是-SKU"><a class="header-anchor" href="#什么是-SKU"></a>什么是 SKU</h2>
<p>我们看下维基百科是怎么解释的：</p>
<blockquote><p><strong>最小库存管理单元</strong>（Stock Keeping Unit, SKU）是一个会计学名词，定义为库存管理中的最小可用单元，例如纺织品中一个SKU通常表示规格、颜色、款式，而在连锁零售门店中有时称单品为一个 SKU 。</p>
<footer><strong>维基百科</strong><cite><a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E5%B0%8F%E5%AD%98%E8%B4%A7%E5%8D%95%E4%BD%8D" target="_blank" rel="noopener">最小存货单位</a></cite></footer></blockquote>
<p> <br>
官方的解释可能有点晦涩，我举个例子，假设有一个手机，信息如下表格所示：</p>
<table>
<thead>
<tr>
<th style="text-align:center">颜色</th>
<th style="text-align:center">内存</th>
<th style="text-align:center">容量</th>
<th style="text-align:center">电池</th>
<th style="text-align:center">摄像头</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">白色</td>
<td style="text-align:center"><strong>4G</strong></td>
<td style="text-align:center">16G</td>
<td style="text-align:center">2200mAh</td>
<td style="text-align:center"><strong>1600万像素</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong>黑色</strong></td>
<td style="text-align:center">6G</td>
<td style="text-align:center"><strong>32G</strong></td>
<td style="text-align:center">2800mAh</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">银色</td>
<td style="text-align:center"></td>
<td style="text-align:center">64G</td>
<td style="text-align:center"><strong>3200mAh</strong></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">红色</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<p>这款手机分别提供了颜色、内存、容量、电池、摄像头 5 种可选属性，而表格中加粗部分组合在一起，就形成了一个 SKU ：</p>
<p><code>黑色</code> + <code>4G</code> + <code>32G</code> + <code>3200mAh</code> + <code>1600万像素</code></p>
<h2 id="问题描述"><a class="header-anchor" href="#问题描述"></a>问题描述</h2>
<p>还是拿手机举例，假设现在这台手机只有颜色和内存 2 种可选属性，颜色只有黑色和白色，内存只有 4G 和 6G 。我们把属性组合一下，列举出所有的 SKU ，同时也显示出库存数量和价格：</p>
<table>
<thead>
<tr>
<th style="text-align:center">颜色</th>
<th style="text-align:center">内存</th>
<th style="text-align:center">库存</th>
<th style="text-align:center">价格</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">黑色</td>
<td style="text-align:center">4G</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1799</td>
</tr>
<tr>
<td style="text-align:center">黑色</td>
<td style="text-align:center">6G</td>
<td style="text-align:center">10</td>
<td style="text-align:center">1999</td>
</tr>
<tr>
<td style="text-align:center">白色</td>
<td style="text-align:center">4G</td>
<td style="text-align:center">10</td>
<td style="text-align:center">1899</td>
</tr>
<tr>
<td style="text-align:center">白色</td>
<td style="text-align:center">6G</td>
<td style="text-align:center">10</td>
<td style="text-align:center">2099</td>
</tr>
</tbody>
</table>
<p>可以看到这组数据里 <code>黑色 4G</code> 已经没有存货，而 <code>黑色 6G</code> 、 <code>白色 4G</code> 、 <code>白色 6G</code> 分别还有 10 个货源在。那么，当用户对商品进行选择的时候，如果首先选择 <code>黑色</code> ，对应的 <code>4G</code> 应该显示为不可选择状态，因为 <code>黑色 4G</code> 是没有货的。同样，如果先选择了 <code>4G</code> ，对应的 <code>黑色</code> 也应该显示为不可选择状态，因为 <code>黑色 4G</code> 还是没有货的。</p>
<h2 id="解决办法"><a class="header-anchor" href="#解决办法"></a>解决办法</h2>
<h3 id="场景还原"><a class="header-anchor" href="#场景还原"></a>场景还原</h3>
<p>要解决这个问题，我们先模拟一个商品购买选择 SKU 的场景。一般情况下，后台会通过接口提供给我们两组数据，分别是 <code>属性集</code> 和 <code>数据集</code> ，这里我就用两组固定数据模拟一下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 属性集</span></span><br><span class="line"><span class="keyword">var</span> key = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'颜色'</span>, <span class="attr">item</span>: [<span class="string">'黑'</span>, <span class="string">'金'</span>, <span class="string">'白'</span>]&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'内存'</span>, <span class="attr">item</span>: [<span class="string">'16G'</span>, <span class="string">'32G'</span>]&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'运营商'</span>, <span class="attr">item</span>: [<span class="string">'电信'</span>, <span class="string">'移动'</span>, <span class="string">'联通'</span>]&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据集</span></span><br><span class="line"><span class="keyword">var</span> sku = &#123;</span><br><span class="line">    <span class="string">'黑;16G;电信'</span>: &#123;<span class="attr">price</span>: <span class="number">100</span>, <span class="attr">count</span>: <span class="number">10</span>&#125;,</span><br><span class="line">    <span class="string">'黑;16G;移动'</span>: &#123;<span class="attr">price</span>: <span class="number">101</span>, <span class="attr">count</span>: <span class="number">11</span>&#125;,</span><br><span class="line">    <span class="string">'黑;16G;联通'</span>: &#123;<span class="attr">price</span>: <span class="number">102</span>, <span class="attr">count</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    <span class="string">'黑;32G;电信'</span>: &#123;<span class="attr">price</span>: <span class="number">103</span>, <span class="attr">count</span>: <span class="number">13</span>&#125;,</span><br><span class="line">    <span class="string">'黑;32G;移动'</span>: &#123;<span class="attr">price</span>: <span class="number">104</span>, <span class="attr">count</span>: <span class="number">14</span>&#125;,</span><br><span class="line">    <span class="string">'黑;32G;联通'</span>: &#123;<span class="attr">price</span>: <span class="number">105</span>, <span class="attr">count</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    <span class="string">'金;16G;电信'</span>: &#123;<span class="attr">price</span>: <span class="number">106</span>, <span class="attr">count</span>: <span class="number">16</span>&#125;,</span><br><span class="line">    <span class="string">'金;16G;移动'</span>: &#123;<span class="attr">price</span>: <span class="number">107</span>, <span class="attr">count</span>: <span class="number">17</span>&#125;,</span><br><span class="line">    <span class="string">'金;16G;联通'</span>: &#123;<span class="attr">price</span>: <span class="number">108</span>, <span class="attr">count</span>: <span class="number">18</span>&#125;,</span><br><span class="line">    <span class="string">'金;32G;电信'</span>: &#123;<span class="attr">price</span>: <span class="number">109</span>, <span class="attr">count</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    <span class="string">'金;32G;移动'</span>: &#123;<span class="attr">price</span>: <span class="number">110</span>, <span class="attr">count</span>: <span class="number">20</span>&#125;,</span><br><span class="line">    <span class="string">'金;32G;联通'</span>: &#123;<span class="attr">price</span>: <span class="number">111</span>, <span class="attr">count</span>: <span class="number">21</span>&#125;,</span><br><span class="line">    <span class="string">'白;16G;电信'</span>: &#123;<span class="attr">price</span>: <span class="number">112</span>, <span class="attr">count</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    <span class="string">'白;16G;移动'</span>: &#123;<span class="attr">price</span>: <span class="number">113</span>, <span class="attr">count</span>: <span class="number">23</span>&#125;,</span><br><span class="line">    <span class="string">'白;16G;联通'</span>: &#123;<span class="attr">price</span>: <span class="number">114</span>, <span class="attr">count</span>: <span class="number">24</span>&#125;,</span><br><span class="line">    <span class="string">'白;32G;电信'</span>: &#123;<span class="attr">price</span>: <span class="number">115</span>, <span class="attr">count</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    <span class="string">'白;32G;移动'</span>: &#123;<span class="attr">price</span>: <span class="number">116</span>, <span class="attr">count</span>: <span class="number">26</span>&#125;,</span><br><span class="line">    <span class="string">'白;32G;联通'</span>: &#123;<span class="attr">price</span>: <span class="number">117</span>, <span class="attr">count</span>: <span class="number">27</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>有了这两组数据，就可以实现最基本的 SKU 选择功能了。用 <code>属性集</code> 去渲染 DOM，当用户选择好 SKU 后，程序将用户选择的属性拼接成一个 sku 字符串，比如 <code>金;16G;电信</code> ，再根据这个字符串去 <code>数据集</code> 里获取库存和价格，演示如下：</p>
<iframe height='265' scrolling='no' title='1-基础功能实现' src='//codepen.io/hooray/embed/RJEwxm/?height=265&theme-id=0&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/hooray/pen/RJEwxm/' target="_blank" rel="noopener">1-基础功能实现</a> by 胡睿 (<a href='https://codepen.io/hooray' target="_blank" rel="noopener">@hooray</a>) on <a href='https://codepen.io' target="_blank" rel="noopener">CodePen</a>.
</iframe>
<p>上面这个演示有个最大的问题就是，必须把每个属性都选择后，才能获取到对应的库存和价格，如果没有选择完整，就无法获取对应的数据。</p>
<p>原因也很简单，因为 <code>数据集</code> 里没有提供嘛。比如我只选择了 <code>白</code> ，那么当前拼接出来的 sku 则是 <code>白;;</code> ，自然找不到这条 sku 的相关数据。那要怎么解决呢？那就把 <code>数据集</code> 加工一下嘛。</p>
<h3 id="数据加工"><a class="header-anchor" href="#数据加工"></a>数据加工</h3>
<p>我拿 <code>数据集</code> 里某一条 sku 举例，比如 <code>黑;16G;电信</code> ，将这个 sku 进行更小的拆分组合，希望得到以下的结果：</p>
<ul>
<li><code>;;</code></li>
<li><code>黑;;</code></li>
<li><code>;16G;</code></li>
<li><code>;;电信</code></li>
<li><code>黑;16G;</code></li>
<li><code>黑;;电信</code></li>
<li><code>;16G;电信</code></li>
<li><code>黑;16G;电信</code></li>
</ul>
<p>这里会涉及到本文中最核心的一个算法，让我们再仔细看下举例的这个 sku ，如果将它转为数组，就是：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="string">'黑'</span>, <span class="string">'16G'</span>, <span class="string">'电信'</span>]</span><br></pre></td></tr></table></figure>
<p>如果把最终希望得到的结果也转为数组，那就是：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>]</span><br><span class="line">[<span class="string">'黑'</span>, <span class="string">''</span>, <span class="string">''</span>]</span><br><span class="line">[<span class="string">''</span>, <span class="string">'16G'</span>, <span class="string">''</span>]</span><br><span class="line">[<span class="string">''</span>, <span class="string">''</span>, <span class="string">'电信'</span>]</span><br><span class="line">[<span class="string">'黑'</span>, <span class="string">'16G'</span>, <span class="string">''</span>]</span><br><span class="line">[<span class="string">'黑'</span>, <span class="string">''</span>, <span class="string">'电信'</span>]</span><br><span class="line">[<span class="string">''</span>, <span class="string">'16G'</span>, <span class="string">'电信'</span>]</span><br><span class="line">[<span class="string">'黑'</span>, <span class="string">'16G'</span>, <span class="string">'电信'</span>]</span><br></pre></td></tr></table></figure>
<p>然后仔细观察一下这组数据，看出些端倪了么？</p>
<p>没看出来？没关系，我们把这个 sku 再增加一个属性，如果数组是这样子的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="string">'黑'</span>, <span class="string">'16G'</span>, <span class="string">'电信'</span>, <span class="string">'2800mAh'</span>]</span><br></pre></td></tr></table></figure>
<p>那最终希望得到的结果也会有变化</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>]</span><br><span class="line"></span><br><span class="line">[<span class="string">'黑'</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>]</span><br><span class="line">[<span class="string">''</span>, <span class="string">'16G'</span>, <span class="string">''</span>, <span class="string">''</span>]</span><br><span class="line">[<span class="string">''</span>, <span class="string">''</span>, <span class="string">'电信'</span>, <span class="string">''</span>]</span><br><span class="line">[<span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">'2800mAh'</span>]</span><br><span class="line"></span><br><span class="line">[<span class="string">'黑'</span>, <span class="string">'16G'</span>, <span class="string">''</span>, <span class="string">''</span>]</span><br><span class="line">[<span class="string">'黑'</span>, <span class="string">''</span>, <span class="string">'电信'</span>, <span class="string">''</span>]</span><br><span class="line">[<span class="string">'黑'</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">'2800mAh'</span>]</span><br><span class="line">[<span class="string">''</span>, <span class="string">'16G'</span>, <span class="string">'电信'</span>, <span class="string">''</span>]</span><br><span class="line">[<span class="string">''</span>, <span class="string">'16G'</span>, <span class="string">''</span>, <span class="string">'2800mAh'</span>]</span><br><span class="line">[<span class="string">''</span>, <span class="string">''</span>, <span class="string">'电信'</span>, <span class="string">'2800mAh'</span>]</span><br><span class="line"></span><br><span class="line">[<span class="string">'黑'</span>, <span class="string">'16G'</span>, <span class="string">'电信'</span>, <span class="string">''</span>]</span><br><span class="line">[<span class="string">'黑'</span>, <span class="string">'16G'</span>, <span class="string">''</span>, <span class="string">'2800mAh'</span>]</span><br><span class="line">[<span class="string">'黑'</span>, <span class="string">''</span>, <span class="string">'电信'</span>, <span class="string">'2800mAh'</span>]</span><br><span class="line">[<span class="string">''</span>, <span class="string">'16G'</span>, <span class="string">'电信'</span>, <span class="string">'2800mAh'</span>]</span><br><span class="line"></span><br><span class="line">[<span class="string">'黑'</span>, <span class="string">'16G'</span>, <span class="string">'电信'</span>, <span class="string">'2800mAh'</span>]</span><br></pre></td></tr></table></figure>
<p>相信有人已经看出来了，这里需要实现的一个算法就是：</p>
<p><strong>从 m 个不同元素中取出 n 个元素的组合数</strong></p>
<p>我们可以分别去验证一下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 源数据 ['黑', '16G', '电信', '2800mAh']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 4 个元素中取 0 个元素的组合</span></span><br><span class="line">[<span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 4 个元素中取 1 个元素的组合</span></span><br><span class="line">[<span class="string">'黑'</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>]</span><br><span class="line">[<span class="string">''</span>, <span class="string">'16G'</span>, <span class="string">''</span>, <span class="string">''</span>]</span><br><span class="line">[<span class="string">''</span>, <span class="string">''</span>, <span class="string">'电信'</span>, <span class="string">''</span>]</span><br><span class="line">[<span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">'2800mAh'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 4 个元素中取 2 个元素的组合</span></span><br><span class="line">[<span class="string">'黑'</span>, <span class="string">'16G'</span>, <span class="string">''</span>, <span class="string">''</span>]</span><br><span class="line">[<span class="string">'黑'</span>, <span class="string">''</span>, <span class="string">'电信'</span>, <span class="string">''</span>]</span><br><span class="line">[<span class="string">'黑'</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">'2800mAh'</span>]</span><br><span class="line">[<span class="string">''</span>, <span class="string">'16G'</span>, <span class="string">'电信'</span>, <span class="string">''</span>]</span><br><span class="line">[<span class="string">''</span>, <span class="string">'16G'</span>, <span class="string">''</span>, <span class="string">'2800mAh'</span>]</span><br><span class="line">[<span class="string">''</span>, <span class="string">''</span>, <span class="string">'电信'</span>, <span class="string">'2800mAh'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//从 4 个元素中取 3 个元素的组合</span></span><br><span class="line">[<span class="string">'黑'</span>, <span class="string">'16G'</span>, <span class="string">'电信'</span>, <span class="string">''</span>]</span><br><span class="line">[<span class="string">'黑'</span>, <span class="string">'16G'</span>, <span class="string">''</span>, <span class="string">'2800mAh'</span>]</span><br><span class="line">[<span class="string">'黑'</span>, <span class="string">''</span>, <span class="string">'电信'</span>, <span class="string">'2800mAh'</span>]</span><br><span class="line">[<span class="string">''</span>, <span class="string">'16G'</span>, <span class="string">'电信'</span>, <span class="string">'2800mAh'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//从 4 个元素中取 4 个元素的组合</span></span><br><span class="line">[<span class="string">'黑'</span>, <span class="string">'16G'</span>, <span class="string">'电信'</span>, <span class="string">'2800mAh'</span>]</span><br></pre></td></tr></table></figure>
<p>实现代码如下（非原创）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从m中取n的所有组合</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlagArrs</span>(<span class="params">m, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flagArrs = [],</span><br><span class="line">        flagArr = [],</span><br><span class="line">        isEnd = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">        flagArr[i] = i &lt; n ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    flagArrs.push(flagArr.concat());</span><br><span class="line">    <span class="comment">// 当n不等于0并且m大于n的时候进入</span></span><br><span class="line">    <span class="keyword">if</span>(n &amp;&amp; m &gt; n)&#123;</span><br><span class="line">        <span class="keyword">while</span>(!isEnd)&#123;</span><br><span class="line">            <span class="keyword">var</span> leftCnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; m - <span class="number">1</span>; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (flagArr[i] == <span class="number">1</span> &amp;&amp; flagArr[i + <span class="number">1</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">                        flagArr[j] = j &lt; leftCnt ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    flagArr[i] = <span class="number">0</span>;</span><br><span class="line">                    flagArr[i + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">var</span> aTmp = flagArr.concat();</span><br><span class="line">                    flagArrs.push(aTmp);</span><br><span class="line">                    <span class="keyword">if</span>(aTmp.slice(-n).join(<span class="string">''</span>).indexOf(<span class="string">'0'</span>) == <span class="number">-1</span>)&#123;</span><br><span class="line">                        isEnd = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                flagArr[i] == <span class="number">1</span> &amp;&amp; leftCnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flagArrs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方法在调用后返回的 flagArrs 并不是最终所需要的业务数据，而是返回一组这样的数据</p>
<p><img src="https://i.loli.net/2018/02/07/5a7b00a15bd42.png" alt=""></p>
<p>这时候需要用源数据，也就是 <code>['黑', '16G', '电信', '2800mAh']</code> 依次循环填坑，将数组中为 <code>1</code> 的部分替换掉，<code>0</code> 的部分则留空，这样就能得到我们需要的数据了。</p>
<p>解决到这一步后，后面的工作就相对轻松了。</p>
<p>我们已经能根据 <code>黑;16G;电信</code> 得到这样的一组数据了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>]</span><br><span class="line">[<span class="string">'黑'</span>, <span class="string">''</span>, <span class="string">''</span>]</span><br><span class="line">[<span class="string">''</span>, <span class="string">'16G'</span>, <span class="string">''</span>]</span><br><span class="line">[<span class="string">''</span>, <span class="string">''</span>, <span class="string">'电信'</span>]</span><br><span class="line">[<span class="string">'黑'</span>, <span class="string">'16G'</span>, <span class="string">''</span>]</span><br><span class="line">[<span class="string">'黑'</span>, <span class="string">''</span>, <span class="string">'电信'</span>]</span><br><span class="line">[<span class="string">''</span>, <span class="string">'16G'</span>, <span class="string">'电信'</span>]</span><br><span class="line">[<span class="string">'黑'</span>, <span class="string">'16G'</span>, <span class="string">'电信'</span>]</span><br></pre></td></tr></table></figure>
<p>但这数据里并没有存放库存以及价格信息，这时候我们先观察一下数据，一个 sku 就能得到一组这样的数据，换一个 sku 一样还是能得到一组类似的数据，比如换成 <code>黑;16G;移动</code> 就会得到</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>]</span><br><span class="line">[<span class="string">'黑'</span>, <span class="string">''</span>, <span class="string">''</span>]</span><br><span class="line">[<span class="string">''</span>, <span class="string">'16G'</span>, <span class="string">''</span>]</span><br><span class="line">[<span class="string">''</span>, <span class="string">''</span>, <span class="string">'移动'</span>]</span><br><span class="line">[<span class="string">'黑'</span>, <span class="string">'16G'</span>, <span class="string">''</span>]</span><br><span class="line">[<span class="string">'黑'</span>, <span class="string">''</span>, <span class="string">'移动'</span>]</span><br><span class="line">[<span class="string">''</span>, <span class="string">'16G'</span>, <span class="string">'移动'</span>]</span><br><span class="line">[<span class="string">'黑'</span>, <span class="string">'16G'</span>, <span class="string">'移动'</span>]</span><br></pre></td></tr></table></figure>
<p>发现了么？其中有几个数据是一样的，比如都有出现 <code>['黑', '', '']</code> <code>['', '16G', '']</code> <code>['黑', '16G', '']</code> ……</p>
<p>我只需把数据一样的库存进行累加，同时把价格存到一个数组里。这样把 <code>数据集</code> 里所有的 sku 都循环一遍后，对应的库存数就统计出来了。比如每个 sku 都会出现 <code>['', '', '']</code> ，那累计得出的自然也就是该商品的总库存数量；再比如 sku 里有出现过 <code>['黑', '', '']</code> ，最终累计得出的就是该商品颜色为黑色的库存数量。</p>
<p>至于价格，因为每次循环，价格都被保存到与 sku 相对应的一个数组里，比如 <code>['', '', '']</code> 就会保存 <code>数据集</code> 所有 sku 的价格， <code>['黑', '', '']</code> 则会保存与黑色相关的所有价格。如果要获取价格，通过 js 的 Math 对象能很轻松的获取数组里的最大值和最小值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最大值</span></span><br><span class="line"><span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, <span class="built_in">Array</span>);</span><br><span class="line"><span class="comment">// 最小值</span></span><br><span class="line"><span class="built_in">Math</span>.min.apply(<span class="built_in">Math</span>, <span class="built_in">Array</span>);</span><br></pre></td></tr></table></figure>
<p>至此，我们已经能实现用户选择一个或多个属性时，均能展示当前的库存和价格信息，演示如下：</p>
<iframe height='265' scrolling='no' title='2-进阶功能实现' src='//codepen.io/hooray/embed/JZwjpa/?height=265&theme-id=0&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/hooray/pen/JZwjpa/' target="_blank" rel="noopener">2-进阶功能实现</a> by 胡睿 (<a href='https://codepen.io/hooray' target="_blank" rel="noopener">@hooray</a>) on <a href='https://codepen.io' target="_blank" rel="noopener">CodePen</a>.
</iframe>
<h3 id="关联-SKU-验证"><a class="header-anchor" href="#关联-SKU-验证"></a>关联 SKU 验证</h3>
<p>先恭喜你离最终我们所希望达到的效果，只差一步了。</p>
<p>好，回归问题，我们希望当用户点击属性选择的时候，程序能去验证一些可能点击的属性，提前把 0 库存的属性设为禁止选中状态。我把这里的操作分为两种情况，一种是当用户只差一个属性没选的时候，另一种是当用户所有属性都选择的时候。</p>
<p><strong>当用户只差一个属性没选</strong></p>
<p>这种情况下，只需将已选中的属性依次和未选中属性里的值拼接，如果拼接出来的 sku 库存为 0 ，则将对应未选中属性的值设为禁止状态。如果没理解，下面我用张表格具体举例，加粗表示已经选中的属性。</p>
<table>
<thead>
<tr>
<th style="text-align:center">颜色</th>
<th style="text-align:center">内存</th>
<th style="text-align:center">容量</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">白色</td>
<td style="text-align:center"><strong>4G</strong></td>
<td style="text-align:center">16G</td>
</tr>
<tr>
<td style="text-align:center"><strong>黑色</strong></td>
<td style="text-align:center">6G</td>
<td style="text-align:center">32G</td>
</tr>
<tr>
<td style="text-align:center">银色</td>
<td style="text-align:center"></td>
<td style="text-align:center">64G</td>
</tr>
<tr>
<td style="text-align:center">红色</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<p>上面表示颜色和内存都已选好，程序要做的事就是循环容量属性里的值，然后把颜色和内存里已选择的值组成 sku 去检查库存。这里会验证 3 组 sku ：</p>
<ul>
<li><code>黑色;4G;16G</code></li>
<li><code>黑色;4G;32G</code></li>
<li><code>黑色;4G;64G</code></li>
</ul>
<p>如果验证出 <code>黑色;4G;32G</code> 的库存是 0 ，那就把 <code>32G</code> 设为禁止选择。</p>
<p><strong>当用户所有属性都选择</strong></p>
<p>这种情况下，则需要将每组属性里未被选中的值和其它已选中的属性拼接，将拼接出来的 sku 进行验证。还是用张表格来举例吧。</p>
<table>
<thead>
<tr>
<th style="text-align:center">颜色</th>
<th style="text-align:center">内存</th>
<th style="text-align:center">容量</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">白色</td>
<td style="text-align:center"><strong>4G</strong></td>
<td style="text-align:center">16G</td>
</tr>
<tr>
<td style="text-align:center"><strong>黑色</strong></td>
<td style="text-align:center">6G</td>
<td style="text-align:center">32G</td>
</tr>
<tr>
<td style="text-align:center">银色</td>
<td style="text-align:center"></td>
<td style="text-align:center"><strong>64G</strong></td>
</tr>
<tr>
<td style="text-align:center">红色</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<p>第一步，先将颜色里未选择的值去组成 sku ：</p>
<ul>
<li><code>白色;4G;64G</code></li>
<li><code>银色;4G;64G</code></li>
<li><code>红色;4G;64G</code></li>
</ul>
<p>如果验证出 <code>银色;4G;64G</code> 的库存是 0 ，那就把 <code>银色</code> 设为禁止选择。</p>
<p>第二步，再将内存里未选择的值去组成 sku ：</p>
<ul>
<li><code>黑色;6G;64G</code></li>
</ul>
<p>如果验证出 <code>黑色;6G;64G</code> 的库存是 0 ，那就把 <code>6G</code> 设为禁止选择。</p>
<p>最后一步，将容量里未选择的值去组成 sku ：</p>
<ul>
<li><code>黑色;4G;16G</code></li>
<li><code>黑色;4G;32G</code></li>
</ul>
<p>如果验证出 <code>黑色;4G;32G</code> 的库存是 0 ，那就把 <code>32G</code> 设为禁止选择。</p>
<p>按照这个思路，我们最终的演示也出来了</p>
<iframe height='265' scrolling='no' title='3-完整功能实现' src='//codepen.io/hooray/embed/KebKoW/?height=265&theme-id=0&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/hooray/pen/KebKoW/' target="_blank" rel="noopener">3-完整功能实现</a> by 胡睿 (<a href='https://codepen.io/hooray' target="_blank" rel="noopener">@hooray</a>) on <a href='https://codepen.io' target="_blank" rel="noopener">CodePen</a>.
</iframe>
<h2 id="总结"><a class="header-anchor" href="#总结"></a>总结</h2>
<p>整个功能实现的思路相对还是比较清晰的，比较费时的就是两个算法的实现。</p>
<p>第一个算法，将 <code>数据集</code> 进行更小的拆分组合时候，我最开始的想法是用 <code>属性集</code> 去进行组合和递归，但一直无法得出最终想要的结果，于是才改从 <code>数据集</code> 下手。</p>
<p>第二个算法，点击验证 SKU 其实还可以继续优化，我举个例子：</p>
<table>
<thead>
<tr>
<th style="text-align:center">颜色</th>
<th style="text-align:center">内存</th>
<th style="text-align:center">容量</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">白色</td>
<td style="text-align:center">4G</td>
<td style="text-align:center">16G</td>
</tr>
<tr>
<td style="text-align:center"><strong>黑色</strong></td>
<td style="text-align:center">6G</td>
<td style="text-align:center">32G</td>
</tr>
<tr>
<td style="text-align:center">银色</td>
<td style="text-align:center"></td>
<td style="text-align:center">64G</td>
</tr>
<tr>
<td style="text-align:center">红色</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<p>如上表格，如果 <code>黑色;4G;16G</code> 和 <code>黑色;6G;16G</code> 的库存都是 0 ，那么在用户选中 <code>黑色</code> 的时候，则应该把 <code>16G</code> 设为禁止选中状态。但基于我的算法方案，当用户只选中 <code>黑色</code> 的时候，却不属于两种情况当中的任何一种，则无法进行验证。</p>
<p>关于 SKU 的算法还是有很多优化的地方，当然一定也有还没考虑到的问题。本文抛砖引玉，希望能给同行一些思路。</p>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><a href="https://jingyan.baidu.com/article/63acb44ac60d4e61fcc17e2e.html" target="_blank" rel="noopener">用例子理解排列组合及基本公式如何计算</a></li>
<li><a href="http://blog.csdn.net/rosanu_blog/article/details/49836575" target="_blank" rel="noopener">淘宝SKU组合查询算法实现</a></li>
<li><a href="https://keelii.github.io/2016/12/22/sku-multi-dimensional-attributes-state-algorithm/" target="_blank" rel="noopener">Sku 多维属性状态判断算法</a></li>
</ul>
]]></content>
      <categories>
        <category>Web 综合</category>
      </categories>
      <tags>
        <tag>SKU</tag>
        <tag>电商</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 jQuery WeUI 的通讯录模块</title>
    <url>/posts/8913e16b/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2018/02/02/5a73c8a445bcc.png" alt=""></p>
<p>由于 <a href="http://jqweui.com/" target="_blank" rel="noopener">jQuery WeUI</a> 本身没有提供通讯录模块，所以自己写了一个 <a href="https://hooray.github.io/jquery-weui-contacts/index.html">demo</a> 页面，实现了基本展示以及右侧字母快捷导航功能。</p>
<a id="more"></a>
<p><img src="https://github.com/hooray/jquery-weui-contacts/raw/master/images/2017/09/1506365328.png" alt=""></p>
<p><img src="https://wx2.sinaimg.cn/mw690/60c18c1cgy1fo1wldsuphg209y0jvqv5.gif" alt=""></p>
<p>考虑到通讯录模块对界面展示的定置化需求会比较大，所以没有封装成插件。下载源码后可自行修改联系人界面样式。</p>
<p>功能比较简单，实现也没用几句代码，所以也没有太多可介绍的，感兴趣的直接看源码吧。</p>
<script src='//gitee.com/hooray/jquery-weui-contacts/widget_preview'></script>
<p> </p>
<div style="text-align: center">
  <div class="github-card"
    data-user="hooray"
    data-repo="jquery-weui-contacts"
    data-height="200"
    data-width="100%"
    data-theme="default"
    data-target="undefined"
    data-client-id=""
    data-client-secret=""
  ></div>
</div>
<script src="/github-card-lib/githubcard.js"></script>
<p><strong>2018/12/18 更新</strong></p>
<p>用 Vue 也实现了一遍：</p>
<iframe height='500' scrolling='no' title='通讯录快速定位（Vue）' src='//codepen.io/hooray/embed/YRbdry/?height=500&theme-id=0&default-tab=js' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/hooray/pen/YRbdry/' target="_blank" rel="noopener">通讯录快速定位（Vue）</a> by 代码小睿 (<a href='https://codepen.io/hooray' target="_blank" rel="noopener">@hooray</a>) on <a href='https://codepen.io' target="_blank" rel="noopener">CodePen</a>.
</iframe>]]></content>
      <categories>
        <category>Web 综合</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
        <tag>WeUI</tag>
        <tag>通讯录</tag>
      </tags>
  </entry>
  <entry>
    <title>Gulp 前端自动化工作流</title>
    <url>/posts/48995743/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2018/02/01/5a72c21986995.png" alt=""></p>
<p>初识 <a href="https://www.gulpjs.com.cn/" target="_blank" rel="noopener">Gulp</a> 是因为公司项目逐渐需要进行前后端分离，既然脱离了<s>世界上最好的语言</s> PHP 后，也就没了 <code>include</code> 函数的支持，面临最大的问题就是页面 <code>header</code> 、 <code>footer</code> 等一些公用部分的代码要怎么在每个页面上引用，手动复制肯定不行。</p>
<p>在网上搜寻一番后，发现了 <a href="https://www.npmjs.com/package/gulp-file-include" target="_blank" rel="noopener">gulp-file-include</a> 这个插件，后面的故事，就像每个热恋中的人一样，恨不得每天都和 <a href="https://www.gulpjs.com.cn/" target="_blank" rel="noopener">Gulp</a> 腻在一起。</p>
<p>经过半年的相处，也大概摸透了 <a href="https://www.gulpjs.com.cn/" target="_blank" rel="noopener">Gulp</a> 的一些习性，并根据工作上的流程，整理了一套公司内部的前端自动化部署的开发环境。</p>
<a id="more"></a>
<div class="note primary">
            <p>该项目有较大更新，建议结合《<a href="/posts/157bef6b/" title="gulp-automation 升级小记">gulp-automation 升级小记</a>》阅读</p>
          </div>
<div class="note warning">
            <p>本文不是 <a href="https://www.gulpjs.com.cn/" target="_blank" rel="noopener">Gulp</a> 的使用介绍，关于 <a href="https://www.gulpjs.com.cn/" target="_blank" rel="noopener">Gulp</a> 入门，请自行学习。</p>
          </div>
<h2 id="gulp-automation"><a class="header-anchor" href="#gulp-automation"></a>gulp-automation</h2>
<blockquote class="blockquote-center"><p><strong>少罗嗦，先看东西</strong></p>
</blockquote>
<script src='//gitee.com/eoner/gulp-automation/widget_preview'></script>
<h2 id="如何使用"><a class="header-anchor" href="#如何使用"></a>如何使用</h2>
<h3 id="准备工作"><a class="header-anchor" href="#准备工作"></a>准备工作</h3>
<ol>
<li>安装 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li>
<li>安装 <a href="https://yarnpkg.com/zh-Hans/" target="_blank" rel="noopener">Yarn</a></li>
<li>安装 <a href="https://gulpjs.com/" target="_blank" rel="noopener">Gulp</a></li>
<li>安装 <a href="https://rubyinstaller.org/downloads/" target="_blank" rel="noopener">Ruby</a></li>
<li>安装 <a href="http://compass-style.org/" target="_blank" rel="noopener">Compass</a></li>
</ol>
<h3 id="安装"><a class="header-anchor" href="#安装"></a>安装</h3>
<p>首先将 <a href="https://gitee.com/eoner/gulp-automation" target="_blank" rel="noopener">gulp-automation</a> 下载到本地，下载好后推荐使用 Yarn 安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn install</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2018/02/01/5a72cee181f7f.png" alt=""></p>
<h3 id="运行"><a class="header-anchor" href="#运行"></a>运行</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gulp</span><br></pre></td></tr></table></figure>
<p>成功运行后，会自动打开浏览器并访问 <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> 页面</p>
<h3 id="编写代码"><a class="header-anchor" href="#编写代码"></a>编写代码</h3>
<p>原始页面全部在 <code>page</code> 目录下编写。打开 <code>page</code> 目录会看到有一个 <code>index.html</code> 页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引用公用页面采用以下方式 --&gt;</span></span><br><span class="line">    @@include('include/head.html')</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Test Page !<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test-img"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"@@webRoot/static/js/main.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以看到，和正常写 HTML 代码没什么区别。对于公用代码的引用，通过这样语法进行引用</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">@<span class="meta">@include(<span class="meta-string">'&lt;页面地址&gt;'</span>)</span></span><br></pre></td></tr></table></figure>
<p>这里其实就是用到了 <a href="https://www.npmjs.com/package/gulp-file-include" target="_blank" rel="noopener">gulp-file-include</a> ，更多语法参数点 <a href="https://www.npmjs.com/package/gulp-file-include" target="_blank" rel="noopener">这里</a> 查看！</p>
<p>通过上面可得知，<code>page/include/</code> 是用来存放公用部分的代码的。</p>
<p>这时候可能又会遇到一个问题，不是所有网站的页面都存放在根目录下的，可能会按照功能模块的不同，划分出不同的文件夹来存放不同的页面，比如我们经常会看到这样的链接：</p>
<blockquote>
<ul>
<li><a href="http://www.xxx.com/index.html" target="_blank" rel="noopener">www.xxx.com/index.html</a></li>
<li><a href="http://www.xxx.com/news/detail.html?nid=2" target="_blank" rel="noopener">www.xxx.com/news/detail.html?nid=2</a></li>
<li><a href="http://www.xxx.com/product/info.html?pid=1" target="_blank" rel="noopener">www.xxx.com/product/info.html?pid=1</a></li>
</ul>
</blockquote>
<p>网站首页存放在根目录，新闻相关页面存放在 <code>news</code> 文件夹下，产品相关页面存放在 <code>product</code> 文件夹下。</p>
<p>这里我的做法是把所有模块都放到 <code>page/module/</code> 目录下，打开目录就可以看到一个 <code>banner</code> 文件夹，你可以在这个目录下随意创建其它模块文件夹。</p>
<h3 id="发布-打包"><a class="header-anchor" href="#发布-打包"></a>发布/打包</h3>
<p>发布</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gulp build</span><br></pre></td></tr></table></figure>
<p>发布并打包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gulp build --z</span><br></pre></td></tr></table></figure>
<div class="note info">
            <ul><li>修改 <code>package.json</code> 里的 <code>name</code> 参数，可改变打包出来压缩包文件的命名</li><li>打包时使用了 <a href="https://www.npmjs.com/package/gulp-tinypng-nokey" target="_blank" rel="noopener">gulp-tinypng-nokey</a> 插件进行图片压缩，需要将图片上传到服务器压缩后再下载，请确保打包时网络畅通</li></ul>
          </div>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><a href="https://www.gulpjs.com.cn/" target="_blank" rel="noopener">Gulp 中文网</a></li>
<li><a href="https://www.jianshu.com/p/9768a4dc7cf7" target="_blank" rel="noopener">Gulp探究折腾之路(I)</a></li>
<li><a href="http://www.cnblogs.com/Darren_code/p/gulp.html" target="_blank" rel="noopener">gulp使用小结(一)</a></li>
<li><a href="http://www.cnblogs.com/2050/p/4198792.html" target="_blank" rel="noopener">前端构建工具gulpjs的使用介绍及技巧</a></li>
<li><a href="http://pinkyjie.com/2015/08/02/commonly-used-gulp-plugins-part-1/" target="_blank" rel="noopener">常用gulp插件介绍(一)</a></li>
<li><a href="http://pinkyjie.com/2015/03/24/refactor-your-gulpfile/" target="_blank" rel="noopener">重构你的gulpfile</a></li>
</ul>
]]></content>
      <categories>
        <category>Web 综合</category>
      </categories>
      <tags>
        <tag>Gulp</tag>
        <tag>自动化</tag>
        <tag>gulp-automation</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Hexo 和 Github 快速搭建个人博客</title>
    <url>/posts/15e2d21f/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2018/01/31/5a71327d1830b.png" alt=""></p>
<p>网上类似的教程一搜一大把，写得其实很详细。但对于初次接触的我来说，这是一次全新的体验。所以在经历了多次「安装——配置——部署——删除——再安装——」之后，大概弄懂了整个流程。正好也是博客的开篇文章，记录一下整个搭建流程，加深印象。</p>
<a id="more"></a>
<h2 id="安装"><a class="header-anchor" href="#安装"></a>安装</h2>
<h3 id="安装前提"><a class="header-anchor" href="#安装前提"></a>安装前提</h3>
<p>在安装前，先确保电脑上已经安装了 <a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a> 和 <a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a> 环境。</p>
<h3 id="安装-Hexo"><a class="header-anchor" href="#安装-Hexo"></a>安装 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a></h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn global add hexo-cli</span><br></pre></td></tr></table></figure>
<div class="note info">
            <p>官方是使用 npm 进行安装，个人推荐使用 <a href="https://yarnpkg.com/zh-Hans/" target="_blank" rel="noopener">yarn</a> 进行安装，关于 yarn 和 npm 优劣分析，可以参考这篇文章《<a href="http://web.jobbole.com/88459/" target="_blank" rel="noopener">Yarn vs npm: 你需要知道的一切</a>》</p>
          </div>
<h2 id="建站"><a class="header-anchor" href="#建站"></a>建站</h2>
<h3 id="初始化"><a class="header-anchor" href="#初始化"></a>初始化</h3>
<p>先新建一个 <code>blog</code> 文件夹，然后进入该文件夹运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure>
<p>初始化完成后， <code>blog</code> 文件夹的目录如下：</p>
<p><img src="https://i.loli.net/2018/02/01/5a72b7bf324c9.png" alt=""></p>
<h3 id="本地访问"><a class="header-anchor" href="#本地访问"></a>本地访问</h3>
<p>继续运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>
<p>运行成功后会发现提示信息：</p>
<blockquote>
<p>Hexo is running at http://localhost:4000/.</p>
</blockquote>
<p>这个时候访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 就会发现网站已经建好了！</p>
<h3 id="常用命令"><a class="header-anchor" href="#常用命令"></a>常用命令</h3>
<p>以下 4 个是我在搭建过程中发现使用频率最高的 4 个命令，甚至我感觉只要会这 4 个命令就可以了。</p>
<p><strong>generate</strong></p>
<p>生成静态文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p><strong>server</strong></p>
<p>启动服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p><strong>deploy</strong></p>
<p>部署网站</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p><strong>clean</strong></p>
<p>清除缓存文件（<code>db.json</code>）和已生成的静态文件（<code>public</code>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>
<p>更多命令和参数请看 <a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">这里</a> ！</p>
<h3 id="部署到-Github"><a class="header-anchor" href="#部署到-Github"></a>部署到 Github</h3>
<p>首先先到 Github 上新建一个仓库，仓库名的格式为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">username</span>&gt;<span class="selector-class">.github</span><span class="selector-class">.io</span></span><br></pre></td></tr></table></figure>
<p>例如我的就是 <code>hooray.github.io</code> ，创建好后，复制仓库的 <code>HTTPS</code> 地址，打开 <code>blog</code> 根目录下的 <code>_config.yml</code> 文件，拖动到底部找到 <code>deploy</code> 配置，按照以下格式修改并保存：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repo:</span> <span class="params">&lt;仓库地址&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个时候安装 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a> 自动部署发布工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn add hexo-deployer-git</span><br></pre></td></tr></table></figure>
<p>安装完成后，就可以去发布了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<p>第一次发布会提示输入 Github 账号和密码：</p>
<p><img src="https://i.loli.net/2018/01/31/5a712b5a2e28b.png" alt=""></p>
<p>稍微等待一会，会提示发布成功，然后在浏览器里测试访问 <a href="https://hooray.github.io">https://hooray.github.io</a> ，大功告成！</p>
<p><img src="https://i.loli.net/2018/01/31/5a712cef6dc85.png" alt=""></p>
<p>这时候打开仓库会发现 Hexo 其实是把 <code>public</code> 目录下生成好的静态页面和相关资源上传到了 <code>master</code> 分支下，但是本地博客的开发环境是没有上传到仓库里的，如果换一台电脑想继续写博客更新，这就没办法了。</p>
<p>要解决这个问题其实也很简单，可以单独再创建一个仓库，专门用于上传开发环境。但我的做法是创建一个分支，比如 <code>hexo</code> 分支，这个分支专门用来上传开发环境。</p>
<div class="note warning">
            <p>需要注意，通过 git clone 下来的 NexT 主题，需要手动删除隐藏的 .git 文件夹，不然 NexT 主题整个文件夹都不会被提交。</p>
          </div>
<h2 id="主题"><a class="header-anchor" href="#主题"></a>主题</h2>
<h3 id="安装-NexT"><a class="header-anchor" href="#安装-NexT"></a>安装 <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT</a></h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<div class="note info">
            <p>我安装的是 <code>6.0.x</code> 的 NexT ，但在 NexT 官网上提供的还是 <code>5.1.x</code> 的安装命令和文档，因为 <code>6.0.x</code> 和 <code>5.1.x</code> 的配置有所不同，建议第一次练习搭建还是使用 <code>5.1.x</code> ，熟悉配置文档后，再用 <code>6.0.x</code> 。</p>
          </div>
<p>修改 <code>_config.yml</code> 文件里 <code>theme</code> 配置：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">theme: <span class="keyword">next</span></span><br></pre></td></tr></table></figure>
<h3 id="配置"><a class="header-anchor" href="#配置"></a>配置</h3>
<p>虽然我安装的是 <code>6.0.x</code> ，但大部分还是可以根据 NexT <a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">主题配置</a> 文档来修改，以下会介绍一些文档中没有提及的设置。</p>
<div class="note info">
            <p>以下分别用：</p><ul><li><code>站点配置</code> _config.yml</li><li><code>主题配置</code> themes/next/_config.yml</li></ul><p>区分两个配置文件</p>
          </div>
<h4 id="设置网站语言"><a class="header-anchor" href="#设置网站语言"></a>设置网站语言</h4>
<p>打开 <code>站点配置</code> 找到 <code>language</code> 修改</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">language:</span> <span class="built_in">zh</span>-CN</span><br></pre></td></tr></table></figure>
<h4 id="开启导航"><a class="header-anchor" href="#开启导航"></a>开启导航</h4>
<p>打开 <code>主题配置</code> 找到 <code>menu</code> ，将需要开启的导航前面的 <code>#</code> 删掉</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> / || home</span><br><span class="line"><span class="symbol">  about:</span> <span class="meta-keyword">/about/</span> || user</span><br><span class="line"><span class="symbol">  tags:</span> <span class="meta-keyword">/tags/</span> || tags</span><br><span class="line"><span class="symbol">  categories:</span> <span class="meta-keyword">/categories/</span> || th</span><br><span class="line"><span class="symbol">  archives:</span> <span class="meta-keyword">/archives/</span> || archive</span><br><span class="line">  <span class="meta">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="meta">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line"><span class="symbol">  commonweal:</span> /<span class="number">404.</span>html || heartbeat</span><br></pre></td></tr></table></figure>
<p>这个时候会发现网站上已经能看到导航了，但点击却提示找不到页面。</p>
<p>这时需要去新建对应的页面，比如新建 <code>标签</code> 页：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page <span class="string">"tags"</span></span><br></pre></td></tr></table></figure>
<p>新建好后会在 <code>source/tags/index.md</code> 看到刚新建的文件，在 <code>Front-matter</code> 区域增加一句：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span></span>: <span class="string">"tags"</span></span><br></pre></td></tr></table></figure>
<p>其它导航页面操作一样。</p>
<h4 id="增加评论模块"><a class="header-anchor" href="#增加评论模块"></a>增加评论模块</h4>
<p>在 NexT 官网上可以查到第三方评论系统的配置方法，我最终选择的是 <a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">Gitment</a> 做为博客的评论系统，因为 Gitment 是一款基于 GitHub Issues 的评论系统，这样对于评论的管理完全可以在一个仓库里实现。</p>
<p>步骤如下：</p>
<p>首先点击 <a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">这里</a> 注册一个新的 OAuth Application 。<code>Homepage URL</code> 和 <code>Authorization callback URL</code> 均填写博客地址就行</p>
<p><img src="https://i.loli.net/2018/01/31/5a716e1494f32.png" alt=""></p>
<p>接着注册好后会得到 <code>Client ID</code> 和 <code>Client Secret</code> ，打开 <code>主题配置</code> 找到 <code>gitment</code> 对照着修改</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">gitment:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mint:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">lazy:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">cleanly:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">language:</span></span><br><span class="line">  <span class="attr">github_user:</span> <span class="string">hooray</span></span><br><span class="line">  <span class="attr">github_repo:</span> <span class="string">hooray.github.io</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="string">xxxxxxxxxx</span></span><br><span class="line">  <span class="attr">client_secret:</span> <span class="string">xxxxxxxxxx</span></span><br><span class="line">  <span class="attr">redirect_protocol:</span></span><br></pre></td></tr></table></figure>
<p>最后就是发布页面，发布好后，访问页面并使用你的 GitHub 账号登录（请确保账号是上面 repo 的拥有者），点击初始化按钮。之后其他用户就可以在该页面发表评论了。</p>
<div class="note warning">
            <p>需要注意的是，Gitment 不支持链接里面有中文，不然初始化评论的时候会提示 <code>Error: Validation Failed</code> 。解决办法就是创建文章的时候，使用纯英文当文件名。</p>
          </div>
<h4 id="文章链接唯一化"><a class="header-anchor" href="#文章链接唯一化"></a>文章链接唯一化</h4>
<p>有时候可能需要修改一篇已经发布的文章的标题，或者是修改它的发布时间，这样就导致文章链接地址会变化，也就间接导致 Gitment 评论丢失。</p>
<p>解决这个问题需要安装 <code>hexo-abbrlink</code> 工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn add hexo-abbrlink</span><br></pre></td></tr></table></figure>
<p>安装好后打开 <code>站点配置</code> 找到 <code>permalink</code> 修改</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">permalink:</span> posts/<span class="symbol">:abbrlink/</span></span><br></pre></td></tr></table></figure>
<p>并在增加如下代码</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># abbrlink config</span></span><br><span class="line"><span class="symbol">abbrlink:</span></span><br><span class="line"><span class="symbol">  alg:</span> crc32  <span class="meta"># 算法：crc16(default) and crc32</span></span><br><span class="line"><span class="symbol">  rep:</span> hex    <span class="meta"># 进制：dec(default) and hex</span></span><br></pre></td></tr></table></figure>
<p>配置好后重新发布就能看到效果。</p>
<div class="note primary">
            <p>个人强烈推荐安装这个工具，这样创建文章的时候可以继续使用中文名，如果博客里文章多了，还是中文一目了然，也方便管理，同时也解决了上面的问题，链接永久唯一化后对 SEO 会更友好。</p>
          </div>
<h4 id="支持-emoji-表情"><a class="header-anchor" href="#支持-emoji-表情"></a>支持 emoji 表情</h4>
<blockquote>
<p>2019 年 2 月 3 日更新</p>
</blockquote>
<p>因为 Hexo 默认的 markdown 渲染引擎不支持 Github 的 emoji 表情，所以要支持必须换一个引擎，然后再增加一个 emoji 插件，依次执行以下命令即可：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">npm un hexo-renderer-marked <span class="comment">--save</span></span><br><span class="line">npm i hexo-renderer-markdown-<span class="keyword">it</span> <span class="comment">--save</span></span><br><span class="line">npm install markdown-<span class="keyword">it</span>-emoji <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<p>完成插件安装后还需要修改 Hexo 站点配置文件 <code>_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## markdown 渲染引擎配置，默认是hexo-renderer-marked，这个插件渲染速度更快，且有新特性</span></span><br><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">render:</span></span><br><span class="line">    <span class="attr">html:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">xhtmlOut:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">breaks:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">linkify:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">typographer:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">quotes:</span> <span class="string">'“”‘’'</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-footnote</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-sup</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-sub</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-abbr</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-emoji</span></span><br><span class="line">  <span class="attr">anchors:</span></span><br><span class="line">    <span class="attr">level:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">collisionSuffix:</span> <span class="string">'v'</span></span><br><span class="line">    <span class="attr">permalink:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">permalinkClass:</span> <span class="string">header-anchor</span></span><br><span class="line">    <span class="attr">permalinkSymbol:</span> <span class="string">''</span></span><br></pre></td></tr></table></figure>
<p>最后我们在 <a href="https://www.emojicopy.com/" target="_blank" rel="noopener">网站1</a> 或者 <a href="https://github.com/caiyongji/emoji-list/blob/master/README-CN.md" target="_blank" rel="noopener">网站2</a> 复制想要的 emoji 表情就可以了。😄</p>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<ul>
<li><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo 文档</a></li>
<li><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT 使用文档</a></li>
<li><a href="https://www.jianshu.com/p/189fd945f38f" target="_blank" rel="noopener">搭建个人博客-hexo+github详细完整步骤</a></li>
<li><a href="https://imsun.net/posts/gitment-introduction/" target="_blank" rel="noopener">Gitment：使用 GitHub Issues 搭建评论系统</a></li>
<li><a href="https://segmentfault.com/a/1190000009544924" target="_blank" rel="noopener">hexo的next主题个性化配置教程</a></li>
<li><a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html" target="_blank" rel="noopener">为NexT主题添加文章阅读量统计功能</a></li>
<li><a href="http://muyunyun.cn/posts/f55182c5" target="_blank" rel="noopener">hexo 摸爬滚打之进阶教程</a></li>
<li><a href="https://io-oi.me/tech/hexo-next-optimization" target="_blank" rel="noopener">打造个性超赞博客 Hexo + NexT + GitHub Pages 的超深度优化</a></li>
</ul>
]]></content>
      <categories>
        <category>Web 综合</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
</search>
